<?xml version="1.0"?><st-source><time-stamp>From VisualWorks® Personal Use Edition, 7.9.1 of 2012年10月18日 on 2014年11月2日 at 1:37:22</time-stamp><comment><name-space-id>Jun</name-space-id><body>"Jun" package is being published as free softwareunder the terms of "GNU General Public License".Copyleft by	AOKI Atsushi,	ODA Tomohiro,	HOSHI Takanori,	NISHINAKA Yoshiyuki,	YAMADA Ryousuke,	WATANABE Katsuhiro,	Ankur J. Chavda,	NISHIHARA Satoshi,	MATSUDA Ryouichi,	MATSUO Minoru,	Brent N. Reeves,	ASAOKA Hiroko,	TANAKA Shinichi,	ASADA Mitsuhiro,	Paul Guyot (LIP6),	Albert Kerssies,	MATSUBARA Nobuto,	SAWAMOTO Eri,	HAYASHI Koichiro,	NAKAO Tatsuya, and	NISHIMURA Yuuri.http://www.cc.kyoto-su.ac.jp/~atsushi/Jun/</body></comment><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><comment><name-space-id>SSK</name-space-id><body>Copyright 2008-2014 SSK (Smalltalk Studies in Kyoto). All Rights Reserved.</body></comment><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><methods><class-id>Core.Object</class-id> <category>prolog</category><body package="Kernel-Objects" selector="car">car	self == nil ifTrue: [^nil].	self error: 'send message car to atom'</body><body package="Kernel-Objects" selector="cdr">cdr	self == nil ifTrue: [^nil].	self error: 'send message cdr to atom'</body><body package="Kernel-Objects" selector="cons:">cons: anObject 	^JunPrologList car: self cdr: anObject</body><body package="Kernel-Objects" selector="consp">consp	^false</body><body package="Kernel-Objects" selector="isJunPrologEntity">isJunPrologEntity	self == nil ifTrue: [^true].	(self isKindOf: Number)		ifTrue: [^true].	^false</body><body package="Kernel-Objects" selector="isJunPrologVariable">isJunPrologVariable	^false</body><body package="Kernel-Objects" selector="printJunPrologOn:">printJunPrologOn: aStream 	self == nil		ifTrue: 			[aStream nextPutAll: '[]'.			^self].	(self isKindOf: Number)		ifTrue: 			[self printOn: aStream.			^self].	aStream nextPut: ${.	self printOn: aStream.	aStream nextPut: $}</body><body package="Kernel-Objects" selector="printJunPrologOn:level:">printJunPrologOn: aStream level: anInteger 	self printJunPrologOn: aStream</body><body package="Kernel-Objects" selector="printJunPrologString">printJunPrologString	| aStream |	aStream := WriteStream on: (String new: 20).	self printJunPrologOn: aStream.	^aStream contents</body></methods><methods><class-id>Core.Point class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"Point fromUser."	| aPoint |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			aPoint := InputState default mousePoint.			[InputState default mouseButtons &gt; 0] whileTrue].	^aPoint</body></methods><methods><class-id>Graphics.Polyline class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"Polyline fromUser."	| oldPoint newPoint aStream |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			oldPoint := InputState default mousePoint.			newPoint := oldPoint.			aStream := WriteStream on: (Array new: 1024).			aStream nextPut: newPoint.			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					newPoint := InputState default mousePoint.					newPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0 ifTrue: [Screen default									displayShape: aStream contents									at: Point zero									forMilliseconds: 20]]						ifFalse: 							[aStream nextPut: newPoint.							Screen default								displayShape: aStream contents								at: Point zero								forMilliseconds: 20.							oldPoint := newPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^self vertices: aStream contents</body></methods><methods><class-id>Graphics.Circle class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"Circle fromUser."	| startPoint aCenter oldPoint endPoint aCircle |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			startPoint := InputState default mousePoint.			oldPoint := startPoint.			endPoint := oldPoint.			aCenter := self center: startPoint radius: 1.			aCircle := self center: startPoint radius: 0.			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					endPoint := InputState default mousePoint.					aCircle := self center: startPoint radius: (endPoint dist: startPoint) rounded.					endPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0								ifTrue: 									[Screen default										displayShape: aCenter asPolyline vertices										at: Point zero										forMilliseconds: 20.									Screen default										displayShape: aCircle asPolyline vertices										at: Point zero										forMilliseconds: 20]]						ifFalse: 							[Screen default								displayShape: aCenter asPolyline vertices								at: Point zero								forMilliseconds: 20.							Screen default								displayShape: aCircle asPolyline vertices								at: Point zero								forMilliseconds: 20.							oldPoint := endPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^aCircle</body></methods><methods><class-id>Graphics.LineSegment class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"LineSegment fromUser."	| startPoint oldPoint endPoint lineSegment |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			startPoint := InputState default mousePoint.			oldPoint := startPoint.			endPoint := oldPoint.			lineSegment := self from: startPoint to: endPoint.			JunApplicationModel displayPendingInvalidation.			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					endPoint := InputState default mousePoint.					lineSegment := self from: startPoint to: endPoint.					endPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0 ifTrue: [Screen default									displayShape: lineSegment asPointArray									at: Point zero									forMilliseconds: 20]]						ifFalse: 							[Screen default								displayShape: lineSegment asPointArray								at: Point zero								forMilliseconds: 20.							oldPoint := endPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^lineSegment</body></methods><methods><class-id>Graphics.EllipticalArc class</class-id> <category>instance creation</category><body package="Graphics-Geometry" selector="fromUser">fromUser	"EllipticalArc fromUser."	| startPoint aCenter oldPoint endPoint aRectangle ellipticalArc |	Cursor crossHair		showWhile: 			[[InputState default mouseButtons &gt; 0] whileFalse.			startPoint := InputState default mousePoint.			oldPoint := startPoint.			endPoint := oldPoint.			aCenter := self center: startPoint radius: 1.			ellipticalArc := self boundingBox: (startPoint extent: 0 @ 0).			[InputState default mouseButtons &gt; 0]				whileTrue: 					[JunApplicationModel displayPendingInvalidation.					endPoint := InputState default mousePoint.					aRectangle := Rectangle vertex: startPoint - (endPoint - startPoint) vertex: startPoint + (endPoint - startPoint).					aRectangle := aRectangle align: aRectangle center with: startPoint.					(startPoint x &lt;= endPoint x and: [startPoint y &lt;= endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 0										sweepAngle: 90].					(startPoint x &gt; endPoint x and: [startPoint y &lt;= endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 90										sweepAngle: 90].					(startPoint x &gt; endPoint x and: [startPoint y &gt; endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 180										sweepAngle: 90].					(startPoint x &lt;= endPoint x and: [startPoint y &gt; endPoint y])						ifTrue: [ellipticalArc := self										boundingBox: aRectangle										startAngle: 270										sweepAngle: 90].					endPoint = oldPoint						ifTrue: [Time millisecondClockValue \\ 100 = 0								ifTrue: 									[Screen default										displayShape: aCenter asPolyline vertices										at: Point zero										forMilliseconds: 20.									Screen default										displayShape: ellipticalArc asPolyline vertices										at: Point zero										forMilliseconds: 20]]						ifFalse: 							[Screen default								displayShape: aCenter asPolyline vertices								at: Point zero								forMilliseconds: 20.							Screen default								displayShape: ellipticalArc asPolyline vertices								at: Point zero								forMilliseconds: 20.							oldPoint := endPoint]].			[InputState default mouseButtons &gt; 0] whileTrue].	^ellipticalArc</body></methods><methods><class-id>Graphics.OpaqueImage class</class-id> <category>instance creation</category><body package="Graphics-Images" selector="fromUser">fromUser	"OpaqueImage fromUser."	"| opaqueImage aWindow | 	opaqueImage := OpaqueImage fromUser. 	aWindow := ScheduledWindow new. 	aWindow minimumSize: opaqueImage extent. 	aWindow component: opaqueImage. 	aWindow open 	"	| pointArray aFigure aShape minPoint maxPoint aRectangle aPixmap graphicsContext |	pointArray := Polyline fromUser vertices.	pointArray isEmpty		ifTrue: 			[aFigure := Image						extent: 0 @ 0						depth: Screen default colorDepth						palette: Screen default colorPalette.			aShape := aFigure copy.			aShape := aShape convertToPalette: MappedPalette whiteBlack.			aShape palette: CoveragePalette monoMaskPalette.			^OpaqueImage figure: aFigure shape: aShape].	JunApplicationModel displayPendingInvalidation.	pointArray first = pointArray last		ifFalse: 			[pointArray := pointArray copyWith: pointArray first.			Screen default				displayShape: pointArray				at: Point zero				forMilliseconds: 10].	minPoint := nil.	maxPoint := nil.	pointArray		do: 			[:aPoint | 			minPoint isNil				ifTrue: [minPoint := aPoint]				ifFalse: [minPoint := aPoint min: minPoint].			maxPoint isNil				ifTrue: [maxPoint := aPoint]				ifFalse: [maxPoint := aPoint max: maxPoint]].	aRectangle := minPoint corner: maxPoint.	aFigure := Screen default completeContentsOfArea: aRectangle.	aPixmap := Pixmap extent: aRectangle extent.	[Cursor execute		showWhile: 			[graphicsContext := aPixmap graphicsContext.			graphicsContext paint: ColorValue white.			graphicsContext displayRectangle: aPixmap bounds.			graphicsContext paint: ColorValue black.			graphicsContext displayPolygon: pointArray at: aRectangle origin negated.			aShape := aPixmap asImage]]		ensure: [aPixmap close].	aShape := aShape convertToPalette: MappedPalette whiteBlack.	aShape palette: CoveragePalette monoMaskPalette.	^OpaqueImage figure: aFigure shape: aShape</body></methods><methods><class-id>Kernel.SystemUtils class</class-id> <category>accessing</category><body package="System-Support" selector="getEnvironmentVariable:">getEnvironmentVariable: varName 	"Get an environment variable's value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new getVariable: varName]</body><body package="System-Support" selector="getEnvironmentVariable:ifAbsent:">getEnvironmentVariable: varName ifAbsent: errorBlock	"Get an environment variable's value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new		getVariable: varName		ifAbsent: errorBlock]</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>changing</category><body package="System-Support" selector="changed:">changed: aSymbol 	aSymbol = #returnFromSnapshot 		ifTrue: 			[(			[(SimpleHelp 				helpString: 'CINCOM SYSTEMS, INC.SOFTWARE LICENSE AGREEMENTFOR CINCOM SMALLTALK PERSONAL USEIMPORTANT NOTICE: READ THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT CAREFULLY BEFORE PROCEEDING TO USE THIS COMPUTER SOFTWARE AND THE ACCOMPANYING USER DOCUMENTATION (THE "PRODUCT"). THE PRODUCT IS COPYRIGHTED AND ITS USE IS LICENSED (NOT SOLD). BY DOWNLOADING AND/OR INSTALLING THE PRODUCT ON A COMPUTER AND USING THE PRODUCT, YOU ARE ACCEPTING AND AGREEING TO THE TERMS OF THIS LICENSE AGREEMENT. IF YOU ARE NOT WILLING TO BE BOUND BY THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT, YOU SHOULD NOT DOWNLOAD OR, USE THE PRODUCT AND PROMPTLY DELETE, DESTROY OR RETURN THE PRODUCT. THIS LICENSE AGREEMENT REPRESENTS THE ENTIRE AGREEMENT CONCERNING THE PRODUCT BETWEEN YOU AND CINCOM SYSTEMS, INC. (REFERRED TO HEREIN AS "LICENSOR"), AND THIS AGREEMENT SUPERSEDES ANY PRIOR PROPOSALS, REPRESENTATIONS, OR UNDERSTANDING BETWEEN THE PARTIES PERTAINING TO THE PRODUCTS GOVERENED UNDER THIS LICENSE AGREEMENT.1. License Grant. Licensor hereby grants to you, the individual, and you do hereby accept, a nonexclusive and nontransferable license to use the Product only as is authorized in this License Agreement. The Product may be used or accessed by only you only at a single location on computers owned, leased or otherwise controlled by you in the manner and subject to the terms set forth in this License Agreement. You agree that you will not, assign, sublicense, transfer, pledge, lease, rent, allow access to or share your rights under this License Agreement. You agree that your rights under this License Agreement does not cover the use of the Products for any revenue generating purpose or operation of any business venture and are not to pass to a successor through merger or consolidation. You agree that you may not reverse assemble, reverse compile, reverse engineer or otherwise translate the Product. You agree that you receive no rights other than those expressly granted to you in this License AgreementYou may make one copy of the Product for the purpose of backup in the event the Product is damaged or destroyed. Any such copies of the Product shall include Licensor''s copyright and other proprietary notices. Execpt as authorized under this paragraph, no copies of the Product or any portions thereof may be made by you or any person under your authority or control.U.S. Government Restricted Rights: Licensor provides the Product with RESTRICTED RIGHTS. Use, duplication, or disclosure by the U.S. Government or any agency or instrumentality thereof is subject to restrictions set forth in subparagraphs (c) (1) and (2) of the Commercial Computer Software - Restricted Rights clause at 48 C.F.R.52.227-19, or any successor provision, as applicable. The Contractor/Manufacturer is Cincom Systems, Inc., 55 Merchant Street, Cincinnati, Ohio 45246.2. Licensor''s Rights. You acknowledge and agree that the Product is a proprietary product of Licensor protected under U.S. copyright law and international treaty provisions. You further acknowledge and agree that all right, title, and interest in and to the Product, including associated intellectual property rights, are and shall remain with Licensor. This License Agreement does not convey to you an interest in or to the Product, but only a limited right of use revocable in accordance with the terms of this License Agreement.3. License Fees. This license is granted to you for your personal use only. Therefore, no license fees are involved, unless you breach the terms and conditions of this Agreement. Upon any such breach you shall pay Licensor any and all applicable damages relating to the breach, including, but not limited to the applicable license fees for the Product for your nonconforming use.4. Term. This License Agreement is effective upon delivery of the Product to you and will remain in effect until terminated. You may terminate this License Agreement at any time. Licensor may terminate this License Agreement upon your breach of any term hereof. Upon termination by Licensor, you agree to discontinue usage and return or destroy all copies and portions of the Product.5. Limited Warranty. THE PRODUCT IS LICENSED "AS IS," AND LICENSOR DISCLAIMS ANY AND ALL OTHER WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.6. Limitation of Liability. Licensor''s cumulative liability to you or any other party for any loss or damages resulting from any claims, demands, or actions arising out of or relating to this Agreement will not exceed the total amount paid by you to Licensor. In no event shall Licensor be liable for any indirect, incidental, consequential, special, or exemplary damages or lost profits, even if Licensor has been advised of the possibility of such damages. THE ABOVE LIMITATION OR EXCLUSION MAY NOT BE ALLOWED BY ALL JURISDICTIONS.7. Trademark. The trademarks and copyrights listed in this License Agreement, on the Product, or related documentation are trademarks and copyrights of Licensor. No right, license, or interest to such trademarks and copyrights is granted hereunder, and you agree that no such right, license, or interest shall be asserted by you with respect to such trademarks and copyrights.8. Governing Law. This License Agreement shall be construed and governed in accordance with the laws of the State of Ohio.9. Costs of Litigation. If any action is brought by either party to this License Agreement against the other party regarding the subject matter hereof, the prevailing party shall be entitled to recover, in addition to any other relief granted, reasonable attorney fees and expenses of litigation.10. Severability. Should any term of this License Agreement be declared void or unenforceable by any court of competent jurisdiction, such declaration shall have no effect on the remaining terms hereof.11. No Waiver. The failure of either party to enforce any rights granted hereunder or to take action against the other party in the event of any breach hereunder shall not be deemed a waiver by that party as to subsequent enforcement of such or any other such rights or any subsequent actions in the event of future breaches.12. Export. Licensee shall ensure that neither the Cincom Products, commodities, technology, or software, nor any direct product thereof are exported, directly or indirectly, in violation of the export laws and regulations of the United States of America including the Export Administration Regulations. Diversion contrary to U.S. law is prohibited.If you have any questions about this License Agreement, or if you have any questions or comments about the Product, please contact your local Cincom sales office.') 					openInterface: #licenseSpec]					on: UserInterrupt					do: [:exception | exception resume]) ifFalse: [ObjectMemory quitPrimitive]].	super changed: aSymbol</body></methods><methods><class-id>SetEnv class</class-id> <category>class initialization</category><body package="(none)" selector="initialize">initialize	"SetEnv initialize."	self install</body><body package="(none)" selector="install">install	"SetEnv install."	SystemUtils class compile: 'getEnvironmentVariable: varName 	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new getVariable: varName]' classified: 'accessing'.	SystemUtils class compile: 'getEnvironmentVariable: varName ifAbsent: errorBlock	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^SetEnv readSetEnv at: varName ifAbsent: [	^OSSystemSupport concreteClass new		getVariable: varName		ifAbsent: errorBlock]' classified: 'accessing'</body><body package="(none)" selector="obsolete">obsolete	self uninstall.	super obsolete</body><body package="(none)" selector="uninstall">uninstall	"SetEnv uninstall."	SystemUtils class compile: 'getEnvironmentVariable: varName 	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^OSSystemSupport concreteClass new getVariable: varName' classified: 'accessing'.	SystemUtils class compile: 'getEnvironmentVariable: varName ifAbsent: errorBlock	"Get an environment variable''s value from the OS. This has different 	 meanings on different platforms. On Windows NT and Windows 95, 	 environment variables are first looked-up in the registry, and subsequently	 in the C environment. On Windows 3.1, they are looked-up in a VISWORKS.INI	 file and subsequently in the C environment.. On Unix, the C environment	 variables are  used. 		 If the variable does not exist in the environment, answer the empty string."	^OSSystemSupport concreteClass new		getVariable: varName		ifAbsent: errorBlock' classified: 'accessing'</body></methods><methods><class-id>SetEnv class</class-id> <category>string and character</category><body package="(none)" selector="getChar:">getChar: aStream 	| char |	aStream atEnd		ifTrue: [char := nil]		ifFalse: 			[char := aStream next.			char = Character lf				ifTrue: [char := Character cr]				ifFalse: [char = Character cr ifTrue: [aStream peek = Character lf ifTrue: [aStream next]]]].	^char</body><body package="(none)" selector="getLine:">getLine: aStream 	| stream char |	stream := WriteStream on: (String new: 128).	char := self getChar: aStream.	[char notNil and: [char ~= Character cr]]		whileTrue: 			[stream nextPut: char.			char := self getChar: aStream].	(char notNil and: [char = Character cr])		ifTrue: [stream nextPut: char].	^stream contents</body><body package="(none)" selector="separate:dividers:">separate: separateCollection dividers: dividerCollection 	"SetEnv separate: #(a b c d e f g h) dividers: #(d f)."	| indexCollection index intervalCollection s e result |	indexCollection := OrderedCollection new.	indexCollection add: 0.	index := 1.	separateCollection		do: 			[:each | 			(dividerCollection includes: each)				ifTrue: [indexCollection add: index].			index := index + 1].	indexCollection add: separateCollection size + 1.	intervalCollection := OrderedCollection new.	1 to: indexCollection size - 1		do: 			[:i | 			s := indexCollection at: i.			e := indexCollection at: i + 1.			intervalCollection add: (s + 1 to: e - 1)].	result := OrderedCollection new.	intervalCollection do: [:interval | interval size &gt; 0 ifTrue: [result add: (separateCollection copyFrom: interval first to: interval last)]].	^result</body><body package="(none)" selector="separators">separators	"SetEnv separators."	| stream |	stream := WriteStream on: (String new: 4).	stream nextPut: Character space.	stream nextPut: Character tab.	stream nextPut: Character cr.	stream nextPut: Character lf.	^stream contents</body></methods><methods><class-id>SetEnv class</class-id> <category>private</category><body package="(none)" selector="readSetEnv">readSetEnv	"SetEnv readSetEnv."	| aDictionary aFilename aStream aString aCollection aKey aValue anIndex |	aDictionary := Dictionary new.	aFilename := 'SetEnv.txt' asFilename.	aFilename exists ifFalse: [^aDictionary].	aFilename isReadable ifFalse: [^aDictionary].	aStream := aFilename readStream.	[[aStream atEnd]		whileFalse: 			[aString := self getLine: aStream.			aCollection := self separate: aString dividers: self separators.			(aCollection size &gt;= 3 and: [aCollection first asLowercase = 'setenv'])				ifTrue: 					[aKey := aCollection at: 2.					aValue := aString copyFrom: (aString findString: (aCollection at: 3)									startingAt: 1)								to: aString size.					anIndex := aValue reverse findFirst: [:aCharacter | aCharacter isSeparator not].					anIndex &gt; 0 ifTrue: [aValue := aValue copyFrom: 1 to: aValue size - (anIndex - 1)].					aValue size &gt;= 2 ifTrue: [((aValue first = $' and: [aValue last = $'])							or: [aValue first = $" and: [aValue last = $"]])							ifTrue: [aValue := aValue copyFrom: 2 to: aValue size - 1]].					aDictionary at: aKey put: aValue]]]		ensure: [aStream close].	^aDictionary</body><body package="(none)" selector="setEnv">setEnv	"SetEnv setEnv."	self errorSignal handle: [:exception | exception return]		do: [self readSetEnv				keysAndValuesDo: 					[:key :value | 					SystemUtils setEnvironmentVariable: key value: value.					Transcript cr; show: 'setenv'; space; show: key asString; space.					(value asString detect: [:char | char isSeparator]						ifNone: [nil]) isNil						ifTrue: [Transcript show: value asString]						ifFalse: [Transcript show: value printString]]]</body></methods><methods><class-id>KSU.ProgramManager class</class-id> <category>accessing</category><body package="KSU-System" selector="bundle">bundle	"KSU.ProgramManager bundle."	^Store.Registry bundleNamed: #KSU</body><body package="KSU-System" selector="bundles">bundles	"KSU.ProgramManager bundles."	^self bundle allItems select: [:each | each isBundle]</body><body package="KSU-System" selector="classes">classes	"KSU.ProgramManager classes."	| aBundle |	aBundle := self bundle.	^aBundle allClasses collect: [:each | each actual]</body><body package="KSU-System" selector="implementedMethods">implementedMethods	"KSU.ProgramManager implementedMethods."	| aCollection |	aCollection := OrderedCollection new.	self classes do: 			[:aClass |			aClass selectors do: [:aSymbol | aCollection add: aClass -&gt; aSymbol].			aClass class selectors do: [:aSymbol | aCollection add: aClass class -&gt; aSymbol]].	^aCollection</body><body package="KSU-System" selector="namespace">namespace	"KSU.ProgramManager namespace."	| aNameSpace |	aNameSpace := Smalltalk at: #KSU.	(aNameSpace isKindOf: NameSpace) ifFalse: [^nil].	^aNameSpace</body><body package="KSU-System" selector="packages">packages	"KSU.ProgramManager packages."	^self bundle allItems select: [:each | each isPackage]</body></methods><methods><class-id>KSU.ProgramManager class</class-id> <category>documents</category><body package="KSU-System" selector="doclet">doclet	"KSU.ProgramManager doclet."	| classCollection aDoclet toDirectory fromDirectory |	classCollection := self classes.	aDoclet := KSU.TextDoclet codePrint: classCollection.	fromDirectory := aDoclet instVarAt: (aDoclet class allInstVarNames indexOf: 'toDirectory').	toDirectory := fromDirectory directory construct: 'doclet'.	toDirectory exists		ifTrue: 			[toDirectory directoryContents do: [:each | (toDirectory construct: each) delete].			toDirectory delete].	fromDirectory renameTo: toDirectory.	JunURL browse: (toDirectory construct: 'index.html') asURI asString.	^aDoclet</body></methods><methods><class-id>KSU.ProgramManager class</class-id> <category>metrics</category><body package="KSU-System" selector="linesOfCode">linesOfCode	"KSU.ProgramManager linesOfCode inspect."	| linesOfCode aString |	linesOfCode := 0.	self classes do: 			[:aClass |			aString := KSU.TextDoclet codePrintStringOf: aClass.			linesOfCode := linesOfCode + (aString select: [:each | each = Character cr]) size].	^linesOfCode</body></methods><methods><class-id>KSU.ProgramManager class</class-id> <category>private</category><body package="KSU-System" selector="makeBackups:forFilename:">makeBackups: howMany forFilename: aFilename	(howMany to: 1 by: -1) do: 			[:n |			| anArray bakFilename |			anArray := Filename splitExtension: aFilename asString.			n &lt;= 1				ifTrue: [bakFilename := aFilename]				ifFalse: 					[bakFilename := (anArray first , (n - 1) printString , aFilename extension)								asFilename].			bakFilename exists				ifTrue: 					[| oldFilename |					oldFilename := (anArray first , n printString , aFilename extension)								asFilename.					bakFilename copyTo: oldFilename]]</body><body package="KSU-System" selector="writeClassInitializeOn:">writeClassInitializeOn: aFileManager	(self classes select: [:aClass | aClass class selectors includes: #initialize]) do: 			[:aClass |			| aStream |			aStream := aFileManager ensureOpen: aFileManager target.			aStream cr.			aStream cr.			aStream nextPutAll: '&lt;initialize&gt;'.			aStream				cr;				nextPutAll: '&lt;class-id&gt;';				nextPutAll: aClass shortName;				nextPutAll: '&lt;/class-id&gt;';				cr.			aStream nextPutAll: '&lt;/initialize&gt;']</body><body package="KSU-System" selector="writeTimeStampOn:">writeTimeStampOn: aFileManager	| aStream |	aStream := aFileManager ensureOpen: aFileManager target.	aStream cr.	aStream cr.	aStream nextPutAll: '&lt;do-it&gt;'.	aStream cr.	JunSourceCodeSaver writeStampOn: aStream.	aStream cr.	aStream nextPutAll: '&lt;/do-it&gt;'</body></methods><methods><class-id>KSU.ProgramManager class</class-id> <category>comments</category><body package="KSU-System" selector="commentString">commentString	"KSU.ProgramManager commentString."	^'Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.'</body><body package="KSU-System" selector="propagateComment">propagateComment	"KSU.ProgramManager propagateComment."	| aString |	aString := self commentString.	self classes do: [:aClass | aClass comment: aString].	self bundle allItems do: [:each | each comment: aString].	self namespace comment: aString</body></methods><methods><class-id>KSU.ProgramManager class</class-id> <category>saving</category><body package="KSU-System" selector="save">save	"KSU.ProgramManager save."	| aBundle dateString timeString aDirectory aFilename aFileManager |	aBundle := self bundle.	dateString := JunCalendarModel stringFromDate select: [:each | each isDigit].	timeString := JunCalendarModel stringFromTime select: [:each | each isDigit].	[(aDirectory := JunSystem homeDirectory construct: 'Desktop') exists ifFalse: [self error: String new]]		on: self errorSignal		do: [:exception | aDirectory := Filename defaultDirectory directory].	aFilename := aDirectory construct: 'KSU_' , dateString , '_' , timeString , '.st'.	Cursor write showWhile: 			[aFileManager := SourceCodeStream write: aFilename.						[aBundle fileOutOn: aFileManager.			self writeClassInitializeOn: aFileManager.			self writeTimeStampOn: aFileManager]					ensure: [aFileManager close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."</body></methods><methods><class-id>KSU.TextDoclet class</class-id> <category>examples</category><body package="KSU-Tool" selector="example1">example1	"KSU.TextDoclet example1."	| aDirectory aDoclet |	JunUniFileModel requestDirectoryName		ifNil: [^nil]		ifNotNil: [:fileModel | aDirectory := fileModel asFilename].	aDoclet := TextDoclet dive: aDirectory pattern: '*.java'.	aDoclet generate.	^aDoclet</body><body package="KSU-Tool" selector="example2">example2	"KSU.TextDoclet example2."	| classCollection aDoclet |	classCollection := (Array with: TextDoclet with: Example with: ProgramManager)				, (Array with: Point with: Rectangle with: LineSegment).	aDoclet := TextDoclet codePrint: classCollection.	^aDoclet</body></methods><methods><class-id>KSU.TextDoclet class</class-id> <category>defaults</category><body package="KSU-Tool" selector="defaultDestinationDirectory">defaultDestinationDirectory	"KSU.TextDoclet defaultDestinationDirectory."	^JunSystem homeDirectory construct: 'Desktop'</body><body package="KSU-Tool" selector="defaultDivingLevel">defaultDivingLevel	"KSU.TextDoclet defaultDivingLevel."	^10</body><body package="KSU-Tool" selector="defaultEncoding">defaultEncoding	"KSU.TextDoclet defaultEncoding."	^#UTF_8</body><body package="KSU-Tool" selector="defaultTabStop">defaultTabStop	"KSU.TextDoclet defaultTabStop."	^4</body></methods><methods><class-id>KSU.TextDoclet class</class-id> <category>instance creation</category><body package="KSU-Tool" selector="dive:pattern:">dive: aDirectory pattern: aString	| aDoclet |	aDoclet := self new.	aDoclet		fromDirectory: aDirectory		textFiles: (JunFileModel				dive: aDirectory				level: self defaultDivingLevel				pattern: aString)		toDirectory: (self defaultDestinationDirectory				construct: aDirectory tail , '_' , (JunCalendarModel stringFromDateAndTime select: [:each | each isDigit])).	^aDoclet</body></methods><methods><class-id>KSU.TextDoclet class</class-id> <category>utilities</category><body package="KSU-Tool" selector="codePrint:">codePrint: classCollection	"KSU.TextDoclet codePrint: (KSU.ProgramManager classes)."	| aString aDirectory aCollection aDoclet |	aString := String new.	classCollection do: [:aClass | aString := aString , aClass name] separatedBy: [aString := aString , '_'].	aString size &gt; 50 ifTrue: [aString := aString copyFrom: 1 to: 50].	JunControlUtility		assert: 			[[(aDirectory := aString asFilename) exists] whileTrue: [aString := aString , '_'].			aDirectory makeDirectory.			aCollection := OrderedCollection new]		do: 			[classCollection do: 					[:aClass |					| aFilename |					aString := aClass fullName collect: [:aCharacter | aCharacter = $. ifTrue: [$_] ifFalse: [aCharacter]].					aFilename := aDirectory construct: aString , '.st'.					aCollection add: aFilename.					JunControlUtility						assert: [(aFilename withEncoding: self defaultEncoding) writeStream]						do: [:aStream | TextDoclet codePrintStringOf: aClass on: aStream]						ensure: [:aStream | aStream close]].			aDoclet := TextDoclet dive: aDirectory pattern: '*.st'.			aDoclet generate]		ensure: 			[aCollection do: [:aFilename | aFilename delete].			aDirectory delete].	^aDoclet</body><body package="KSU-Tool" selector="codePrintStringOf:">codePrintStringOf: theClass	"KSU.TextDoclet codePrintStringOf: KSU.TextDoclet."	| aString |	JunControlUtility		assert: [(String new: 1024) writeStream]		do: 			[:aStream |			self codePrintStringOf: theClass on: aStream.			aString := aStream contents]		ensure: [:aStream | (aStream respondsTo: #close) ifTrue: [aStream close]].	^aString</body><body package="KSU-Tool" selector="codePrintStringOf:on:">codePrintStringOf: theClass on: theStream	"KSU.TextDoclet codePrintStringOf: KSU.TextDoclet on: (Transcript clear; yourself)."	| aBlock aString |	aBlock :=			[:aClass :aStream |			| anOrganization aBoolean |			80 timesRepeat: [aStream nextPutAll: '='].			2 timesRepeat: [aStream cr].			aStream nextPutAll: aClass definition.			2 timesRepeat: [aStream cr].			anOrganization := aClass organization.			aBoolean := true.			aClass selectors asSortedCollection do: 					[:aSelector |					| aCode |					aBoolean						ifTrue: 							[80 timesRepeat: [aStream nextPutAll: '='].							2 timesRepeat: [aStream cr].							aBoolean := false]						ifFalse: 							[60 timesRepeat: [aStream nextPutAll: '-'].							2 timesRepeat: [aStream cr]].					aStream						nextPutAll: aClass fullName;						nextPutAll: ' method for ';						nextPutAll: (anOrganization categoryOfElement: aSelector) asString printString.					2 timesRepeat: [aStream cr].					aCode := aClass sourceMethodAt: aSelector.					aStream nextPutAll: aCode.					2 timesRepeat: [aStream cr]]].	JunControlUtility		assert: [(String new: 1024) writeStream]		do: 			[:aStream |			| aClass |			aClass := theClass isMeta ifTrue: [theClass soleInstance] ifFalse: [theClass yourself].			aBlock value: aClass value: aStream.			aBlock value: aClass class value: aStream.			80 timesRepeat: [aStream nextPutAll: '='].			aStream cr.			aString := aStream contents]		ensure: [:aStream | (aStream respondsTo: #close) ifTrue: [aStream close]].	theStream nextPutAll: aString.	^aString</body></methods><methods><class-id>SSK.ProgramManager class</class-id> <category>accessing</category><body package="SSK-System" selector="bundle">bundle	"SSK.ProgramManager bundle."	^Store.Registry bundleNamed: #SSK</body><body package="SSK-System" selector="bundles">bundles	"SSK.ProgramManager bundles."	^self bundle allItems select: [:each | each isBundle]</body><body package="SSK-System" selector="classes">classes	"SSK.ProgramManager classes."	| aBundle |	aBundle := self bundle.	^aBundle allClasses collect: [:each | each actual]</body><body package="SSK-System" selector="implementedMethods">implementedMethods	"SSK.ProgramManager implementedMethods."	| aCollection |	aCollection := OrderedCollection new.	self classes do: 			[:aClass |			aClass selectors do: [:aSymbol | aCollection add: aClass -&gt; aSymbol].			aClass class selectors do: [:aSymbol | aCollection add: aClass class -&gt; aSymbol]].	^aCollection</body><body package="SSK-System" selector="namespace">namespace	"SSK.ProgramManager namespace."	| aNameSpace |	aNameSpace := Smalltalk at: #SSK.	(aNameSpace isKindOf: NameSpace) ifFalse: [^nil].	^aNameSpace</body><body package="SSK-System" selector="packages">packages	"SSK.ProgramManager packages."	^self bundle allItems select: [:each | each isPackage]</body></methods><methods><class-id>SSK.ProgramManager class</class-id> <category>documents</category><body package="SSK-System" selector="doclet">doclet	"SSK.ProgramManager doclet."	| classCollection aDoclet toDirectory fromDirectory |	classCollection := self classes.	aDoclet := SSK.TextDoclet codePrint: classCollection.	fromDirectory := aDoclet				instVarAt: (aDoclet class allInstVarNames indexOf: 'toDirectory').	toDirectory := fromDirectory directory construct: 'doclet'.	toDirectory exists		ifTrue: 			[toDirectory directoryContents				do: [:each | (toDirectory construct: each) delete].			toDirectory delete].	fromDirectory renameTo: toDirectory.	JunURL browse: (toDirectory construct: 'index.html') asURI asString.	^aDoclet</body></methods><methods><class-id>SSK.ProgramManager class</class-id> <category>metrics</category><body package="SSK-System" selector="linesOfCode">linesOfCode	"SSK.ProgramManager linesOfCode inspect."	| linesOfCode aString |	linesOfCode := 0.	self classes do: 			[:aClass |			aString := SSK.TextDoclet codePrintStringOf: aClass.			linesOfCode := linesOfCode						+ (aString select: [:each | each = Character cr]) size].	^linesOfCode</body></methods><methods><class-id>SSK.ProgramManager class</class-id> <category>private</category><body package="SSK-System" selector="makeBackups:forFilename:">makeBackups: howMany forFilename: aFilename	(howMany to: 1 by: -1) do: 			[:n |			| anArray bakFilename |			anArray := Filename splitExtension: aFilename asString.			n &lt;= 1				ifTrue: [bakFilename := aFilename]				ifFalse: 					[bakFilename := (anArray first , (n - 1) printString , aFilename extension)								asFilename].			bakFilename exists				ifTrue: 					[| oldFilename |					oldFilename := (anArray first , n printString , aFilename extension)								asFilename.					bakFilename copyTo: oldFilename]]</body><body package="SSK-System" selector="writeClassInitializeOn:">writeClassInitializeOn: aFileManager	(self classes select: [:aClass | aClass class selectors includes: #initialize]) do: 			[:aClass |			| aStream |			aStream := aFileManager ensureOpen: aFileManager target.			aStream cr.			aStream cr.			aStream nextPutAll: '&lt;initialize&gt;'.			aStream				cr;				nextPutAll: '&lt;class-id&gt;';				nextPutAll: aClass shortName;				nextPutAll: '&lt;/class-id&gt;';				cr.			aStream nextPutAll: '&lt;/initialize&gt;']</body><body package="SSK-System" selector="writeTimeStampOn:">writeTimeStampOn: aFileManager	| aStream |	aStream := aFileManager ensureOpen: aFileManager target.	aStream cr.	aStream cr.	aStream nextPutAll: '&lt;do-it&gt;'.	aStream cr.	JunSourceCodeSaver writeStampOn: aStream.	aStream cr.	aStream nextPutAll: '&lt;/do-it&gt;'</body></methods><methods><class-id>SSK.ProgramManager class</class-id> <category>comments</category><body package="SSK-System" selector="commentString">commentString	"SSK.ProgramManager commentString."	^'Copyright 2008-2014 SSK (Smalltalk Studies in Kyoto). All Rights Reserved.'</body><body package="SSK-System" selector="propagateComment">propagateComment	"SSK.ProgramManager propagateComment."	| aString |	aString := self commentString.	self classes do: [:aClass | aClass comment: aString].	self bundle allItems do: [:each | each comment: aString].	self namespace comment: aString</body></methods><methods><class-id>SSK.ProgramManager class</class-id> <category>saving</category><body package="SSK-System" selector="save">save	"SSK.ProgramManager save."	| aBundle dateString timeString aDirectory aFilename aFileManager |	aBundle := self bundle.	dateString := JunCalendarModel stringFromDate select: [:each | each isDigit].	timeString := JunCalendarModel stringFromTime select: [:each | each isDigit].	[(aDirectory := JunSystem homeDirectory construct: 'Desktop') exists ifFalse: [self error: String new]]		on: self errorSignal		do: [:exception | aDirectory := Filename defaultDirectory directory].	aFilename := aDirectory construct: 'SSK_' , dateString , '_' , timeString , '.st'.	Cursor write showWhile: 			[aFileManager := SourceCodeStream write: aFilename.						[aBundle fileOutOn: aFileManager.			self writeClassInitializeOn: aFileManager.			self writeTimeStampOn: aFileManager]					ensure: [aFileManager close]]</body></methods><methods><class-id>SSK.TextDoclet class</class-id> <category>examples</category><body package="SSK-Tool" selector="example1">example1	"SSK.TextDoclet example1."	| aDirectory aDoclet |	JunUniFileModel requestDirectoryName		ifNil: [^nil]		ifNotNil: [:fileModel | aDirectory := fileModel asFilename].	aDoclet := TextDoclet dive: aDirectory pattern: '*.java'.	aDoclet generate.	^aDoclet</body><body package="SSK-Tool" selector="example2">example2	"SSK.TextDoclet example2."	| classCollection aDoclet |	classCollection := (Array with: TextDoclet with: Example with: ProgramManager)				, (Array with: Point with: Rectangle with: LineSegment).	aDoclet := TextDoclet codePrint: classCollection.	^aDoclet</body></methods><methods><class-id>SSK.TextDoclet class</class-id> <category>defaults</category><body package="SSK-Tool" selector="defaultDestinationDirectory">defaultDestinationDirectory	"SSK.TextDoclet defaultDestinationDirectory."	^JunSystem homeDirectory construct: 'Desktop'</body><body package="SSK-Tool" selector="defaultDivingLevel">defaultDivingLevel	"SSK.TextDoclet defaultDivingLevel."	^10</body><body package="SSK-Tool" selector="defaultEncoding">defaultEncoding	"SSK.TextDoclet defaultEncoding."	^#UTF_8</body><body package="SSK-Tool" selector="defaultTabStop">defaultTabStop	"SSK.TextDoclet defaultTabStop."	^4</body></methods><methods><class-id>SSK.TextDoclet class</class-id> <category>instance creation</category><body package="SSK-Tool" selector="dive:pattern:">dive: aDirectory pattern: aString	| aDoclet |	aDoclet := self new.	aDoclet		fromDirectory: aDirectory		textFiles: (JunFileModel				dive: aDirectory				level: self defaultDivingLevel				pattern: aString)		toDirectory: (self defaultDestinationDirectory				construct: aDirectory tail , '_' , (JunCalendarModel stringFromDateAndTime select: [:each | each isDigit])).	^aDoclet</body></methods><methods><class-id>SSK.TextDoclet class</class-id> <category>utilities</category><body package="SSK-Tool" selector="codePrint:">codePrint: classCollection	"SSK.TextDoclet codePrint: (SSK.ProgramManager classes)."	| aString aDirectory aCollection aDoclet |	aString := String new.	classCollection do: [:aClass | aString := aString , aClass name] separatedBy: [aString := aString , '_'].	aString size &gt; 50 ifTrue: [aString := aString copyFrom: 1 to: 50].	JunControlUtility		assert: 			[[(aDirectory := aString asFilename) exists] whileTrue: [aString := aString , '_'].			aDirectory makeDirectory.			aCollection := OrderedCollection new]		do: 			[classCollection do: 					[:aClass |					| aFilename |					aString := aClass fullName collect: [:aCharacter | aCharacter = $. ifTrue: [$_] ifFalse: [aCharacter]].					aFilename := aDirectory construct: aString , '.st'.					aCollection add: aFilename.					JunControlUtility						assert: [(aFilename withEncoding: self defaultEncoding) writeStream]						do: [:aStream | TextDoclet codePrintStringOf: aClass on: aStream]						ensure: [:aStream | aStream close]].			aDoclet := TextDoclet dive: aDirectory pattern: '*.st'.			aDoclet generate]		ensure: 			[aCollection do: [:aFilename | aFilename delete].			aDirectory delete].	^aDoclet</body><body package="SSK-Tool" selector="codePrintStringOf:">codePrintStringOf: theClass	"SSK.TextDoclet codePrintStringOf: SSK.TextDoclet."	| aString |	JunControlUtility		assert: [(String new: 1024) writeStream]		do: 			[:aStream |			self codePrintStringOf: theClass on: aStream.			aString := aStream contents]		ensure: [:aStream | (aStream respondsTo: #close) ifTrue: [aStream close]].	^aString</body><body package="SSK-Tool" selector="codePrintStringOf:on:">codePrintStringOf: theClass on: theStream	"SSK.TextDoclet codePrintStringOf: SSK.TextDoclet on: (Transcript clear; yourself)."	| aBlock aString |	aBlock :=			[:aClass :aStream |			| anOrganization aBoolean |			80 timesRepeat: [aStream nextPutAll: '='].			2 timesRepeat: [aStream cr].			aStream nextPutAll: aClass definition.			2 timesRepeat: [aStream cr].			anOrganization := aClass organization.			aBoolean := true.			aClass selectors asSortedCollection do: 					[:aSelector |					| aCode |					aBoolean						ifTrue: 							[80 timesRepeat: [aStream nextPutAll: '='].							2 timesRepeat: [aStream cr].							aBoolean := false]						ifFalse: 							[60 timesRepeat: [aStream nextPutAll: '-'].							2 timesRepeat: [aStream cr]].					aStream						nextPutAll: aClass fullName;						nextPutAll: ' method for ';						nextPutAll: (anOrganization categoryOfElement: aSelector) asString printString.					2 timesRepeat: [aStream cr].					aCode := aClass sourceMethodAt: aSelector.					aStream nextPutAll: aCode.					2 timesRepeat: [aStream cr]]].	JunControlUtility		assert: [(String new: 1024) writeStream]		do: 			[:aStream |			| aClass |			aClass := theClass isMeta ifTrue: [theClass soleInstance] ifFalse: [theClass yourself].			aBlock value: aClass value: aStream.			aBlock value: aClass class value: aStream.			80 timesRepeat: [aStream nextPutAll: '='].			aStream cr.			aString := aStream contents]		ensure: [:aStream | (aStream respondsTo: #close) ifTrue: [aStream close]].	theStream nextPutAll: aString.	^aString</body></methods><methods><class-id>SSK.Example class</class-id> <category>examples</category><body package="SSK-Example" selector="example1">example1	"SSK.Example example1."</body></methods><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><methods><class-id>Core.Point</class-id> <category>converting</category><body package="Graphics-Geometry" selector=",">, aNumber 	^Jun3dPoint		x: self x		y: self y		z: aNumber</body></methods><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><methods><class-id>Core.Number</class-id> <category>converting</category><body package="Magnitude-Numbers" selector=",">, aNumber 	^Jun2dPoint		x: self		y: aNumber</body><body package="Magnitude-Numbers" selector="asDegrees">asDegrees 	^JunAngle degrees: self</body><body package="Magnitude-Numbers" selector="asRadians">asRadians 	^JunAngle radians: self</body></methods><class><name>Pixmap</name><environment>Graphics</environment><super>Graphics.UnmappableSurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><methods><class-id>Graphics.Pixmap</class-id> <category>accessing</category><body package="OS-Window System" selector="renderingContext">renderingContext	^JunOpenGLRenderingContext on: self</body></methods><class><name>Window</name><environment>Graphics</environment><super>Graphics.DisplaySurface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inputOrigin creationOrigin sensor iconic windowType effectiveWindowType statusLineHeight allowsStatusLine mapped eventHandlers windowManager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><methods><class-id>Graphics.Window</class-id> <category>accessing</category><body package="OS-Window System" selector="renderingContext">renderingContext	^JunOpenGLRenderingContext on: self</body></methods><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="UIBuilder-Support" selector="columnedListView:into:">columnedListView: spec into: builder 	| lv model menu performer dropSourceCallbacks |	model := spec modelInBuilder: builder.	lv := (spec multipleSelections				ifTrue: [self columnedMultiSelectionListViewClass]				ifFalse: [self columnedListViewClass]) new.	lv model: model listHolder.	spec hasHorizontalScrollBar ifTrue: [lv measureWidth: true].	lv selectionChannel: model selectionIndexHolder.	spec selectionType == #checkMark ifTrue: [lv checkedSelection].	spec multipleSelections ifTrue: [spec useModifierKeys			ifTrue: [lv controller: self compliantColumnedMultiSelectControllerClass new]			ifFalse: [lv controller: self simpleColumnedMultiSelectControllerClass new]].	(menu := spec getMenuIn: builder) == nil ifFalse: [lv controller menuHolder: menu].	(performer := spec getPerformerIn: builder) == nil ifFalse: [lv controller performer: performer].	self setStyleOf: lv to: spec style.	self		setDispatcherOf: lv		fromSpec: spec		builder: builder.	spec tabable		ifTrue: 			[lv widgetState isTabStop: true.			builder sendKeyboardTo: lv]		ifFalse: 			[lv widgetState canTakeFocus: true.			lv controller keyboardProcessor: builder keyboardProcessor].	lv widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [lv widgetState isVisible: spec initiallyVisible].	dropSourceCallbacks := spec dropSourceCallbacksOrNilInBuilder: builder.	dropSourceCallbacks == nil		ifFalse: 			[lv controller dragDropCallbacks: dropSourceCallbacks.			lv controller selectOnDownWithDrag: spec selectOnDownIfDragEnabled].	builder component: lv.	self manufactureGeneralWrapperFor: spec into: builder.	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="UIBuilder-Support" selector="columnedListViewClass">columnedListViewClass	^JunColumnedListView</body><body package="UIBuilder-Support" selector="columnedMultiSelectionListViewClass">columnedMultiSelectionListViewClass	^JunColumnedListMultiSelectionView</body><body package="UIBuilder-Support" selector="compliantColumnedMultiSelectControllerClass">compliantColumnedMultiSelectControllerClass	^JunColumnedListEmulatedController</body></methods><class><name>JunWglInterface</name><environment>Jun</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Jun.JunWglInterfaceDictionary.*			</imports><category>Jun-OpenGL-Support</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>opengl32.dll</item> <item>glu32.dll</item> <item>gdi32.dll</item> <item>user32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>Jun</package></attributes></class><methods><class-id>Jun.JunWglInterface</class-id> <category>procedures-wglext</category><body package="Jun" selector="wglGetProcAddressOfWglChoosePixelFormatARB:">wglGetProcAddressOfWglChoosePixelFormatARB: arg	&lt;C: PFNWGLCHOOSEPIXELFORMATARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglCreatePbufferARB:">wglGetProcAddressOfWglCreatePbufferARB: arg	&lt;C: PFNWGLCREATEPBUFFERARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglDestroyPbufferARB:">wglGetProcAddressOfWglDestroyPbufferARB: arg	&lt;C: PFNWGLDESTROYPBUFFERARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglGetExtensionsStringARB:">wglGetProcAddressOfWglGetExtensionsStringARB: arg	&lt;C: PFNWGLGETEXTENSIONSSTRINGARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglGetPbufferDCARB:">wglGetProcAddressOfWglGetPbufferDCARB: arg	&lt;C: PFNWGLGETPBUFFERDCARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglGetPixelFormatAttribfvARB:">wglGetProcAddressOfWglGetPixelFormatAttribfvARB: arg	&lt;C: PFNWGLGETPIXELFORMATATTRIBFVARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglGetPixelFormatAttribivARB:">wglGetProcAddressOfWglGetPixelFormatAttribivARB: arg	&lt;C: PFNWGLGETPIXELFORMATATTRIBIVARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglQueryPbufferARB:">wglGetProcAddressOfWglQueryPbufferARB: arg	&lt;C: PFNWGLQUERYPBUFFERARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body><body package="Jun" selector="wglGetProcAddressOfWglReleasePbufferDCARB:">wglGetProcAddressOfWglReleasePbufferDCARB: arg	&lt;C: PFNWGLRELEASEPBUFFERDCARBPROC  __stdcall  wglGetProcAddress(LPCSTR)&gt;	^self externalAccessFailed</body></methods><class><name>ProgramManager</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>KSU-System</category><attributes><package>KSU-System</package></attributes></class><comment><class-id>KSU.ProgramManager</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>Example</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><comment><class-id>KSU.Example</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>TextDoclet</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fromDirectory textFiles toDirectory htmlFiles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Tool</package></attributes></class><comment><class-id>KSU.TextDoclet</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.TextDoclet</class-id> <category>generating</category><body package="KSU-Tool" selector="genarateHTMLs">genarateHTMLs	| aCollection theLength aString aLength aFilename |	aCollection := OrderedCollection new.	theLength := fromDirectory asString size.	textFiles do: 			[:each |			aString := each copyFrom: theLength + 2 to: each size.			aLength := aString asFilename extension size.			aString := aString copyFrom: 1 to: aString size - aLength.			aString := aString , '.html'.			aCollection add: aString.			Transcript				cr;				show: aString.			aFilename := toDirectory construct: aString.			self convert: each asFilename to: aFilename].	htmlFiles := aCollection asArray</body><body package="KSU-Tool" selector="genarateIndexHTML">genarateIndexHTML	| aCollection aFilename |	aCollection := OrderedCollection new.	htmlFiles do: 			[:each |			| pathCollection targetString |			pathCollection := each asFilename components asArray.			pathCollection := pathCollection copyFrom: 1 to: pathCollection size - 1.			targetString := (Filename splitExtension: each asFilename tail) first.			aCollection add: each -&gt; (Array with: pathCollection with: targetString)].	JunControlUtility		assert: 			[aFilename := toDirectory construct: 'index.html'.			(aFilename withEncoding: self class defaultEncoding) writeStream]		do: 			[:aStream |			aStream nextPutAll: (self headerString: 'Index').			aCollection with: (1 to: aCollection size)				do: 					[:each :no |					| aString theString |					aString := no printString.					aCollection size printString size - aString size timesRepeat: [aString := ' ' , aString].					aStream nextPutAll: '&lt;a name="line.'.					aStream nextPutAll: no printString.					aStream nextPutAll: '"&gt;'.					aStream nextPutAll: aString.					aStream nextPutAll: '&lt;/a&gt;: '.					theString := String new.					each value first do: 							[:it |							aString := JunStringUtility htmlCanonicalString: it , '.'.							aStream nextPutAll: aString.							theString := theString , aString].					aStream nextPutAll: '&lt;a name="'.					aStream nextPutAll: theString , each value last.					aStream nextPutAll: '" href="'.					aStream nextPutAll: each key.					aStream nextPutAll: '"&gt;'.					aString := JunStringUtility htmlCanonicalString: each value last.					aStream nextPutAll: aString.					aStream nextPutAll: '&lt;/a&gt;'.					aStream cr].			aStream nextPutAll: self footerString.			Transcript				cr;				nextPutAll: '(JunURL browse: ';				nextPutAll: aFilename asURI asString printString;				nextPutAll: ')';				flush]		ensure: [:aStream | aStream close]</body><body package="KSU-Tool" selector="generate">generate	Transcript		cr;		cr;		cr;		show: self class name , ' on ' , JunCalendarModel stringFromDate , ' at '					, JunCalendarModel stringFromTime.	self generateDirectories.	self genarateHTMLs.	self genarateIndexHTML</body><body package="KSU-Tool" selector="generateDirectories">generateDirectories	| aLength aString aFilename aDirectory |	self generateDirectory: toDirectory.	aLength := fromDirectory asString size.	textFiles do: 			[:each |			aString := each copyFrom: aLength + 2 to: each size.			aFilename := toDirectory construct: aString.			aDirectory := aFilename head asFilename.			self generateDirectory: aDirectory]</body><body package="KSU-Tool" selector="generateDirectory:">generateDirectory: targetDirectory	| aCollection aDirectory aString |	aCollection := OrderedCollection new.	aDirectory := targetDirectory.	aString := aDirectory asString.	[aString ~= aDirectory head] whileTrue: 			[aCollection addFirst: aDirectory.			aDirectory := (aString := aDirectory head) asFilename].	aCollection do: [:each | each exists ifFalse: [each makeDirectory]]</body></methods><methods><class-id>KSU.TextDoclet</class-id> <category>converting</category><body package="KSU-Tool" selector="convert:to:">convert: sourceFilename to: destinationFilename	| fromStream aCollection aString toStream aStream |	JunControlUtility		assert: 			[fromStream := (sourceFilename withEncoding: self class defaultEncoding) readStream.			aCollection := OrderedCollection new]		do: 			[Cursor read showWhile: 					[[fromStream atEnd not] whileTrue: 							[aString := JunStringUtility getLine: fromStream.							aCollection add: aString]]]		ensure: [fromStream close].	JunControlUtility		assert: [toStream := (destinationFilename withEncoding: self class defaultEncoding) writeStream]		do: 			[Cursor write showWhile: 					[toStream nextPutAll: (self headerString: (Filename splitExtension: destinationFilename tail) first).					aCollection with: (1 to: aCollection size)						do: 							[:each :no |							aString := no printString.							aCollection size printString size - aString size timesRepeat: [aString := ' ' , aString].							toStream nextPutAll: '&lt;a name="line.'.							toStream nextPutAll: no printString.							toStream nextPutAll: '"&gt;'.							toStream nextPutAll: aString.							toStream nextPutAll: '&lt;/a&gt;: '.							aString := JunStringUtility htmlCanonicalString: each.							aStream := String new writeStream.							aString do: 									[:aCharacter |									aCharacter = Character tab										ifTrue: [self class defaultTabStop timesRepeat: [aStream nextPut: Character space]]										ifFalse: [aStream nextPut: aCharacter]].							aString := aStream contents.							toStream nextPutAll: aString].					toStream nextPutAll: self footerString]]		ensure: [toStream close]</body><body package="KSU-Tool" selector="footerString">footerString	^'&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;This document was generated by '		, self class fullName		, ' on ' , JunCalendarModel stringFromDate		, ' at ' , JunCalendarModel stringFromTime		, '.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="KSU-Tool" selector="headerString:">headerString: titleString	^'&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html lang="ja"&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&lt;meta http-equiv="Content-Style-Type" content="text/css"&gt;&lt;link rev="made" href="http://www.cc.kyoto-su.ac.jp/~atsushi/"&gt;&lt;link rel="index" href="index.html"&gt;&lt;style type="text/css"&gt;&lt;!--body {     background-color : #ffffff;     margin : 20px;     padding : 10px;     font-family : serif;     font-size : 10pt;}--&gt;&lt;/style&gt;&lt;title&gt;'		, titleString , '&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;'</body></methods><methods><class-id>KSU.TextDoclet</class-id> <category>private</category><body package="KSU-Tool" selector="fromDirectory:textFiles:toDirectory:">fromDirectory: sourceDirectory textFiles: fileCollection toDirectory: destinationDirectory	fromDirectory := sourceDirectory.	textFiles := fileCollection.	toDirectory := destinationDirectory</body></methods><class><name>ProgramManager</name><environment>SSK</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SSK-System</category><attributes><package>SSK-System</package></attributes></class><comment><class-id>SSK.ProgramManager</class-id><body>Copyright 2008-2014 SSK (Smalltalk Studies in Kyoto). All Rights Reserved.</body></comment><class><name>TextDoclet</name><environment>SSK</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fromDirectory textFiles toDirectory htmlFiles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SSK-Tool</package></attributes></class><comment><class-id>SSK.TextDoclet</class-id><body>Copyright 2008-2014 SSK (Smalltalk Studies in Kyoto). All Rights Reserved.</body></comment><methods><class-id>SSK.TextDoclet</class-id> <category>generating</category><body package="SSK-Tool" selector="genarateHTMLs">genarateHTMLs	| aCollection theLength aString aLength aFilename |	aCollection := OrderedCollection new.	theLength := fromDirectory asString size.	textFiles do: 			[:each |			aString := each copyFrom: theLength + 2 to: each size.			aLength := aString asFilename extension size.			aString := aString copyFrom: 1 to: aString size - aLength.			aString := aString , '.html'.			aCollection add: aString.			Transcript				cr;				show: aString.			aFilename := toDirectory construct: aString.			self convert: each asFilename to: aFilename].	htmlFiles := aCollection asArray</body><body package="SSK-Tool" selector="genarateIndexHTML">genarateIndexHTML	| aCollection aFilename |	aCollection := OrderedCollection new.	htmlFiles do: 			[:each |			| pathCollection targetString |			pathCollection := each asFilename components asArray.			pathCollection := pathCollection copyFrom: 1 to: pathCollection size - 1.			targetString := (Filename splitExtension: each asFilename tail) first.			aCollection add: each -&gt; (Array with: pathCollection with: targetString)].	JunControlUtility		assert: 			[aFilename := toDirectory construct: 'index.html'.			(aFilename withEncoding: self class defaultEncoding) writeStream]		do: 			[:aStream |			aStream nextPutAll: (self headerString: 'Index').			aCollection with: (1 to: aCollection size)				do: 					[:each :no |					| aString theString |					aString := no printString.					aCollection size printString size - aString size timesRepeat: [aString := ' ' , aString].					aStream nextPutAll: '&lt;a name="line.'.					aStream nextPutAll: no printString.					aStream nextPutAll: '"&gt;'.					aStream nextPutAll: aString.					aStream nextPutAll: '&lt;/a&gt;: '.					theString := String new.					each value first do: 							[:it |							aString := JunStringUtility htmlCanonicalString: it , '.'.							aStream nextPutAll: aString.							theString := theString , aString].					aStream nextPutAll: '&lt;a name="'.					aStream nextPutAll: theString , each value last.					aStream nextPutAll: '" href="'.					aStream nextPutAll: each key.					aStream nextPutAll: '"&gt;'.					aString := JunStringUtility htmlCanonicalString: each value last.					aStream nextPutAll: aString.					aStream nextPutAll: '&lt;/a&gt;'.					aStream cr].			aStream nextPutAll: self footerString.			Transcript				cr;				nextPutAll: '(JunURL browse: ';				nextPutAll: aFilename asURI asString printString;				nextPutAll: ')';				flush]		ensure: [:aStream | aStream close]</body><body package="SSK-Tool" selector="generate">generate	Transcript		cr;		cr;		cr;		show: self class name , ' on ' , JunCalendarModel stringFromDate , ' at '					, JunCalendarModel stringFromTime.	self generateDirectories.	self genarateHTMLs.	self genarateIndexHTML</body><body package="SSK-Tool" selector="generateDirectories">generateDirectories	| aLength aString aFilename aDirectory |	self generateDirectory: toDirectory.	aLength := fromDirectory asString size.	textFiles do: 			[:each |			aString := each copyFrom: aLength + 2 to: each size.			aFilename := toDirectory construct: aString.			aDirectory := aFilename head asFilename.			self generateDirectory: aDirectory]</body><body package="SSK-Tool" selector="generateDirectory:">generateDirectory: targetDirectory	| aCollection aDirectory aString |	aCollection := OrderedCollection new.	aDirectory := targetDirectory.	aString := aDirectory asString.	[aString ~= aDirectory head] whileTrue: 			[aCollection addFirst: aDirectory.			aDirectory := (aString := aDirectory head) asFilename].	aCollection do: [:each | each exists ifFalse: [each makeDirectory]]</body></methods><methods><class-id>SSK.TextDoclet</class-id> <category>converting</category><body package="SSK-Tool" selector="convert:to:">convert: sourceFilename to: destinationFilename	| fromStream aCollection aString toStream aStream |	JunControlUtility		assert: 			[fromStream := (sourceFilename withEncoding: self class defaultEncoding) readStream.			aCollection := OrderedCollection new]		do: 			[Cursor read showWhile: 					[[fromStream atEnd not] whileTrue: 							[aString := JunStringUtility getLine: fromStream.							aCollection add: aString]]]		ensure: [fromStream close].	JunControlUtility		assert: [toStream := (destinationFilename withEncoding: self class defaultEncoding) writeStream]		do: 			[Cursor write showWhile: 					[toStream nextPutAll: (self headerString: (Filename splitExtension: destinationFilename tail) first).					aCollection with: (1 to: aCollection size)						do: 							[:each :no |							aString := no printString.							aCollection size printString size - aString size timesRepeat: [aString := ' ' , aString].							toStream nextPutAll: '&lt;a name="line.'.							toStream nextPutAll: no printString.							toStream nextPutAll: '"&gt;'.							toStream nextPutAll: aString.							toStream nextPutAll: '&lt;/a&gt;: '.							aString := JunStringUtility htmlCanonicalString: each.							aStream := String new writeStream.							aString do: 									[:aCharacter |									aCharacter = Character tab										ifTrue: [self class defaultTabStop timesRepeat: [aStream nextPut: Character space]]										ifFalse: [aStream nextPut: aCharacter]].							aString := aStream contents.							toStream nextPutAll: aString].					toStream nextPutAll: self footerString]]		ensure: [toStream close]</body><body package="SSK-Tool" selector="footerString">footerString	^'&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;This document was generated by '		, self class fullName		, ' on ' , JunCalendarModel stringFromDate		, ' at ' , JunCalendarModel stringFromTime		, '.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'</body><body package="SSK-Tool" selector="headerString:">headerString: titleString	^'&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html lang="ja"&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&lt;meta http-equiv="Content-Style-Type" content="text/css"&gt;&lt;link rev="made" href="http://www.cc.kyoto-su.ac.jp/~atsushi/"&gt;&lt;link rel="index" href="index.html"&gt;&lt;style type="text/css"&gt;&lt;!--body {     background-color : #ffffff;     margin : 20px;     padding : 10px;     font-family : serif;     font-size : 10pt;}--&gt;&lt;/style&gt;&lt;title&gt;'		, titleString , '&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;'</body></methods><methods><class-id>SSK.TextDoclet</class-id> <category>private</category><body package="SSK-Tool" selector="fromDirectory:textFiles:toDirectory:">fromDirectory: sourceDirectory textFiles: fileCollection toDirectory: destinationDirectory	fromDirectory := sourceDirectory.	textFiles := fileCollection.	toDirectory := destinationDirectory</body></methods><class><name>Example</name><environment>SSK</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SSK-Example</package></attributes></class><comment><class-id>SSK.Example</class-id><body>Copyright 2008-2014 SSK (Smalltalk Studies in Kyoto). All Rights Reserved.</body></comment><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/aoki/Smalltalk/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im' 'November 2, 2014' '1:37:22 AM')""An image file /Users/aoki/Smalltalk/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im was created at 1:37:22 on 2014年11月2日."</do-it><do-it>JunSystemUtility printInheritancesOf: Number.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example1</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example1</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	InputState doubleClickTimeout: 100</body></methods><do-it>InputState doubleClickTimeout</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	InputState doubleClickTimeout: 100</body></methods><do-it>InputState doubleClickTimeout</do-it><do-it>KSU.Example example1.</do-it><do-it>InputState doubleClickTimeout</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	InputState doubleClickTimeout: 300</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aValue |	JunControlUtility		assert: [aValue := InputState doubleClickTimeout]		do: []		ensure: [InputState doubleClickTimeout: aValue]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBlock |	aBlock :=			[| aValue |			JunControlUtility				assert: [aValue := InputState doubleClickTimeout]				do: []				ensure: [InputState doubleClickTimeout: aValue]].	aBlock fork</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBlock |	aBlock :=			[| aValue |			JunControlUtility				assert: [aValue := InputState doubleClickTimeout]				do: [10 seconds wait]				ensure: [InputState doubleClickTimeout: aValue]].	aBlock fork</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBlock |	aBlock :=			[| aValue |			JunControlUtility				assert: [aValue := InputState doubleClickTimeout]				do: 					[InputState doubleClickTimeout: 100.					10 seconds wait]				ensure: [InputState doubleClickTimeout: aValue]].	aBlock fork</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example2</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example2</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aaa</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aaa</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cr</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cr</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>flush</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>flush</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aStream |	aStream := Transcript.	aStream nextPutAll: 'aaa'.	aStream cr.	aStream flush</body></methods><do-it>KSU.Example example2.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aStream |	JunControlUtility		assert: [aStream := Transcript]		do: 			[aStream nextPutAll: 'aaa'.			aStream cr.			aStream flush]		ensure: []</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aStream |	JunControlUtility		assert: [aStream := Transcript]		do: 			[aStream nextPutAll: 'aaa'.			aStream cr.			aStream flush]		ensure: [aStream close]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aStream |	JunControlUtility		assert: [aStream := Transcript]		do: 			[aStream nextPutAll: 'aaa'.			aStream cr.			aStream flush]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example2.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aStream |	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aStream nextPutAll: 'aaa'.			aStream cr.			aStream flush]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example2.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."	| aStream |	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aStream nextPutAll: 'aaa'.			aStream cr.			aStream flush]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."	| aStream |	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aStream nextPutAll: Number allSuperclasses printString.			aStream cr.			aStream flush]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example3.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."	| aStream |	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aStream nextPutAll: Number allSuperclasses printString.			aStream cr.			aStream nextPutAll: Number allSubclasses printString.			aStream cr.			aStream flush]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example3.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aStream</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aStream</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| targetClass aStream |	targetClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: [targetClass allSuperclasses reverse do: [:aClass | ]]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nextPutAll</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nextPutAll</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| targetClass aStream |	targetClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[targetClass allSuperclasses reverse do: 					[:aClass |					aClass allSuperclasses size timesRepeat: 							[aStream nextPutAll: '| '.aStream nextPutAll: aClass printString.							aStream cr]]]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| targetClass aStream |	targetClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[targetClass allSuperclasses reverse do: 					[:aClass |					aClass allSuperclasses size timesRepeat: 							[aStream nextPutAll: '| '.							aStream nextPutAll: aClass printString.							aStream cr]]]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| targetClass aStream |	targetClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[targetClass allSuperclasses reverse do: 					[:aClass |					aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: aClass printString.					aStream cr]]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>a</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>a</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass allSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each printString.					aStream cr].			aBlock :=					[:it |					| collection |					collection := SortedCollection new.					collection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString];						addAll: it subclasses.					collection do: 							[:each |							each allSuperclasses size timesRepeat: 									[aStream										nextPut: $|;										space].							aStream								nextPutAll: each name asString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass allSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| collection |					collection := SortedCollection new.					collection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString];						addAll: it subclasses.					collection do: 							[:each |							each allSuperclasses size timesRepeat: 									[aStream										nextPut: $|;										space].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| collection |					collection := SortedCollection new.					collection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString];						addAll: it subclasses.					collection do: 							[:each |							each allSuperclasses size timesRepeat: 									[aStream										nextPut: $|;										space].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| collection |					collection := SortedCollection new.					collection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString];						addAll: it subclasses.					collection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPut: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| collection |					collection := SortedCollection new.					collection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString];						addAll: it subclasses.					collection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection new.					aCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString];						addAll: it subclasses.					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream aBlock |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: it subclasses.					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Number.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: it subclasses.					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Object.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: it subclasses.					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Object.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream								nextPutAll: each toolListDisplayString;								cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Object.	JunControlUtility		assert: 			[aStream := Transcript.			(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream nextPutAll: each toolListDisplayString.							aStream cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="writeInheritanceOf:on:">writeInheritanceOf: aClass on: aStream	"KSU.Example writeInheritanceOf: Number on: Transcript."	JunControlUtility		assert: [(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream nextPutAll: each toolListDisplayString.							aStream cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example writeInheritanceOf: Number on: Transcript.</do-it><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Object.	aStream := Transcript.	JunControlUtility		assert: [(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream nextPutAll: each toolListDisplayString.							aStream cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Number.	aStream := Transcript.	JunControlUtility		assert: [(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream nextPutAll: each toolListDisplayString.							aStream cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Number.	aStream := Transcript.	JunControlUtility		assert: [(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass allSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream nextPutAll: each toolListDisplayString.							aStream cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aClass aStream |	aClass := Number.	aStream := Transcript.	JunControlUtility		assert: [(aStream respondsTo: #clear) ifTrue: [aStream clear]]		do: 			[| aBlock |			aClass withAllSuperclasses reverse do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection								sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].							aStream nextPutAll: each toolListDisplayString.							aStream cr.							aBlock value: each]].			aBlock value: aClass]		ensure: [(aStream respondsTo: #close) ifTrue: [aStream close]]</body></methods><do-it>XML.Text toolListDisplayString</do-it><do-it>Text toolListDisplayString</do-it><do-it>XML.Text printString</do-it><do-it>Text printString</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."	| aFilename |	aFilename := (JunSystem homeDirectory construct: 'Desktop')				construct: 'Inheritance.txt'.	KSU.Example writeInheritanceOf: Object on: aFilename writeStream</body></methods><do-it>KSU.Example example5.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."	| aFilename |	aFilename := (JunSystem homeDirectory construct: 'Desktop')				construct: 'Inheritance.txt'.	KSU.Example writeInheritanceOf: Object on: aFilename writeStream</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."	KSU.Example writeInheritanceOf: Magnitude on: Transcript</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."	KSU.Example writeInheritanceOf: Magnitude on: Transcript</body></methods><do-it>KSU.Example example5.</do-it><do-it>KSU.Example example5.</do-it><do-it>KSU.Example example6.</do-it><do-it>KSU.Example writeInheritanceOf: Number on: Transcript.</do-it><do-it>KSU.Example writeInheritanceOf: Object on: Transcript.</do-it><do-it>KSU.Example example6.</do-it><do-it>Number definition</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><do-it>KSU.InheritanceBrowser organization addCategory: #aspects</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listModel</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listModel</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	| aList |	listModel ifNil: [aList := List new].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	| aList |	listModel		ifNil: 			[aList := List new.			listModel := SelectionInList with: aList].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	| aString |	textModel		ifNil: 			[aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := List new.			listModel := SelectionInList with: aList].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList].	^listModel</body></methods><do-it>KSU.InheritanceBrowser organization addCategory: #private</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>each</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>each</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	| aList aBlock aStream |	aList := List new.	aClass withAllSuperclasses reverse do: 			[:each |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aList add: aStream contents].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aStream cr.					aBlock value: each]].	aBlock value: aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aList add: aStream contents].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aList add: aStream contents.					aBlock value: each]].	aBlock value: aClass</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self class listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aList add: aStream contents].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aList add: aStream contents.					aBlock value: each]].	aBlock value: aClass</body></methods><do-it>self new listInheritanceOf: Number.</do-it><do-it>self new listInheritanceOf: Number.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aList add: aStream contents].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aList add: aStream contents.					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><do-it>self new listInheritanceOf: Number.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 539 259 1039 759 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel compute: [:selection | ]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel compute: [:aString | ]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel				compute: [:aString | textModel value: self classDefinitionOf: aString]].	^listModel</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionOf:">classDefinitionOf: aString	^aString</body></methods><do-it>KSU.InheritanceBrowser class organization addCategory: #examples</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."KSU.InheritanceBrowser open</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	KSU.InheritanceBrowser open</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinitionOf: (listModel list at: index)]].	^listModel</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: (self classDefinitionAt: index)]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	^self listModel list at: index</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>classDefinitionOf:</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>index</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>index</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString |	aString := self listModel list at: index.	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	^aCollection printString</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dividers</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dividers</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1 ifTrue: [] ifFalse: [].	^aCollection printString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: []		ifFalse: [aClass := Smalltalk at: aCollection first asSymbol].	^aCollection printString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: []		ifFalse: [aClass := Smalltalk at: aCollection first asSymbol].	^aClass definition</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>asSymbol</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>asSymbol</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection aClass aNameSpace |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := nil]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass definition</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection aNameSpace aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := nil]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass definition</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection aNameSpace aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass definition</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Number.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: (self classDefinitionAt: index)]].	^listModel</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 539 259 1039 759 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	KSU.InheritanceBrowser open</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: (self classDefinitionAt: index)]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aCollection aNameSpace aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass definition</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aList add: aStream contents].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aList add: aStream contents.					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><do-it>KSU.InheritanceBrowser class organization addCategory: #utilities</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>utilities</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aList add: aStream contents].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aList add: aStream contents.					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><do-it>KSU.InheritanceBrowser class organization renameCategory: #utilities to: #private</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars>classTable </class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><do-it>SelectionInList with: List new</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="tableInheritanceOf:">tableInheritanceOf: aClass	"self new tableInheritanceOf: Number."	| aTable aBlock |	aTable := List new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aTable add: aStream contents -&gt; each].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aTable add: aStream contents -&gt; each.					aBlock value: each]].	aBlock value: aClass.	^aTable</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="tableInheritanceOf:">tableInheritanceOf: aClass	"self new tableInheritanceOf: Number."	| aTable aBlock |	aTable := Dictionary new.	aClass withAllSuperclasses reverse do: 			[:each |			| aStream |			aStream := String new writeStream.			each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: each toolListDisplayString.			aTable add: aStream contents -&gt; each].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					| aStream |					aStream := String new writeStream.					each allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].					aStream nextPutAll: each toolListDisplayString.					aTable add: aStream contents -&gt; each.					aBlock value: each]].	aBlock value: aClass.	^aTable</body></methods><do-it>self new tableInheritanceOf: Number.</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #selecting</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>selecting</category><body package="KSU-Example" selector="selectedClass">selectedClass</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>selectedClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>selectedClass</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>value</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>value</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ifTrue</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ifTrue</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>selecting</category><body package="KSU-Example" selector="selectedClass">selectedClass	| index |	index := self listModel selectionIndexHolder value.	index &gt; 0 ifTrue: [].	^nil</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>tableInheritanceOf:</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser</class-id> <category>selecting</category><body package="KSU-Example" selector="selectedClass">selectedClass	| index |	index := self listModel selectionIndexHolder value.	index &gt; 0 ifTrue: [^self classDefinitionAt: index].	^nil</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>selecting</category><body package="KSU-Example" selector="selectedClassDefinition">selectedClassDefinition	| index |	index := self listModel selectionIndexHolder value.	index &gt; 0 ifTrue: [^self classDefinitionAt: index].	^nil</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>selectedClass</selector></remove-selector><do-it>KSU.InheritanceBrowser organization addCategory: #private</do-it><do-it>KSU.InheritanceBrowser classifySymbol: #selectedClassDefinition under: #private</do-it><do-it>KSU.InheritanceBrowser organization removeCategory: #selecting</do-it><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>selectedClassDefinition</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index		[| aString aCollection aNameSpace aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass definition]			ensure: [^String new]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index		| aString |	[| aCollection aNameSpace aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	aString := aClass definition]			ensure: [aString := String new].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString |		[| aCollection aNameSpace aClass |	aString := self listModel list at: index.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	aString := aClass definition]			ensure: [aString := String new].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aBlock |	aBlock :=			[| aCollection aNameSpace aClass |			aString := self listModel list at: index.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol.			aString := aClass definition].	aBlock ensure: [aString := String new].	^aString</body></methods><remove-selector><class-id>KSU.InheritanceBrowser class</class-id> <selector>listInheritanceOf:</selector></remove-selector><do-it>KSU.InheritanceBrowser class organization removeCategory: #private</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="toolListDisplayStringOf:">toolListDisplayStringOf: aClass	| aStream |	aStream := String new writeStream.	aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].	aStream nextPutAll: aClass toolListDisplayString.	^aStream contents</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse		do: [:each | aList add: (self toolListDisplayStringOf: each)].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection						sortBlock: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					aList add: (self toolListDisplayStringOf: each).					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><do-it>self new listInheritanceOf: Number.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse		do: [:each | aList add: (self toolListDisplayStringOf: each)].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection sortBlock: 							[:a :b |							(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					aList add: (self toolListDisplayStringOf: each).					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><do-it>self new listInheritanceOf: Number.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aBlock |	aBlock :=			[| aCollection aNameSpace aClass |			aString := self listModel list at: index.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol.			aString := aClass definition].	aBlock on: self errorSignal do: [:exception | aString := String new].	^aString</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 470 200 970 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser class organization addCategory: #resources</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listMenu</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listMenu</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	^nil</body></methods><do-it>KSU.InheritanceBrowser organization addCategory: #'menu accessing'</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu accessing</category><body package="KSU-Example" selector="listMenu">listMenu	^self class listMenu</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 200 969 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu accessing</category><body package="KSU-Example" selector="listMenu">listMenu	^self halt</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu accessing</category><body package="KSU-Example" selector="listMenu">listMenu	^self class listMenu</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	^self halt</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 470 200 970 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	^Menu new</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	^Menu new</body></methods><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 539 259 1039 759 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	KSU.InheritanceBrowser open</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: (self classDefinitionAt: index)]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aBlock |	aBlock :=			[| aCollection aNameSpace aClass |			aString := self listModel list at: index.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol.			aString := aClass definition].	aBlock on: self errorSignal do: [:exception | aString := String new].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse		do: [:each | aList add: (self toolListDisplayStringOf: each)].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection sortBlock: 							[:a :b |							(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					aList add: (self toolListDisplayStringOf: each).					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="toolListDisplayStringOf:">toolListDisplayStringOf: aClass	| aStream |	aStream := String new writeStream.	aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].	aStream nextPutAll: aClass toolListDisplayString.	^aStream contents</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>listMenu</selector></remove-selector><do-it>KSU.InheritanceBrowser organization removeCategory: #'menu accessing'</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 200 969 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'zzz' 				#value: #zzz ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Find Class...' 				#value: #findClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser organization addCategory: #'menu messages'</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog theClass |	aCollection := 			[| aList |			aList := List new.			self allClassesDo: [:aClass | aList add: aClass].			aList yourself]					value asSortedCollection: 						[:classA :classB |						| nameA nameB |						(nameA := classA name) = (nameB := classB name)							ifTrue: [classA toolListDisplayString &lt; classB toolListDisplayString]							ifFalse: [nameA &lt; nameB]].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:aClass | aPattern , '*' match: (aClass perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	theClass := aDialog select ifNil: [^nil].	^theClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog theClass |	aCollection := 			Smalltalk allClasses asSortedCollection: 						[:classA :classB |						| nameA nameB |						(nameA := classA name) = (nameB := classB name)							ifTrue: [classA toolListDisplayString &lt; classB toolListDisplayString]							ifFalse: [nameA &lt; nameB]].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:aClass | aPattern , '*' match: (aClass perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	theClass := aDialog select ifNil: [^nil].	^theClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>theClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>theClass</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog theClass aString theIndex |	aCollection := 			Smalltalk allClasses asSortedCollection: 						[:classA :classB |						| nameA nameB |						(nameA := classA name) = (nameB := classB name)							ifTrue: [classA toolListDisplayString &lt; classB toolListDisplayString]							ifFalse: [nameA &lt; nameB]].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:aClass | aPattern , '*' match: (aClass perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	theClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: theClass.	theIndex := self listModel list indexOf: aString.	Transcript cr; show: theIndex printString.	^theClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog theClass aString theIndex |	aCollection := 			Smalltalk allClasses asSortedCollection: 						[:classA :classB |						| nameA nameB |						(nameA := classA name) = (nameB := classB name)							ifTrue: [classA toolListDisplayString &lt; classB toolListDisplayString]							ifFalse: [nameA &lt; nameB]].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:aClass | aPattern , '*' match: (aClass perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	theClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: theClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^theClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog theClass aString theIndex |	aCollection := Smalltalk allClasses asSortedCollection: 					[:classA :classB |					classA toolListDisplayString &lt; classB toolListDisplayString].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:aClass | aPattern , '*' match: (aClass perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	theClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: theClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^theClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog theClass aString theIndex |	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:aClass | aPattern , '*' match: (aClass perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	theClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: theClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^theClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog aClass aString theIndex |	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^aClass</body></methods><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 200 969 700 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	KSU.InheritanceBrowser open</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Find Class...' 				#value: #findClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: (self classDefinitionAt: index)]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinitionAt:">classDefinitionAt: index	| aString aBlock |	aBlock :=			[| aCollection aNameSpace aClass |			aString := self listModel list at: index.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol.			aString := aClass definition].	aBlock on: self errorSignal do: [:exception | aString := String new].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	aList := List new.	aClass withAllSuperclasses reverse		do: [:each | aList add: (self toolListDisplayStringOf: each)].	aBlock :=			[:it |			| aCollection |			aCollection := SortedCollection sortBlock: 							[:a :b |							(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)].			aCollection addAll: (it subclasses select: [:c | c isMeta not]).			aCollection do: 					[:each |					aList add: (self toolListDisplayStringOf: each).					aBlock value: each]].	aBlock value: aClass.	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="toolListDisplayStringOf:">toolListDisplayStringOf: aClass	| aStream |	aStream := String new writeStream.	aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].	aStream nextPutAll: aClass toolListDisplayString.	^aStream contents</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog aClass aString theIndex |	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 470 200 970 700 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog aClass aString theIndex |	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [List new]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aCollection aSelector aBlock aDialog aClass aString theIndex |	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString].	aSelector := #toolListDisplayString.	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| aString aBlock |	aBlock :=			[| anIndex aCollection aNameSpace aClass |			anIndex := self listModel indexHolder value.			aString := self listModel list at: anIndex.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol.			aString := aClass definition].	aBlock on: self errorSignal do: [:exception | aString := String new].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| aClass aBlock |	aBlock :=			[| anIndex aString aCollection aNameSpace |			anIndex := self listModel indexHolder value.			aString := self listModel list at: anIndex.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol].	aBlock on: self errorSignal do: [:exception | aClass := nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	| aString aBlock |	aBlock := [aString := self selectedClass definition].	aBlock on: self errorSignal do: [:exception | aString := String new].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>classDefinitionAt:</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| aClass aBlock |	aBlock :=			[| anIndex aString aCollection aNameSpace |			anIndex := self listModel indexHolder value.			aString := self listModel list at: anIndex.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol. Transcript cr; show: aClass printString].	aBlock on: self errorSignal do: [:exception | aClass := nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| aClass aBlock |	aBlock :=			[| anIndex aString aCollection aNameSpace |			anIndex := self listModel indexHolder value.			aString := self listModel list at: anIndex. Transcript cr; show: aString printString.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol].	aBlock on: self errorSignal do: [:exception | aClass := nil].	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| aClass aBlock |	aBlock :=			[| anIndex aString aCollection aNameSpace |			anIndex := self listModel selectionIndexHolder value.			aString := self listModel list at: anIndex. Transcript cr; show: aString printString.			aCollection := JunStringUtility separate: aString dividers: '| {}'.			aCollection size &gt; 1				ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]				ifFalse: [aNameSpace := Smalltalk].			aClass := aNameSpace at: aCollection first asSymbol].	aBlock on: self errorSignal do: [:exception | aClass := nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'クラスを調べる...' 							#value: #browseClass ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'クラスを調べる...' 							#value: #browseClass ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'クラスを調べる...' 				#value: #browseClass ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>browseClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>browseClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	self selectedClass ifNil: [^nil] ifNotNil: [:aClass | aClass browse]</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inheritance Browser' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 470 200 970 800 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'インヘリタンスブラウザ' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 470 150 970 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'クラスを閲覧' 							#value: #browseClass ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを閲覧' 				#value: #browseClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol.	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString theIndex |	aSelector := #toolListDisplayString.	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	theIndex := self listModel list indexOf: aString.	self listModel selectionIndexHolder value: theIndex.	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>open</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>open</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1		ifTrue: [Dialog warn: 'リストの中に当該のクラスが見つかりません。\継承閲覧を開き直してください。' withCRs].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1		ifTrue: [Dialog warn: 'リストの中に当該のクラスが見つかりません。\継承閲覧（インヘリタンスブラウザ）を開き直してください。' withCRs].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><class><name>ZZZ</name><environment>KSU</environment><super>KSU.InheritanceBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.ZZZ</class-id> <category>initialize-release</category><body package="KSU-Example" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ZZZ</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ZZZ</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>KSU.ZZZ removeFromSystem</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>self window</do-it><do-it>self window label</do-it><do-it>self builder window label</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1		ifTrue: 			[Dialog warn: 'リストの中に当該のクラスが見つかりません。\' withCRs , self builder window label						, 'を開き直してください。'].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><class><name>ZZZ</name><environment>KSU</environment><super>KSU.InheritanceBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.ZZZ</class-id> <category>initialize-release</category><body package="KSU-Example" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	aCollection := Smalltalk allClasses				asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1		ifTrue: 			[Dialog warn: '継承閲覧リストの中に当該のクラスが見つかりません。\' withCRs , self builder window label						, 'を開き直してください。'].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>KSU.ZZZ removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>contents</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>contents</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>close</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>close</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="toolListDisplayStringOf:">toolListDisplayStringOf: aClass	| aStream aString |	aStream := String new writeStream.	aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].	aStream nextPutAll: aClass toolListDisplayString.	aString := aStream contents.	aStream close.	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="toolListDisplayStringOf:">toolListDisplayStringOf: aClass	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := Smalltalk allClasses						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1		ifTrue: 			[Dialog				warn: '継承閲覧リストの中に当該のクラスが見つかりません。\' withCRs , self builder window label						, 'を開き直してください。'].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1030 499 1530 1099 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.7 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #focusClass ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.7 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.7 -1 1 1 0.7 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスに注目' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスを閲覧' 							#value: #browseClass ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := self listInheritanceOf: Object.			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self toolListDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self toolListDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol ifAbsent: [^nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="toolListDisplayStringOf:">toolListDisplayStringOf: aClass	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := Smalltalk allClasses						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1		ifTrue: 			[Dialog				warn: 'リストの中に当該クラス（' , aClass name , '）が見つかりません。\' withCRs						, self builder window label , 'を開き直してください。'].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 @ 25))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="outputInheritance">outputInheritance	| aDialog aFilename aStream |	aDialog := SaveFileDialog new.	aDialog		addFileFilter: 'Text file (*.txt)' pattern: '*.txt';		addFilterForAllFiles;		fileCondition: #new;		defaultDirectory: (JunSystem homeDirectory construct: 'Desktop') asString;		defaultFilename: 'Inheritance.txt'.	(aFilename := aDialog select) ifNil: [^nil].	JunControlUtility		assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]		do: 			[self listModel list do: 					[:aString |					aStream nextPutAll: aString.					aStream cr]]		ensure: [aStream close]</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>Class rootsOfTheWorld</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self toolListDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	^self menuBar</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(2 1 1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>Class rootsOfTheWorld</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aList</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aList</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := List new.			Class rootsOfTheWorld				do: [:each | aList addAll: (self listInheritanceOf: each)].			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[| aList |			aList := List new.			(Class rootsOfTheWorld asSortedCollection: 					[:a :b |					(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)])				do: [:each | aList addAll: (self listInheritanceOf: each)].			listModel := SelectionInList with: aList.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>allClasses</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>allClasses</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="allClasses">allClasses	| aList |	aList := List new.	(Class rootsOfTheWorld asSortedCollection: 			[:a :b |			(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)])		do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	| aList |	aList := List new.	(Class rootsOfTheWorld asSortedCollection: 			[:a :b |			(self toolListDisplayStringOf: a) &lt; (self toolListDisplayStringOf: b)])		do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>allClasses</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="allClasses">allClasses	| aCollection |	aCollection := OrderedCollection new: 5000.	SystemUtils allClassesDo: [:each | aCollection add: each].	^aCollection		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString]</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>allClasses</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>toolListDisplayStringOf:</selector></remove-selector><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	JunSensorUtility shiftDown ifTrue: [^self browseClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	(JunSensorUtility shiftDown or: [JunSensorUtility altDown])		ifTrue: [^self browseClass].	^self focusClass: self selectedClass</body></methods><remove-selector><class-id>KSU.InheritanceBrowser class</class-id> <selector>textMenu</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(2 1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #focusClass ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 2 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスに注目' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスを閲覧' 							#value: #browseClass ) ) #(1 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>Point absoluteName</do-it><do-it>BindingReference parseString: Point absoluteName</do-it><do-it>BindingReference pathString: Point absoluteName</do-it><do-it>self value</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesTo:">referencesTo: aClass	| aBinding aCollector |	aBinding := BindingReference pathString: aClass absoluteName.	aCollector := MethodCollector new.	aCollector browseSelect: (aCollector referencesTo: aBinding)</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass ifNotNil: [:aClass | | aBinding aCollector |	aBinding := BindingReference pathString: aClass absoluteName.	aCollector := MethodCollector new.	aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := BindingReference pathString: aClass absoluteName.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>referencesTo:</selector></remove-selector><do-it>MethodCollector new referencesTo: Point</do-it><do-it>MethodCollector new browseSelect: (MethodCollector new referencesTo: Point)</do-it><do-it>BindingReference pathString: Point absoluteName</do-it><do-it>self value</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass ifNotNil: [:aClass | aClass browseGlobal]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass ifNotNil: [:aClass | aClass browseGlobalFrom: nil]</body></methods><do-it>Refactory.Browser.BrowserEnvironment new referencesTo: #Point</do-it><do-it>Refactory.Browser.BrowserEnvironment new referencesTo: #Point</do-it><do-it>Refactory.Browser.BrowserEnvironment new referencesTo:  Point absoluteName</do-it><do-it>Refactory.Browser.BrowserEnvironment new referencesTo:  (BindingReference pathString: Point absoluteName)</do-it><do-it>binding := BindingReference pathString: Point absoluteName.mc := MethodCollector new.mc browseSelect: (mc referencesTo: binding)</do-it><methods><class-id>Tools.SmalltalkWorkbench class</class-id> <category>browsing</category><body package="Tools-Programming" selector="browseGlobalFrom:">browseGlobalFrom: aWindowOrNil	"Browse references to a global variable . Try to track down references that go 	through the global's name as well as direct references via its binding, 	e.g. Smalltalk bindingFor: #UnixProcess"	| dialog |	dialog := IncrementalSearchDialog forSelectionWithSearch:		[:entry | self bindingReferencesMatchingPartialName: entry].	dialog		windowLabel: #BrowseReferences &lt;&lt; #labels &gt;&gt; 'Browse references to Variable';		firstLabel: #FindC &lt;&lt; #labels &gt;&gt; 'Find:';		secondLabel: #ClassesNamespacesAndVariablesC &lt;&lt; #labels &gt;&gt; 'Classes, Variables, Name Spaces:';		iconSelector: #toolListIcon;		displayStringSelector: #toolListDisplayString;		requireSelection: false;		objectToStringBlock: [:class | class name asString].	dialog select ifNotNil: [:choice |		choice binding			ifNil: [ Dialog warn: (#nobody &lt;&lt; #dialogs &gt;&gt; 'Nobody') ]			ifNotNil: [:binding || mc | self halt.				mc := MethodCollector new.				mc browseSelect: (mc referencesTo: binding) ] ]</body></methods><do-it>VariableBinding key: #Point</do-it><do-it>binding := VariableBinding key: #Point.mc := MethodCollector new.mc browseSelect: (mc referencesTo: binding)</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	| binding mc |	self selectedClass		ifNotNil: 			[:aClass |			binding := VariableBinding key: aClass name.			mc := MethodCollector new.			mc browseSelect: (mc referencesTo: binding)]</body></methods><do-it>Point absoluteName</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	| binding mc |	self selectedClass		ifNotNil: 			[:aClass |			binding := VariableBinding key: aClass name value: aClass.			mc := MethodCollector new.			mc browseSelect: (mc referencesTo: binding)]</body></methods><methods><class-id>Tools.SmalltalkWorkbench class</class-id> <category>browsing</category><body package="Tools-Programming" selector="browseGlobalFrom:">browseGlobalFrom: aWindowOrNil	"Browse references to a global variable . Try to track down references that go 	through the global's name as well as direct references via its binding, 	e.g. Smalltalk bindingFor: #UnixProcess"	| dialog |	dialog := IncrementalSearchDialog forSelectionWithSearch:		[:entry | self bindingReferencesMatchingPartialName: entry].	dialog		windowLabel: #BrowseReferences &lt;&lt; #labels &gt;&gt; 'Browse references to Variable';		firstLabel: #FindC &lt;&lt; #labels &gt;&gt; 'Find:';		secondLabel: #ClassesNamespacesAndVariablesC &lt;&lt; #labels &gt;&gt; 'Classes, Variables, Name Spaces:';		iconSelector: #toolListIcon;		displayStringSelector: #toolListDisplayString;		requireSelection: false;		objectToStringBlock: [:class | class name asString].	dialog select ifNotNil: [:choice |		choice binding			ifNil: [ Dialog warn: (#nobody &lt;&lt; #dialogs &gt;&gt; 'Nobody') ]			ifNotNil: [:binding || mc | 				mc := MethodCollector new.				mc browseSelect: (mc referencesTo: binding) ] ]</body></methods><do-it>aClass := KSU.InheritanceBrowser.VariableBinding key: aClass name value: aClass</do-it><do-it>KSU.InheritanceBrowser simpleBindingFor: #InheritanceBrowser</do-it><do-it>KSU.InheritanceBrowser simpleBindingFor: #InheritanceBrowser</do-it><do-it>SmalltalkWorkbench allSmalltalkBindingReferencesDo: [:each | Transcript cr; show: each printString]</do-it><do-it>#{OSkSocketObserver}</do-it><do-it>#{ToolListIcons}</do-it><do-it>#{Tools.SettingModel}</do-it><do-it>KSU.InheritanceBrowser</do-it><do-it>KSU.InheritanceBrowser</do-it><do-it>aClass := KSU.InheritanceBrowser.aNameSpace := aClass environment.aNameSpace fullyQualifiedReferenceOf: aClass name</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	| binding mc aNameSpace |	self selectedClass		ifNotNil: 			[:aClass |			aNameSpace := aClass environment.			binding := aNameSpace fullyQualifiedReferenceOf: aClass name.			mc := MethodCollector new.			mc browseSelect: (mc referencesTo: binding)]</body></methods><do-it>SmalltalkWorkbench promptThenBrowseCallsFrom: nil</do-it><do-it>SmalltalkWorkbench promptThenBrowseGlobalNameFrom: nil</do-it><do-it>KSU.InheritanceBrowser absoluteName</do-it><do-it>'#{' , KSU.InheritanceBrowser absoluteName , '}'</do-it><do-it>Compiler evaluate: '#{' , KSU.InheritanceBrowser absoluteName , '}'</do-it><do-it>SmalltalkWorkbench allBindingReferencesIn: Smalltalk do: [:each |	each name = #InheritanceBrowser ifTrue: [^each inspect]]</do-it><do-it>SmalltalkWorkbench allBindingReferencesIn: Smalltalk do: [:each |	each name = #InheritanceBrowser ifTrue: [each inspect]]</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	| binding mc |	self selectedClass		ifNotNil: 			[:aClass |			SmalltalkWorkbench allBindingReferencesIn: Smalltalk				do: 					[:each |					each name = #InheritanceBrowser						ifTrue: 							[binding := each.							each inspect]].			mc := MethodCollector new.			mc browseSelect: (mc referencesTo: binding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	| aBinding aCollector |	self selectedClass		ifNotNil: 			[:aClass |			aBinding := nil.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := nil.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>Tools.SmalltalkWorkbench class</class-id> <category>browsing</category><body package="Tools-Programming" selector="browseGlobalFrom:">browseGlobalFrom: aWindowOrNil	"Browse references to a global variable . Try to track down references that go 	through the global's name as well as direct references via its binding, 	e.g. Smalltalk bindingFor: #UnixProcess"	| dialog |	dialog := IncrementalSearchDialog forSelectionWithSearch:		[:entry | self bindingReferencesMatchingPartialName: entry].	dialog		windowLabel: #BrowseReferences &lt;&lt; #labels &gt;&gt; 'Browse references to Variable';		firstLabel: #FindC &lt;&lt; #labels &gt;&gt; 'Find:';		secondLabel: #ClassesNamespacesAndVariablesC &lt;&lt; #labels &gt;&gt; 'Classes, Variables, Name Spaces:';		iconSelector: #toolListIcon;		displayStringSelector: #toolListDisplayString;		requireSelection: false;		objectToStringBlock: [:class | class name asString].	dialog select ifNotNil: [:choice |		choice binding			ifNil: [ Dialog warn: (#nobody &lt;&lt; #dialogs &gt;&gt; 'Nobody') ]			ifNotNil: [:binding || mc | binding inspect.				mc := MethodCollector new.				mc browseSelect: (mc referencesTo: binding) ] ]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := VariableBinding key: aClass name value: aClass.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><do-it>VariableBinding key: #InheritanceBrowser value: KSU.InheritanceBrowser</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.^aBinding</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := VariableBinding key: aClass name value: aClass.			aBinding category: aClass category.			aBinding environment: aClass environment.			aBinding forClass.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.^aBinding</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := VariableBinding key: aClass name value: aClass.			aBinding category: aClass category.			aBinding environment: aClass environment.			aBinding forClass.			aBinding inspect.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.SmalltalkWorkbench allBindingReferencesIn: Smalltalk do: [:each | each = aBinding ifTrue: [each inspect]].^aBinding</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.SmalltalkWorkbench allBindingReferencesIn: Smalltalk do: [:each | each = aBinding ifTrue: [each inspect]].^aBinding</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.SmalltalkWorkbench allSmalltalkBindingReferencesDo: [:each | each = aBinding ifTrue: [each inspect]].^aBinding</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.SmalltalkWorkbench allSmalltalkBindingReferencesDo: [:each | (each isKindOf: VariableBinding) ifTrue: [Transcript cr; show: each printString]].^aBinding</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.SmalltalkWorkbench allSmalltalkBindingReferencesDo: [:each | (each isKindOf: VariableBinding) ifTrue: [Transcript cr; show: each printString]].^aBinding</do-it><do-it>aClass := KSU.InheritanceBrowser.aBinding := VariableBinding key: aClass name value: aClass.aBinding category: aClass category.aBinding environment: aClass environment.aBinding forClass.SmalltalkWorkbench allSmalltalkBindingReferencesDo: [:each | (each isKindOf: VariableBinding) ifTrue: [Transcript cr; show: each printString]].^aBinding</do-it><do-it>#{KSU.InheritanceBrowser} binding</do-it><do-it>#{KSU.InheritanceBrowser} binding</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><do-it>#{KSU.InheritanceBrowser}</do-it><do-it>KSU.InheritanceBrowser simpleReference</do-it><do-it>KSU.InheritanceBrowser simpleReference binding</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass simpleReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><do-it>KSU.InheritanceBrowser fullyQualifiedReference binding</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスに注目' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスを閲覧' 							#value: #browseClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスへの参照を閲覧' 							#value: #referencesToClass ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #focusClass ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスに注目' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスを閲覧' 							#value: #browseClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスへの参照を閲覧' 							#value: #referencesToClass ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol ifAbsent: [^nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 @ 25))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="outputInheritance">outputInheritance	| aDialog aFilename aStream |	aDialog := SaveFileDialog new.	aDialog		addFileFilter: 'Text file (*.txt)' pattern: '*.txt';		addFilterForAllFiles;		fileCondition: #new;		defaultDirectory: (JunSystem homeDirectory construct: 'Desktop') asString;		defaultFilename: 'Inheritance.txt'.	(aFilename := aDialog select) ifNil: [^nil].	JunControlUtility		assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]		do: 			[self listModel list do: 					[:aString |					aStream nextPutAll: aString.					aStream cr]]		ensure: [aStream close]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #focusClass ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスに注目' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスを閲覧' 							#value: #browseClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスへの参照を閲覧' 							#value: #referencesToClass ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスに注目' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスを閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol ifAbsent: [^nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 @ 25))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="outputInheritance">outputInheritance	| aDialog aFilename aStream |	aDialog := SaveFileDialog new.	aDialog		addFileFilter: 'Text file (*.txt)' pattern: '*.txt';		addFilterForAllFiles;		fileCondition: #new;		defaultDirectory: (JunSystem homeDirectory construct: 'Desktop') asString;		defaultFilename: 'Inheritance.txt'.	(aFilename := aDialog select) ifNil: [^nil].	JunControlUtility		assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]		do: 			[self listModel list do: 					[:aString |					aStream nextPutAll: aString.					aStream cr]]		ensure: [aStream close]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスの継承だけ' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスの詳細を閲覧' 							#value: #browseClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスへの参照を閲覧' 							#value: #referencesToClass ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの継承だけ' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの詳細を閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの継承だけ' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの詳細を閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>textModel</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>textModel</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	"テキストモデル（下部のサブウィンドウを形成しているMVCのM）を応答する。"	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	"テキストモデル（下部のサブウィンドウを形成しているMVCのM）を応答する。"	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	"リストモデル（上部ペインのモデル：継承を字下げで階層表示しているMVCのM）を応答する。"	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	"リストモデル（上部ペインのモデル：継承を字下げで階層表示しているＭＶＣのＭ）を応答する。"	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	"テキストモデル（下部ペインのモデル：クラス定義を表示しているＭＶＣのＭ）を応答する。"	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	"リストモデル（上部ペインのモデル：継承を字下げでクラス階層を表示しているＭＶＣのＭ）を応答する。"	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>classDefinition</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>classDefinition</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	"現在選択されているクラスの定義（文字列）を応答する。"	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラス文字列）を応答する。"	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	"たとえば「| | | | | Text」や「| | Text in {XML}」のように。"	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	""	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><do-it>self new listInheritanceOf: Number.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listOfAllClasses</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listOfAllClasses</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	"Smalltalkの中に含まれている全クラスをリスト（順序のある集まり）にして応答する。"	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"self new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	"Smalltalkの中に含まれている全クラス群をリスト（順序のある集まり）にして応答する。"	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	"現在選択されているクラス（上部ペインで選択表示されて、下部ペインに定義が表示されているクラス）を応答する。"	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol ifAbsent: [^nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"Ksu.InheritanceBrowser new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><do-it>KSU.InheritanceBrowser new listInheritanceOf: Number.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><do-it>KSU.InheritanceBrowser new listInheritanceOf: Number.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	"たとえば「| | | | | Text」や「| | Text in {XML}」のように。"	"以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listDisplayStringOf: XML.Text."	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><do-it>KSU.InheritanceBrowser new listDisplayStringOf: XML.Text.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	"たとえば「| | | | | Text」や「| | Text in {XML}」のように。"	"以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listDisplayStringOf: Text."	"KSU.InheritanceBrowser new listDisplayStringOf: XML.Text."	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><do-it>KSU.InheritanceBrowser new listDisplayStringOf: Text.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>browseClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>browseClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	"現在選択されているクラスの詳細を閲覧するためにシステムブラウザを開く。"	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>findClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>findClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合には、当該クラスの継承をきちんと表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合には、当該クラスの継承をきちんと表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんと表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけにする。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけにする。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げされてリスト表示される。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけにする。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>focusClass</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>focusClass</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"ただし、シフトキーが押されている場合には、。"	"また、オルトキーが押されている場合には、。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"ただし、シフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"また、オルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>openRequest</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>openRequest</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	"新しいウィンドウを開く。"	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 @ 25))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	"新しいウィンドウ（継承閲覧：インヘリタンスブラウザ）を、縦横２５ピクセルずらしながら開く。"	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 @ 25))].	^aBrowser</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>outputInheritance</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>outputInheritance</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="outputInheritance">outputInheritance	"現在リスト表示されている内容（上部ペインの中身）を、ファイルダイアログで指定されたファイルに出力する。"	| aDialog aFilename aStream |	aDialog := SaveFileDialog new.	aDialog		addFileFilter: 'Text file (*.txt)' pattern: '*.txt';		addFilterForAllFiles;		fileCondition: #new;		defaultDirectory: (JunSystem homeDirectory construct: 'Desktop') asString;		defaultFilename: 'Inheritance.txt'.	(aFilename := aDialog select) ifNil: [^nil].	JunControlUtility		assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]		do: 			[self listModel list do: 					[:aString |					aStream nextPutAll: aString.					aStream cr]]		ensure: [aStream close]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	"現在選択されているクラスへの参照を閲覧するためにメソッドブラウザを開く。"	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	"現在選択されているクラスへの参照（つまり、使い方）を閲覧するためにメソッドブラウザを開く。"	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	"現在選択されているクラスの詳細（つまり、作り方）を閲覧するためにシステムブラウザを開く。"	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><do-it>KSU.InheritanceBrowser class organization addCategory: #doclet</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>doclet</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>doclet</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>doclet</category><body package="KSU-Example" selector="doclet">doclet	"KSU.InheritanceBrowser doclet."	</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>doclet</category><body package="KSU-Example" selector="doclet">doclet	"KSU.InheritanceBrowser doclet."	| classCollection aDoclet |	classCollection := Array with: self.	aDoclet := KSU.TextDoclet codePrint: classCollection.	^aDoclet</body></methods><do-it>KSU.InheritanceBrowser doclet.</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 150 969 750 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #focusClass ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの継承だけ' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの詳細を閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスの継承だけ' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスの詳細を閲覧' 							#value: #browseClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスへの参照を閲覧' 							#value: #referencesToClass ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの継承だけ' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの詳細を閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>doclet</category><body package="KSU-Example" selector="doclet">doclet	"KSU.InheritanceBrowser doclet."	| classCollection aDoclet |	classCollection := Array with: self.	aDoclet := KSU.TextDoclet codePrint: classCollection.	^aDoclet</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	"リストモデル（上部ペインのモデル：継承を字下げでクラス階層を表示しているＭＶＣのＭ）を応答する。"	listModel		ifNil: 			[listModel := SelectionInList with: self listOfAllClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	"テキストモデル（下部ペインのモデル：クラス定義を表示しているＭＶＣのＭ）を応答する。"	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="classDefinition">classDefinition	"現在選択されているクラスの定義（文字列）を応答する。"	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	"たとえば「| | | | | Text」や「| | Text in {XML}」のように。"	"以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listDisplayStringOf: Text."	"KSU.InheritanceBrowser new listDisplayStringOf: XML.Text."	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:a :b |									(self listDisplayStringOf: a) &lt; (self listDisplayStringOf: b)].					aCollection addAll: (it subclasses select: [:c | c isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listOfAllClasses">listOfAllClasses	"Smalltalkの中に含まれている全クラス群をリスト（順序のある集まり）にして応答する。"	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="selectedClass">selectedClass	"現在選択されているクラス（上部ペインで選択表示されて、下部ペインに定義が表示されているクラス）を応答する。"	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol ifAbsent: [^nil].	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	"現在選択されているクラスの詳細（つまり、作り方）を閲覧するためにシステムブラウザを開く。"	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんと表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"ただし、シフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"また、オルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass:">focusClass: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	"新しいウィンドウ（継承閲覧：インヘリタンスブラウザ）を、縦横２５ピクセルずらしながら開く。"	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 @ 25))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="outputInheritance">outputInheritance	"現在リスト表示されている内容（上部ペインの中身）を、ファイルダイアログで指定されたファイルに出力する。"	| aDialog aFilename aStream |	aDialog := SaveFileDialog new.	aDialog		addFileFilter: 'Text file (*.txt)' pattern: '*.txt';		addFilterForAllFiles;		fileCondition: #new;		defaultDirectory: (JunSystem homeDirectory construct: 'Desktop') asString;		defaultFilename: 'Inheritance.txt'.	(aFilename := aDialog select) ifNil: [^nil].	JunControlUtility		assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]		do: 			[self listModel list do: 					[:aString |					aStream nextPutAll: aString.					aStream cr]]		ensure: [aStream close]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	"現在選択されているクラスへの参照（つまり、使い方）を閲覧するためにメソッドブラウザを開く。"	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listModel</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>listModel</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>JunMorphModel example2.</do-it><do-it>JunMorphModel example3.</do-it><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 149 969 749 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="doubleClicked">doubleClicked	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"ただし、シフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"また、オルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	^self focusClass: self selectedClass</body></methods><do-it>KSU.InheritanceBrowser organization addCategory: #private</do-it><do-it>KSU.InheritanceBrowser classifySymbol: #focusClass: under: #private</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="doubleClick">doubleClick	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"ただし、シフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"また、オルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass</body></methods><methods><class-id>UI.InputFieldView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		remove: #scrollDown;		remove: #scrollUp;		add: #doubleClick;		yourself</body></methods><methods><class-id>UI.SpinButtonView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #spinUp;		add: #spinDown;		add: #spunUp;		add: #spunDown;		add: #wrapAroundBottom;		add: #wrapAroundTop;		add: #bounceBottom;		add: #bounceTop;		add: #losingFocus;		add: #gettingFocus;		add: #tabbed;		add: #backTabbed;		add: #rightClicked;		add: #clicked;		add: #doubleClick;		add: #popupMenuCreated;		add: #popupMenuItemSelected:;		yourself</body></methods><methods><class-id>UI.SpinButtonInputBoxController</class-id> <category>event driven</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: anEvent	"Only care about red button double clicks."	anEvent redButtonPressed ifFalse: [^nil].	view upcastEvent: #triggerEvent with: #doubleClick.	^super doubleClickEvent: anEvent.</body></methods><methods><class-id>UI.ScheduledWindow class</class-id> <category>private-events</category><body package="Interface-Framework" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #activate;		add: #bounds;		add: #close;		add: #collapse;		add: #deactivate;		add: #destroy;		add: #expand;		add: #expose;		add: #move;		add: #resize;		add: #enter;		add: #exit;		add: #closing;		add: #closed;		add: #opening;		add: #mapped;		add: #unmapped;		add: #moving;		add: #gettingFocus;		add: #losingFocus;		add: #unknownEvent;		add: #mouseEnter;		add: #mouseExit;		add: #clicked;		add: #doubleClick;		add: #rightClicked;		add: #middleClicked;		add: #menuBarCreated;		add: #toolBarCreated;		yourself</body></methods><methods><class-id>UI.ScrollingView class</class-id> <category>private-events</category><body package="UIBasics-Support" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #clicked;		add: #rightClicked;		add: #doubleClick;		yourself</body></methods><methods><class-id>UI.ComboBoxView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #clicked;		add: #rightClicked;		add: #doubleClick;		add: #gettingFocus;		add: #losingFocus;		add: #tabbed;		add: #backTabbed;		add: #listExposed;		add: #listClosed;		add: #popupMenuCreated;		add: #popupMenuItemSelected:;		yourself</body></methods><methods><class-id>UI.ComboBoxInputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: anEvent 	"Only care about red button double clicks."	anEvent redButtonPressed ifFalse: [^nil].	self readOnly ifFalse: [view upcastEvent: #triggerEvent with: #doubleClick].	super doubleClickEvent: anEvent</body></methods><methods><class-id>UI.ComboBoxInputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickAt:">doubleClickAt: aPoint 	self readOnly ifFalse: [view upcastEvent: #triggerEvent with: #doubleClick].	super doubleClickAt: aPoint</body></methods><methods><class-id>UI.SequenceController</class-id> <category>event driven</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: event	"only care about red button double clicks"	event redButtonPressed ifFalse: [^nil].	view triggerEvent: #doubleClick.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^nil]].	self isDoubleClickable ifFalse: [^nil].	view numberOfElements = 0 ifTrue: [^nil].	self processDoubleClickAt: (self sensor cursorPointFor: event).	^nil</body></methods><methods><class-id>UI.SequenceController</class-id> <category>private</category><body package="UIBasics-Controllers" selector="doubleClickAt:">doubleClickAt: aPoint	"Take focus, select the element if not selected, and then do a doubleClick.	Answer is never used"	view triggerEvent: #doubleClick.	self isDoubleClickable ifFalse: [^self].	view numberOfElements = 0 ifTrue: [^self].	self sensor waitNoButton.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^self]].	(self processDoubleClickAt: aPoint) isNil ifTrue: [^self].	self class doubleClickSignal raiseRequest</body></methods><methods><class-id>UI.ApplicationStandardSystemController</class-id> <category>event driven</category><body package="UIBasics-Controllers" selector="triggerButtonClickedEvent:">triggerButtonClickedEvent: event	(event isButtonPressedEvent and: [(view handlerForMouseEvent: event) isNil]) ifTrue:		[event isDoubleClickEvent			ifTrue: [view triggerEvent: #doubleClick]			ifFalse: 				[event redButtonPressed					ifTrue: [view triggerEvent: #clicked]					ifFalse: [event yellowButtonPressed 						ifTrue: [view triggerEvent: #rightClicked]						ifFalse: [view triggerEvent: #middleClicked]]]]</body></methods><methods><class-id>UI.InputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: anEvent	"Only care about red button double clicks."	anEvent redButtonPressed ifFalse: [^nil].	view triggerEvent: #doubleClick.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^nil]].	self requestDoubleClick ifTrue: [self doubleClick].	self redButtonPressedEvent: anEvent.	^nil</body></methods><methods><class-id>UI.InputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickAt:">doubleClickAt: aPoint	"Take focus, select the element if not selected, and then do a doubleClick."	view triggerEvent: #doubleClick.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^true]].	self requestDoubleClick ifTrue: [self doubleClick].	^true</body></methods><methods><class-id>UI.TableView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #selectionChanged;		add: #scrollUp;		add: #scrollDown;		add: #scrollLeft;		add: #scrollRight;		add: #gettingFocus;		add: #losingFocus;		add: #tabbed;		add: #backTabbed;		add: #clicked;		add: #rightClicked;		add: #doubleClick;		add: #popupMenuCreated;		add: #popupMenuItemSelected:;		yourself</body></methods><methods><class-id>UI.DataSetController</class-id> <category>double-clicking</category><body package="UIBasics-Datasets" selector="doubleClickAt:">doubleClickAt: pt	"Take focus, select the element if not selected, and then do a doubleClick."	| index |	view triggerEvent: #doubleClick.	self isDoubleClickable ifFalse: [^true].	view numberOfElements = 0 ifTrue: [^true].	self sensor waitNoButton.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^true]].	index := self findElementFor: pt.	index = 0 ifTrue: [^true].	view targetIndex: index.	(view isSelected: index)		ifFalse: 			[self requestValueChange				ifTrue: 					[view useSelectionIndex: index.					self valueChange]				ifFalse: [^true]].	self requestDoubleClick ifTrue: [self doubleClick].	^true</body></methods><methods><class-id>UI.DataSetController</class-id> <category>double-clicking</category><body package="UIBasics-Datasets" selector="doubleClickEvent:">doubleClickEvent: anEvent	"Trigger and notify callbacks on the second click of a double click sequence"	anEvent redButtonPressed ifFalse: [^nil].	view triggerEvent: #doubleClick.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^nil]].	self isDoubleClickable ifFalse: [^nil].	view numberOfElements = 0 ifTrue: [^nil].	(self findElementFor: (self sensor cursorPointFor: anEvent)) = 0 ifTrue: [^nil].	self requestDoubleClick ifTrue: [self doubleClick].	^nil</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 149 969 749 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClick ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>doubleClicked</selector></remove-selector><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #actions</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #actions</do-it><do-it>KSU.InheritanceBrowser classifySymbol: #doubleClick under: #actions</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>actions</category><body package="KSU-Example" selector="doubleClicked">doubleClicked	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"ただし、シフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"また、オルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass</body></methods><methods><class-id>Jun.JunUniFileModel</class-id> <category>menu messages</category><body package="Jun" selector="doubleClicked">doubleClicked	self openDirectory isNil ifTrue: [((simpleDialog notNil and: [self selectionList selection notNil])			and: [self hasInputField not])			ifTrue: 				[simpleDialog accept value: true.				simpleDialog cancel value: false.				simpleDialog builder window controller closeAndUnschedule]]</body></methods><methods><class-id>UI.TreeController</class-id> <category>event dispatching</category><body package="UIBasics-Controllers" selector="doubleClicked">doubleClicked	super doubleClick == true	ifTrue: [self toggleExpand]</body></methods><methods><class-id>UI.Controller</class-id> <category>event dispatching</category><body package="Interface-Framework" selector="doubleClicked">doubleClicked	"The receiver has been doubleClicked on. Give any interested 	parties notification."	^self dispatcher doubleClickFor: self</body></methods><methods><class-id>UI.InputFieldView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		remove: #scrollDown;		remove: #scrollUp;		add: #doubleClicked;		yourself</body></methods><methods><class-id>UI.SpinButtonView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #spinUp;		add: #spinDown;		add: #spunUp;		add: #spunDown;		add: #wrapAroundBottom;		add: #wrapAroundTop;		add: #bounceBottom;		add: #bounceTop;		add: #losingFocus;		add: #gettingFocus;		add: #tabbed;		add: #backTabbed;		add: #rightClicked;		add: #clicked;		add: #doubleClicked;		add: #popupMenuCreated;		add: #popupMenuItemSelected:;		yourself</body></methods><methods><class-id>UI.SpinButtonInputBoxController</class-id> <category>event driven</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: anEvent	"Only care about red button double clicks."	anEvent redButtonPressed ifFalse: [^nil].	view upcastEvent: #triggerEvent with: #doubleClicked.	^super doubleClickEvent: anEvent.</body></methods><methods><class-id>UI.ScheduledWindow class</class-id> <category>private-events</category><body package="Interface-Framework" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #activate;		add: #bounds;		add: #close;		add: #collapse;		add: #deactivate;		add: #destroy;		add: #expand;		add: #expose;		add: #move;		add: #resize;		add: #enter;		add: #exit;		add: #closing;		add: #closed;		add: #opening;		add: #mapped;		add: #unmapped;		add: #moving;		add: #gettingFocus;		add: #losingFocus;		add: #unknownEvent;		add: #mouseEnter;		add: #mouseExit;		add: #clicked;		add: #doubleClicked;		add: #rightClicked;		add: #middleClicked;		add: #menuBarCreated;		add: #toolBarCreated;		yourself</body></methods><methods><class-id>UI.ScrollingView class</class-id> <category>private-events</category><body package="UIBasics-Support" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #clicked;		add: #rightClicked;		add: #doubleClicked;		yourself</body></methods><methods><class-id>UI.ComboBoxView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #clicked;		add: #rightClicked;		add: #doubleClicked;		add: #gettingFocus;		add: #losingFocus;		add: #tabbed;		add: #backTabbed;		add: #listExposed;		add: #listClosed;		add: #popupMenuCreated;		add: #popupMenuItemSelected:;		yourself</body></methods><methods><class-id>UI.ComboBoxInputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickAt:">doubleClickAt: aPoint 	self readOnly ifFalse: [view upcastEvent: #triggerEvent with: #doubleClicked].	super doubleClickAt: aPoint</body></methods><methods><class-id>UI.ComboBoxInputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: anEvent 	"Only care about red button double clicks."	anEvent redButtonPressed ifFalse: [^nil].	self readOnly ifFalse: [view upcastEvent: #triggerEvent with: #doubleClicked].	super doubleClickEvent: anEvent</body></methods><methods><class-id>UI.SequenceController</class-id> <category>event driven</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: event	"only care about red button double clicks"	event redButtonPressed ifFalse: [^nil].	view triggerEvent: #doubleClicked.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^nil]].	self isDoubleClickable ifFalse: [^nil].	view numberOfElements = 0 ifTrue: [^nil].	self processDoubleClickAt: (self sensor cursorPointFor: event).	^nil</body></methods><methods><class-id>UI.SequenceController</class-id> <category>broadcast</category><body package="UIBasics-Controllers" selector="downcastLocalEvent:with:at:from:">downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator 	"This is a message passed down the view structure to some single 	part. Answer true if we accepted the event, or false if it should be 	passed on to whatever's behind us."	aKey == #doubleClicked		ifTrue: [self doubleClickAt: aPoint.				^true].	^super downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator</body></methods><methods><class-id>UI.SequenceController</class-id> <category>private</category><body package="UIBasics-Controllers" selector="doubleClickAt:">doubleClickAt: aPoint	"Take focus, select the element if not selected, and then do a doubleClick.	Answer is never used"	view triggerEvent: #doubleClicked.	self isDoubleClickable ifFalse: [^self].	view numberOfElements = 0 ifTrue: [^self].	self sensor waitNoButton.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^self]].	(self processDoubleClickAt: aPoint) isNil ifTrue: [^self].	self class doubleClickSignal raiseRequest</body></methods><methods><class-id>UI.SequenceController</class-id> <category>private</category><body package="UIBasics-Controllers" selector="processDoubleClickAt:">processDoubleClickAt: aPoint	"Answer nil if I exited early"	| index |	index := self findElementFor: aPoint.	index = 0 ifTrue: [^nil].	view targetIndex: index.	(view isSelected: index) 		ifFalse: 			[self requestValueChange 				ifTrue: 					[view useSelectionIndex: index.					self valueChange]				ifFalse: [^nil]].	self requestDoubleClick ifTrue: [self doubleClicked].	^self</body></methods><methods><class-id>UI.TreeController</class-id> <category>event dispatching</category><body package="UIBasics-Controllers" selector="doubleClick">doubleClick	super doubleClicked == true	ifTrue: [self toggleExpand]</body></methods><methods><class-id>UI.TreeController</class-id> <category>event dispatching</category><body package="UIBasics-Controllers" selector="doubleClicked">doubleClicked	super doubleClicked == true	ifTrue: [self toggleExpand]</body></methods><methods><class-id>UI.ApplicationStandardSystemController</class-id> <category>event driven</category><body package="UIBasics-Controllers" selector="triggerButtonClickedEvent:">triggerButtonClickedEvent: event	(event isButtonPressedEvent and: [(view handlerForMouseEvent: event) isNil]) ifTrue:		[event isDoubleClickEvent			ifTrue: [view triggerEvent: #doubleClicked]			ifFalse: 				[event redButtonPressed					ifTrue: [view triggerEvent: #clicked]					ifFalse: [event yellowButtonPressed 						ifTrue: [view triggerEvent: #rightClicked]						ifFalse: [view triggerEvent: #middleClicked]]]]</body></methods><methods><class-id>UI.InputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickAt:">doubleClickAt: aPoint	"Take focus, select the element if not selected, and then do a doubleClick."	view triggerEvent: #doubleClicked.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^true]].	self requestDoubleClick ifTrue: [self doubleClicked].	^true</body></methods><methods><class-id>UI.InputBoxController</class-id> <category>doubleClicking</category><body package="UIBasics-Controllers" selector="doubleClickEvent:">doubleClickEvent: anEvent	"Only care about red button double clicks."	anEvent redButtonPressed ifFalse: [^nil].	view triggerEvent: #doubleClicked.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^nil]].	self requestDoubleClick ifTrue: [self doubleClicked].	self redButtonPressedEvent: anEvent.	^nil</body></methods><methods><class-id>UI.InputBoxController</class-id> <category>broadcast</category><body package="UIBasics-Controllers" selector="downcastLocalEvent:with:at:from:">downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator	"This is a message passed down the view structure to some single part. 	Answer true if we accepted the event, or false if it should be passed on to whatever's behind us.	Here we react to whatever an in place editor (such as for a DataSet) wants us to do when a cell is clicked"	aKey == #singleClick		ifTrue: 			[self keyboardProcessor notNil ifTrue: [self keyboardProcessor requestActivationFor: self].			^true].	aKey == #doubleClicked		ifTrue: 			[self doubleClickAt: aPoint.			^true].	^super		downcastLocalEvent: aKey		with: aParameter		at: aPoint		from: anInitiator</body></methods><methods><class-id>UI.TableView class</class-id> <category>private-events</category><body package="UIBasics-Components" selector="constructEventsTriggered">constructEventsTriggered	^super constructEventsTriggered		add: #selectionChanged;		add: #scrollUp;		add: #scrollDown;		add: #scrollLeft;		add: #scrollRight;		add: #gettingFocus;		add: #losingFocus;		add: #tabbed;		add: #backTabbed;		add: #clicked;		add: #rightClicked;		add: #doubleClicked;		add: #popupMenuCreated;		add: #popupMenuItemSelected:;		yourself</body></methods><methods><class-id>UI.WindowSensor</class-id> <category>event processing</category><body package="OS-Window System" selector="eventDoubleClick:">eventDoubleClick: anEvent	| clickPoint |	clickPoint := (anEvent at: 3) @ (anEvent at: 4).	^self addMetaInput: #doubleClicked-&gt;clickPoint</body></methods><methods><class-id>UI.DataSetController</class-id> <category>double-clicking</category><body package="UIBasics-Datasets" selector="doubleClickEvent:">doubleClickEvent: anEvent	"Trigger and notify callbacks on the second click of a double click sequence"	anEvent redButtonPressed ifFalse: [^nil].	view triggerEvent: #doubleClicked.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^nil]].	self isDoubleClickable ifFalse: [^nil].	view numberOfElements = 0 ifTrue: [^nil].	(self findElementFor: (self sensor cursorPointFor: anEvent)) = 0 ifTrue: [^nil].	self requestDoubleClick ifTrue: [self doubleClicked].	^nil</body></methods><methods><class-id>UI.DataSetController</class-id> <category>private</category><body package="UIBasics-Datasets" selector="downcastLocalEvent:with:at:from:">downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator 	"This is a message passed down the view structure to some single 	part. Answer true if we accepted the event, or false if it should be 	passed on to whatever's behind us."	aKey == #doubleClicked ifTrue: 		[self doubleClickAt: aPoint.		^true].	^super downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator</body></methods><methods><class-id>UI.DataSetController</class-id> <category>double-clicking</category><body package="UIBasics-Datasets" selector="doubleClickAt:">doubleClickAt: pt	"Take focus, select the element if not selected, and then do a doubleClick."	| index |	view triggerEvent: #doubleClicked.	self isDoubleClickable ifFalse: [^true].	view numberOfElements = 0 ifTrue: [^true].	self sensor waitNoButton.	self keyboardProcessor		ifNotNil: [:keyboardProcessor | (keyboardProcessor requestActivationFor: self) ifFalse: [^true]].	index := self findElementFor: pt.	index = 0 ifTrue: [^true].	view targetIndex: index.	(view isSelected: index)		ifFalse: 			[self requestValueChange				ifTrue: 					[view useSelectionIndex: index.					self valueChange]				ifFalse: [^true]].	self requestDoubleClick ifTrue: [self doubleClicked].	^true</body></methods><methods><class-id>Tools.IncrementalSearchDialog</class-id> <category>initialize-release</category><body package="Tools-Dialogs" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	module listModule		when: #doubleClicked evaluate: [self accept value: true].	requireSelection ifTrue:		[module listModule selectionHolder			onChangeSend: #selectionChanged			to: self.		self enableOkButton: module listModule hasSelection]</body></methods><methods><class-id>Tools.ItemSelectionModule</class-id> <category>notifications</category><body package="Tools-Modules" selector="listDoubleClicked">listDoubleClicked	"This message is sent by the widget of the module when an item is double-clicked.	A client of the module may register an interest in this event to perform an action	on a double-click."	self triggerEvent: #doubleClicked</body></methods><methods><class-id>Jun.JunUniFileModel class</class-id> <category>interface specs</category><body package="Jun" selector="dialogSpecWithInputField">dialogSpecWithInputField	"Tools.UIPainter new openOnClass: self andSelector: #dialogSpecWithInputField"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #jun_File_Model 				#defaultString: 'File Model' ) 			#min: #(#{Core.Point} 150 200 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 900 775 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -64 1 -1 1 -41 1 ) 					#name: #inputField 					#model: #textHolder 					#menu: #menuForTextHolder 					#style: #default 					#type: #string ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -18 1 24 0 ) 					#name: #menuButton 					#model: #indexHolder 					#tabable: false 					#style: #default 					#menu: #menuForPathElements ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -17 1 1 0 -1 1 24 0 ) 					#model: #patternFlagHolder 					#tabable: false 					#style: #default ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 25 0 -1 1 -65 1 ) 					#name: #sequenceView 					#flags: 15 					#model: #selectionList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#tabable: false 					#menu: #menuForSelectionList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.25 -36 1 40 0.25 -4 1 ) 					#name: #acceptButton 					#model: #accept 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #checkAccept ) 					#label: 'Accept' 					#style: #default 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.75 -36 1 40 0.75 -4 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 'Cancel' 					#style: #default 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Jun.JunUniFileModel class</class-id> <category>interface specs</category><body package="Jun" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #jun_File_Model 				#defaultString: 'File Model' ) 			#min: #(#{Core.Point} 150 200 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 900 775 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -18 1 24 0 ) 					#name: #menuButton 					#model: #indexHolder 					#tabable: false 					#style: #default 					#menu: #menuForPathElements ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -17 1 1 0 -1 1 24 0 ) 					#model: #patternFlagHolder 					#tabable: false 					#style: #default ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 25 0 -1 1 -1 1 ) 					#name: #sequenceView 					#flags: 15 					#model: #selectionList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#tabable: false 					#menu: #menuForSelectionList 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Jun.JunUniFileModel class</class-id> <category>interface specs</category><body package="Jun" selector="dialogSpec">dialogSpec	"Tools.UIPainter new openOnClass: self andSelector: #dialogSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #jun_File_Model 				#defaultString: 'File Model' ) 			#min: #(#{Core.Point} 150 200 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 900 775 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -18 1 24 0 ) 					#name: #menuButton 					#model: #indexHolder 					#tabable: false 					#style: #default 					#menu: #menuForPathElements ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -17 1 1 0 -1 1 24 0 ) 					#model: #patternFlagHolder 					#tabable: false 					#style: #default ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 25 0 -1 1 -41 1 ) 					#name: #sequenceView 					#flags: 15 					#model: #selectionList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#tabable: false 					#menu: #menuForSelectionList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.25 -36 1 40 0.25 -4 1 ) 					#name: #acceptButton 					#model: #accept 					#label: 'Accept' 					#style: #default 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.75 -36 1 40 0.75 -4 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 'Cancel' 					#style: #default 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Jun.JunUniFileModel class</class-id> <category>interface specs</category><body package="Jun" selector="windowSpecWithInputField">windowSpecWithInputField	"Tools.UIPainter new openOnClass: self andSelector: #windowSpecWithInputField"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #jun_File_Model 				#defaultString: 'File Model' ) 			#min: #(#{Core.Point} 150 200 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 900 775 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -64 1 -1 1 -41 1 ) 					#name: #inputField 					#model: #textHolder 					#menu: #menuForTextHolder 					#style: #default 					#type: #string ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -18 1 24 0 ) 					#name: #menuButton 					#model: #indexHolder 					#tabable: false 					#style: #default 					#menu: #menuForPathElements ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -17 1 1 0 -1 1 24 0 ) 					#model: #patternFlagHolder 					#tabable: false 					#style: #default ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 25 0 -1 1 -65 1 ) 					#name: #sequenceView 					#flags: 15 					#model: #selectionList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#tabable: false 					#menu: #menuForSelectionList 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Jun.JunUniFileList class</class-id> <category>interface specs</category><body package="Jun" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #jun_File_List 				#defaultString: 'File List' ) 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1000 821 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 8 0 -8 1 32 0 ) 					#name: #menuButton 					#model: #indexHolder 					#tabable: false 					#style: #default 					#menu: #menuForPathElements ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 8 44 ) 					#name: #patternFlagCheckBox 					#model: #patternFlagHolder 					#tabable: false 					#style: #default ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 32 0 40 0 -8 1 64 0 ) 					#name: #patternStringHolder 					#model: #patternStringHolder 					#menu: #editMenu 					#style: #default ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 73 0 -8 1 -8 1 ) 					#name: #sequenceView 					#flags: 15 					#model: #selectionList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#tabable: false 					#menu: #menuForSelectionList 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 149 969 749 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>doubleClick</selector></remove-selector><remove-selector><class-id>Jun.JunUniFileModel</class-id> <selector>doubleClick</selector></remove-selector><remove-selector><class-id>UI.TreeController</class-id> <selector>doubleClick</selector></remove-selector><remove-selector><class-id>UI.Controller</class-id> <selector>doubleClick</selector></remove-selector><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #accessing</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #accessing</do-it><do-it>KSU.InheritanceBrowser classifySymbol: #classDefinition under: #accessing</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #accessing</do-it><do-it>KSU.InheritanceBrowser classifySymbol: #selectedClass under: #accessing</do-it><do-it>KSU.InheritanceBrowser organization addCategory: #accessing</do-it><do-it>KSU.InheritanceBrowser classifySymbol: #listOfAllClasses under: #accessing</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="focusOnClass:">focusOnClass: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんと表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusOnClass: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	^self focusOnClass: self selectedClass</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>focusClass:</selector></remove-selector><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="focusOn:">focusOn: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	^self focusOn: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんと表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusOn: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>focusOnClass:</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>doubleClicked</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>doubleClicked</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser</class-id> <category>actions</category><body package="KSU-Example" selector="doubleClicked">doubleClicked	"上部ペインにおいてリスト表示されている項目をダブルクリックしたときの処理をする。"	"修飾キーが無い場合は、現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"修飾キーとしてシフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"修飾キーとしてオルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>accessing</category><body package="KSU-Example" selector="allClasses">allClasses	"Smalltalkの中に含まれている全クラス群をリスト（順序のある集まり）にして応答する。"	| aList |	aList := List new.	(Class rootsOfTheWorld		asSortedCollection: [:a :b | a toolListDisplayString &lt; b toolListDisplayString])			do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	"リストモデル（上部ペインのモデル：継承を字下げでクラス階層を表示しているＭＶＣのＭ）を応答する。"	listModel		ifNil: 			[listModel := SelectionInList with: self allClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><remove-selector><class-id>KSU.InheritanceBrowser</class-id> <selector>listOfAllClasses</selector></remove-selector><do-it>KSU.InheritanceBrowser new listDisplayStringOf: Text.</do-it><do-it>KSU.InheritanceBrowser new listDisplayStringOf: XML.Text.</do-it><do-it>KSU.InheritanceBrowser doclet.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんとリスト表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection						asSortedCollection: [:a :b | (a perform: aSelector) &lt; (b perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusOn: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>KSU.InheritanceBrowser doclet.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>doclet</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>doclet</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>doclet</category><body package="KSU-Example" selector="doclet">doclet	"KSU.InheritanceBrowser doclet."	"このクラスのドキュメントを作成する。"	| classCollection aDoclet |	classCollection := Array with: self.	aDoclet := KSU.TextDoclet codePrint: classCollection.	^aDoclet</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	"このクラスの例題である。"	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>accessing</category><body package="KSU-Example" selector="allClasses">allClasses	"Smalltalkの中に含まれている全クラス群をリスト（順序のある集まり）にして応答する。"	| aList |	aList := List new.	(Class rootsOfTheWorld asSortedCollection: 			[:classA :classB |			classA toolListDisplayString &lt; classB toolListDisplayString])		do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんとリスト表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection asSortedCollection: 							[:classA :classB |							(classA perform: aSelector) &lt; (classB perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusOn: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	"新しいウィンドウ（継承閲覧：インヘリタンスブラウザ）を、縦横２５ピクセルずらしながら開く。"	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 asPoint))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:classA :classB |									(self listDisplayStringOf: classA) &lt; (self listDisplayStringOf: classB)].					aCollection addAll: (it subclasses select: [:class | class isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:classA :classB |									(self listDisplayStringOf: classA) &lt; (self listDisplayStringOf: classB)].					aCollection						addAll: (it subclasses select: [:subClass | subClass isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><do-it>KSU.InheritanceBrowser doclet.</do-it><do-it>JunURL browse: 'file:///Users/aoki/Desktop/InheritanceBrowser_20141109114546/index.html'</do-it><class><name>InheritanceBrowser</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listModel textModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>interface specs</category><body package="KSU-Example" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '継承閲覧（インヘリタンスブラウザ）' 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 149 969 749 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 0.65 ) 					#name: #listModel 					#model: #listModel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClicked ) 					#menu: #listMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0.65 -1 1 -1 1 ) 					#name: #textModel 					#model: #textModel 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -1 0.65 -1 1 1 0.65 ) 					#name: #resizingSplitter 					#horizontal: true 					#minAboveSize: 100 					#minBelowSize: 100 					#aboveWidgets: 'listModel' 					#belowWidgets: 'textModel' ) ) ) )</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.InheritanceBrowser example1."	"このクラスの例題である。"	| aBrowser |	aBrowser := KSU.InheritanceBrowser new.	aBrowser open.	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="listMenu">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'クラスを探す...' 				#value: #findClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの継承だけ' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの詳細を閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) 			#(#{UI.MenuItem} 				#rawLabel: '階層を書き出す...' 				#value: #outputInheritance ) ) #(1 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #openRequest ) 						#(#{UI.MenuItem} 							#rawLabel: '階層を書き出す...' 							#value: #outputInheritance ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'クラスを探す...' 							#value: #findClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスの継承だけ' 							#value: #focusClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスの詳細を閲覧' 							#value: #browseClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'このクラスへの参照を閲覧' 							#value: #referencesToClass ) ) #(1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspect ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>resources</category><body package="KSU-Example" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの継承だけ' 				#value: #focusClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスの詳細を閲覧' 				#value: #browseClass ) 			#(#{UI.MenuItem} 				#rawLabel: 'このクラスへの参照を閲覧' 				#value: #referencesToClass ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.InheritanceBrowser class</class-id> <category>doclet</category><body package="KSU-Example" selector="doclet">doclet	"KSU.InheritanceBrowser doclet."	"このクラスのドキュメントを作成する。"	| classCollection aDoclet |	classCollection := Array with: self.	aDoclet := KSU.TextDoclet codePrint: classCollection.	^aDoclet</body></methods><comment><class-id>KSU.InheritanceBrowser</class-id><body>Copyright 2008-2014 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="listModel">listModel	"リストモデル（上部ペインのモデル：継承を字下げでクラス階層を表示しているＭＶＣのＭ）を応答する。"	listModel		ifNil: 			[listModel := SelectionInList with: self allClasses.			listModel selectionIndexHolder				compute: [:index | textModel value: self classDefinition]].	^listModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>aspects</category><body package="KSU-Example" selector="textModel">textModel	"テキストモデル（下部ペインのモデル：クラス定義を表示しているＭＶＣのＭ）を応答する。"	textModel		ifNil: 			[| aString |			aString := String new.			textModel := ValueHolder with: aString].	^textModel</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="browseClass">browseClass	"現在選択されているクラスの詳細（つまり、作り方）を閲覧するためにシステムブラウザを開く。"	self selectedClass ifNotNil: [:aClass | aClass browse]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="findClass">findClass	"クラスを探すために検索ダイアログを出し、そこで選ばれたクラスを、継承閲覧（インヘリタンスブラウザ）の選択クラスにする。"	"ダイアログで選ばれたクラスが、継承閲覧（インヘリタンスブラウザ）にリストされていない場合もある。"	"その場合にも、当該クラスの継承をきちんとリスト表示する。"	| aSelector aCollection aBlock aDialog aClass aString anIndex |	aSelector := #toolListDisplayString.	Cursor wait showWhile: 			[aCollection := OrderedCollection new: 5000.			SystemUtils allClassesDo: [:each | aCollection add: each].			aCollection := aCollection asSortedCollection: 							[:classA :classB |							(classA perform: aSelector) &lt; (classB perform: aSelector)]].	aBlock :=			[:aPattern |			aPattern isEmpty				ifTrue: [aCollection yourself]				ifFalse: 					[aCollection						select: [:each | aPattern , '*' match: (each perform: aSelector)]]].	aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.	aDialog		windowLabel: 'クラスを検索する';		firstLabel: '入力した名前からクラスを探します';		secondLabel: '候補として見つかったクラス';		displayStringSelector: aSelector.	aClass := aDialog select ifNil: [^nil].	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^self focusOn: aClass].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="focusClass">focusClass	"現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	^self focusOn: self selectedClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="openRequest">openRequest	"新しいウィンドウ（継承閲覧：インヘリタンスブラウザ）を、縦横２５ピクセルずらしながら開く。"	| aBrowser |	aBrowser := self class new.	self builder window		ifNil: [aBrowser open]		ifNotNil: 			[:aWindow |			aBrowser allButOpenInterface: #windowSpec.			aBrowser builder window openIn: (Screen default						makeRectangleVisible: (aWindow displayBox translatedBy: 25 asPoint))].	^aBrowser</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="outputInheritance">outputInheritance	"現在リスト表示されている内容（上部ペインの中身）を、ファイルダイアログで指定されたファイルに出力する。"	| aDialog aFilename aStream |	aDialog := SaveFileDialog new.	aDialog		addFileFilter: 'Text file (*.txt)' pattern: '*.txt';		addFilterForAllFiles;		fileCondition: #new;		defaultDirectory: (JunSystem homeDirectory construct: 'Desktop') asString;		defaultFilename: 'Inheritance.txt'.	(aFilename := aDialog select) ifNil: [^nil].	JunControlUtility		assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]		do: 			[self listModel list do: 					[:aString |					aStream nextPutAll: aString.					aStream cr]]		ensure: [aStream close]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>menu messages</category><body package="KSU-Example" selector="referencesToClass">referencesToClass	"現在選択されているクラスへの参照（つまり、使い方）を閲覧するためにメソッドブラウザを開く。"	self selectedClass		ifNotNil: 			[:aClass |			| aBinding aCollector |			aBinding := aClass fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="focusOn:">focusOn: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listDisplayStringOf:">listDisplayStringOf: aClass	"引数で指定されたクラスのリスト表示文字列（縦棒＆スペースで字下げされ、必要であればパッケージ名を後置したクラスの名前）を応答する。"	"たとえば「| | | | | Text」や「| | Text in {XML}」のように。"	"以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listDisplayStringOf: Text."	"KSU.InheritanceBrowser new listDisplayStringOf: XML.Text."	| aStream aString |	JunControlUtility		assert: [aStream := String new writeStream]		do: 			[aClass allSuperclasses size timesRepeat: [aStream nextPutAll: '| '].			aStream nextPutAll: aClass toolListDisplayString.			aString := aStream contents]		ensure: [aStream close].	^aString</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="listInheritanceOf:">listInheritanceOf: aClass	"引数で指定されたクラスの継承（クラス階層）をリスト表示文字列のリスト（順序のある集まり）にして応答する。"	"たとえば、以下のメッセージ式を実行（インスペクト）すると良くわかる。"	"KSU.InheritanceBrowser new listInheritanceOf: Number."	| aList aBlock |	Cursor wait showWhile: 			[aList := List new.			aClass withAllSuperclasses reverse				do: [:each | aList add: (self listDisplayStringOf: each)].			aBlock :=					[:it |					| aCollection |					aCollection := SortedCollection sortBlock: 									[:classA :classB |									(self listDisplayStringOf: classA) &lt; (self listDisplayStringOf: classB)].					aCollection						addAll: (it subclasses select: [:subClass | subClass isMeta not]).					aCollection do: 							[:each |							aList add: (self listDisplayStringOf: each).							aBlock value: each]].			aBlock value: aClass].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>actions</category><body package="KSU-Example" selector="doubleClicked">doubleClicked	"上部ペインにおいてリスト表示されている項目をダブルクリックしたときの処理をする。"	"修飾キーが無い場合は、現在選択されているクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	"修飾キーとしてシフトキーが押されている場合には、当該クラスの詳細を閲覧する。"	"修飾キーとしてオルトキーが押されている場合には、当該クラスへの参照を閲覧する。"	JunSensorUtility shiftDown ifTrue: [^self browseClass].	JunSensorUtility altDown ifTrue: [^self referencesToClass].	^self focusClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>accessing</category><body package="KSU-Example" selector="allClasses">allClasses	"Smalltalkの中に含まれている全クラス群をリスト（順序のある集まり）にして応答する。"	| aList |	aList := List new.	(Class rootsOfTheWorld asSortedCollection: 			[:classA :classB |			classA toolListDisplayString &lt; classB toolListDisplayString])		do: [:each | aList addAll: (self listInheritanceOf: each)].	^aList</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>accessing</category><body package="KSU-Example" selector="classDefinition">classDefinition	"現在選択されているクラスの定義（文字列）を応答する。"	^self selectedClass		ifNil: [String new]		ifNotNil: [:aClass | aClass definition]</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>accessing</category><body package="KSU-Example" selector="selectedClass">selectedClass	"現在選択されているクラス（上部ペインで選択表示されて、下部ペインに定義が表示されているクラス）を応答する。"	| anIndex aString aCollection aNameSpace aClass |	anIndex := self listModel selectionIndexHolder value.	anIndex &lt; 1 ifTrue: [^nil].	aString := self listModel list at: anIndex.	aCollection := JunStringUtility separate: aString dividers: '| {}'.	aCollection size &gt; 1		ifTrue: [aNameSpace := Smalltalk at: (aCollection at: 3)]		ifFalse: [aNameSpace := Smalltalk].	aClass := aNameSpace at: aCollection first asSymbol ifAbsent: [^nil].	^aClass</body></methods><do-it>Smalltalk.KSU</do-it><do-it>UI</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>KSU.InheritanceBrowser doclet.</do-it><do-it>Class rootsOfTheWorld</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>self listModel selectionIndexHolder</do-it><do-it>self listModel selectionIndexHolder value: 0</do-it><do-it>KSU.InheritanceBrowser example1.</do-it><do-it>Smalltalk at: #Number ifAbsent: [Dialog warn: 'ありません']</do-it><do-it>Smalltalk at: #Numberber ifAbsent: [Dialog warn: 'ありません']</do-it><do-it>aTable := Dictionary new.aTable add: 'aaa' -&gt; 100.aTable add: 'bbb' -&gt; 200.aTable add: 'ccc' -&gt; 300.aTable at: 'bbb' ifAbsent: [Dialog warn: 'ありません']</do-it><do-it>aTable := Dictionary new.aTable add: 'aaa' -&gt; 100.aTable add: 'bbb' -&gt; 200.aTable add: 'ccc' -&gt; 300.aTable at: 'bbb' ifAbsent: [Dialog warn: 'ありません'].aTable at: 'zzz' ifAbsent: [Dialog warn: 'ありません'].</do-it><do-it>aTable := Dictionary new.aTable add: 'aaa' -&gt; 100.aTable add: 'bbb' -&gt; 200.aTable add: 'ccc' -&gt; 300.aTable at: 'bbb' ifAbsent: [Dialog warn: 'ありません'].aTable at: 'zzz' ifAbsent: [Dialog warn: 'ありません'].aTable at: 'xxx' ifAbsentPut: [777].^aTable</do-it><do-it>JunSensorUtility altDown</do-it><do-it>JunSensorUtility altDown</do-it><do-it>JunSensorUtility altDown</do-it><do-it>KSU.InheritanceBrowser new listInheritanceOf: Number.</do-it><do-it>Cursor read showWhile: [3 seconds wait]</do-it><do-it>Cursor write showWhile: [3 seconds wait]</do-it><do-it>KSU.InheritanceBrowser new listDisplayStringOf: Text.</do-it><do-it>KSU.InheritanceBrowser new listDisplayStringOf: XML.Text.</do-it><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="focusOn:">focusOn: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	"self listModel selectionIndexHolder value: anIndex."	^aClass</body></methods><methods><class-id>KSU.InheritanceBrowser</class-id> <category>private</category><body package="KSU-Example" selector="focusOn:">focusOn: aClass	"引数で指定されたクラスの継承だけを上部ペインにリスト表示する。"	"つまり、当該クラスのスーパークラス群とサブクラス群だけが、字下げを伴ってリスト表示される。"	| aList aString anIndex |	aClass ifNil: [^nil].	aList := self listInheritanceOf: aClass.	self listModel list: aList.	aString := self listDisplayStringOf: aClass.	anIndex := self listModel list indexOf: aString.	anIndex &lt; 1 ifTrue: [^nil].	self listModel selectionIndexHolder value: anIndex.	^aClass</body></methods><do-it>Number browse</do-it><do-it>'*1*' match: '213'</do-it><do-it>'*1*' match: '203'</do-it><do-it>aCollection := #(123 456 789).aBlock :=		[:aPattern |		aPattern isEmpty			ifTrue: [aCollection yourself]			ifFalse: [aCollection select: [:each | aPattern match: each printString]]].aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.aDialog	windowLabel: 'ラベル';	firstLabel: 'ファースト';	secondLabel: 'セカンド';	displayStringSelector: #printString.aClass := aDialog select ifNil: [^nil]</do-it><do-it>aCollection := #(123 456 789).aBlock :=		[:aPattern |		aPattern isEmpty			ifTrue: [aCollection yourself]			ifFalse: [aCollection select: [:each | aPattern match: each printString]]].aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.aDialog	windowLabel: 'ラベル';	firstLabel: 'ファースト';	secondLabel: 'セカンド';	displayStringSelector: #printString.aNumber := aDialog select ifNil: [^nil]</do-it><do-it>aCollection := #(123 456 789).aBlock :=		[:aPattern |		aPattern isEmpty			ifTrue: [aCollection yourself]			ifFalse: 				[aCollection select: [:each | aPattern , '*' match: each printString]]].aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.aDialog	windowLabel: 'ラベル';	firstLabel: 'ファースト';	secondLabel: 'セカンド';	displayStringSelector: #printString.aNumber := aDialog select ifNil: [^nil]</do-it><do-it>3 + 4</do-it><do-it>3 perform: #+ with: 4</do-it><do-it>Compiler evaluate: '3 + 4'</do-it><do-it>Compiler evaluate: 'self + 4' for: 3 logged: false</do-it><do-it>[3 + 4] value</do-it><do-it>[:n | n + 4] value: 3</do-it><do-it>Compiler evaluate: '[3 + 4] value'</do-it><do-it>Compiler evaluate: 'Compiler evaluate: ''[3 + 4] value'''</do-it><do-it>Compiler evaluate: 'Compiler evaluate: ''[:n | n + 4] value: 3'''</do-it><do-it>aCollection := #(123 456 789).aSelector := #printString.aBlock :=		[:aPattern |		aPattern isEmpty			ifTrue: [aCollection yourself]			ifFalse: 				[aCollection select: [:each | aPattern , '*' match: (each perform: aSelector)]]].aDialog := IncrementalSearchDialog forSelectionWithSearch: aBlock.aDialog	windowLabel: 'ラベル';	firstLabel: 'ファースト';	secondLabel: 'セカンド';	displayStringSelector: aSelector.aNumber := aDialog select ifNil: [^nil]</do-it><do-it>Number fullyQualifiedReference</do-it><do-it>Number name</do-it><do-it>Number fullName</do-it><do-it>Number fullyQualifiedReference</do-it><do-it>Number fullyQualifiedReference binding</do-it><do-it>| aBinding aCollector |			aBinding := Number fullyQualifiedReference binding.			aCollector := MethodCollector new.			aCollector browseSelect: (aCollector referencesTo: aBinding)</do-it><do-it>JunSpiroDesign example5.</do-it><do-it>| aString aURL aFilename anImage |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aURL aFilename |aString := 'http://www.google.co.jp/intl/ja_jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := aURL asURI tail asFilename.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].JunImageDisplayModel openFile: aFilename</do-it><do-it>| aString aURL aFilename |aString := 'http://i.yimg.jp/images/mht/2009/0414_ioc.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := aURL asURI tail asFilename.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].JunImageDisplayModel openFile: aFilename</do-it><do-it>| aString aURL aFilename |aString := 'http://www.smalltalk.jp/SML/image/balloon.jpg'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := aURL asURI tail asFilename.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].JunImageDisplayModel openFile: aFilename</do-it><do-it>"マウスのいるところをウィンドウの中に映し出します。"| aWindow aGraphicsContext |aWindow := ScheduledWindow new.aWindow openIn: (100 @ 100 extent: 100 @ 100).aGraphicsContext := aWindow graphicsContext.[InputState default mouseButtons = 0]    whileTrue:         [| aRectangle anImage |        ScheduledControllers checkForEvents.        aRectangle := 0 @ 0 extent: 100 @ 100.        aRectangle := aRectangle                         align: aRectangle center                         with: InputSensor cursorPoint.        aRectangle := Screen default bounds intersect: aRectangle.        anImage := Screen default completeContentsOfArea: aRectangle.        anImage displayOn: aGraphicsContext].aWindow controller closeAndUnschedule</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example0</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example0</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aBrowser</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aBrowser</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>asFilename</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>asFilename</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>value</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>value</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	[] value.	[] value.	[] value.	[] value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	[] value.	[] value.	[] value.	[] value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.		[| aString aLocator |	aString := ''.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.	[] value.	[] value.	[] value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.		[| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.	[] value.	[] value.	[] value</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.		["セレクト"	| aPackage aClass aProtocol aSelector aNavigator |	aPackage := Store.Registry packageNamed: 'KSU-Example'.	aClass := #{KSU.Kime} value class.	aProtocol := #examples.	aSelector := #example0.	aNavigator := aBrowser navigator.	aNavigator selectPundle: aPackage.	(aNavigator state)		classesAndNameSpaces: (Array with: aClass);		protocols: (Array with: aProtocol);		selectors: (Array with: aSelector).	aNavigator		setState: aNavigator state;		changed]			value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.		[| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.	[] value.	[] value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.	[] value.	[] value</body></methods><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FooTexture</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>FooTexture</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>KSU.Example example1.</do-it><do-it>JunSystem homeDirectory</do-it><do-it>JunSystem homeDirectory directoryContents do: 		[:each |		Transcript			cr;			show: each printString]</do-it><do-it>| aDirectory |aDirectory := JunSystem homeDirectory.aDirectory directoryContents do: 		[:each |		| aFilename |		aFilename := aDirectory construct: each.		Transcript			cr;			show: aFilename printString]</do-it><do-it>aDirectory := JunSystem homeDirectory construct: 'Desktop'.aFilename := aDirectory construct: 'zzz.txt'.JunControlUtility	assert: [aStream := (aFilename withEncoding: #UTF_8) writeStream]	do: [aStream nextPutAll: 'abc']	ensure: [aStream close]</do-it><do-it>aFilename delete</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.	[] value</body></methods><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.	[] value</do-it><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>KSU.Example example1.</do-it><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.	[] value</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.		["セレクト"	| aPackage aClass aProtocol aSelector aNavigator |	aPackage := Store.Registry packageNamed: 'KSU-Example'.	aClass := #{KSU.Kime} value class.	aProtocol := #examples.	aSelector := #example0.	aNavigator := aBrowser navigator.	aNavigator selectPundle: aPackage.	(aNavigator state)		classesAndNameSpaces: (Array with: aClass);		protocols: (Array with: aProtocol);		selectors: (Array with: aSelector).	aNavigator		setState: aNavigator state;		changed]			value</body></methods><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.		["セレクト"	| aPackage aClass aProtocol aSelector aNavigator |	aPackage := Store.Registry packageNamed: 'KSU-Example'.	aClass := #{KSU.Kime} value class.	aProtocol := #examples.	aSelector := #example0.	aNavigator := aBrowser navigator.	aNavigator selectPundle: aPackage.	(aNavigator state)		classesAndNameSpaces: (Array with: aClass);		protocols: (Array with: aProtocol);		selectors: (Array with: aSelector).	aNavigator		setState: aNavigator state;		changed]			value</do-it><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.		["セレクト"	| aPackage aClass aProtocol aSelector aNavigator |	aPackage := Store.Registry packageNamed: 'KSU-Example'.	aClass := #{KSU.Kime} value class.	aProtocol := #examples.	aSelector := #example0.	aNavigator := aBrowser navigator.	aNavigator selectPundle: aPackage.	(aNavigator state)		classesAndNameSpaces: (Array with: aClass);		protocols: (Array with: aProtocol);		selectors: (Array with: aSelector).	aNavigator		setState: aNavigator state;		changed]			value</do-it><remove-selector><class-id>KSU.Example class</class-id> <selector>example9</selector></remove-selector><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.		["セレクト"	| aPackage aClass aProtocol aSelector aNavigator |	aPackage := Store.Registry packageNamed: 'KSU-Example'.	aClass := #{KSU.Kime} value class.	aProtocol := #examples.	aSelector := #example0.	aNavigator := aBrowser navigator.	aNavigator selectPundle: aPackage.	(aNavigator state)		classesAndNameSpaces: (Array with: aClass);		protocols: (Array with: aProtocol);		selectors: (Array with: aSelector).	aNavigator		setState: aNavigator state;		changed]			value</do-it><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>	| aFilename aBrowser |	aFilename := 'Kime.st' asFilename.	aBrowser := nil.	"あるファイルをプログラムとして読み込んでブラウザにかけるために以下の４つのブロックを構成"		["ダウンロード"	| aString aLocator |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/misc/sts/'				, aFilename asString.	aLocator := JunURL named: aString.	aLocator exists ifFalse: [^nil].	aLocator downloadTo: aFilename]			value.		["ファイルイン"	aFilename exists ifFalse: [^nil].	aFilename		fileIn;		delete]			value.		["ブラウズ"	| aController aClass |	aController := ScheduledControllers activeController.	aBrowser := aController model.	aClass := #{Refactory.Browser.RefactoringBrowser} value.	(aBrowser isKindOf: aClass) ifFalse: [aBrowser := aClass open]]			value.		["セレクト"	| aPackage aClass aProtocol aSelector aNavigator |	aPackage := Store.Registry packageNamed: 'KSU-Example'.	aClass := #{KSU.Kime} value class.	aProtocol := #examples.	aSelector := #example0.	aNavigator := aBrowser navigator.	aNavigator selectPundle: aPackage.	(aNavigator state)		classesAndNameSpaces: (Array with: aClass);		protocols: (Array with: aProtocol);		selectors: (Array with: aSelector).	aNavigator		setState: aNavigator state;		changed]			value</do-it><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><class><name>Kime</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Kime example0."	JunURL requestInternetConnection</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Kime example1."	| aFilename aString aURL |	aFilename := 'Foo-Texture.st' asFilename.	aString := 'http://aokilab.kyoto-su.ac.jp/documents/BlackBook/sts/'				, aFilename asString.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	^aFilename fileIn</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Kime example2."	FooTexture showCheckeredImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Kime example3."	FooTexture showLatticedImage</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Kime example4."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: FooTexture checkeredImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Kime example5."	FooTexture showCheckeredPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Kime example6."	FooTexture showLatticedPolygon yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Kime example7."	FooTexture showCheckeredPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Kime example8."	FooTexture showLatticedPolygon zoomHeight: 0.5</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Kime example9."	(FooTexture showCheckeredPolygon)		zoomHeight: 2.3;		grab: 0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Kime exampleA."	(FooTexture showLatticedPolygon)		zoomHeight: 2.3;		grab: -0.7 , 0</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Kime exampleB."	| aCube stereoViewer |	aCube := JunOpenGL3dObject cube.	aCube paint: ColorValue gray.	stereoViewer := JunOpenGLStereoDisplayModel new.	stereoViewer displayObject: aCube.	stereoViewer		open;		parallelProjection;		wireframePresentation;		crossing: true.	^stereoViewer</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Kime exampleC."	| aPolygon aTable aViewfinder aLight |	aPolygon := FooTexture checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Kime exampleD."	FooTexture transformCheckeredTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Kime exampleE."	FooTexture transformLatticedTexture</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Kime exampleF."	| cartoonMovie tickTime filmImages screenBoundingBox filmExtent aValue aPoint |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	filmImages := OrderedCollection new: FooTexture howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := FooTexture filmExtent.	aValue := (screenBoundingBox extent - filmExtent)				/ (FooTexture howManyFrames - 1).	aPoint := screenBoundingBox origin.	FooTexture howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	filmImages		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Kime exampleG."	FooTexture showFilmImages</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Kime exampleH."	FooTexture showFilmBody yourself</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Kime exampleI."	FooTexture showFilmBody zoomHeight: 15</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Kime exampleJ."	| aBody aViewfinder aLight aBlock |	aBody := FooTexture filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock :=			[:aPolygon |			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3))						center.			normalVector := ((aPolygon vertexes at: 1)						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon |			aViewfinder do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Kime exampleK."	FooTexture playFilmBody</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Kime exampleL."	FooTexture showObjectFromZ</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Kime exampleM."	FooTexture showObject</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Kime exampleN."	FooTexture showObjectFromX</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Kime exampleO."	FooTexture showObjectFromY</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Kime exampleP."	FooTexture showObjectWithMovementVector</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Kime exampleQ."	FooTexture showDice</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Kime exampleR."	FooTexture showSaikoroExcept236</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Kime exampleS."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Kime exampleT."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Kime exampleU."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Kime exampleV."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Kime exampleW."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Kime exampleX."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Kime exampleY."</body></methods><methods><class-id>KSU.Kime class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Kime exampleZ."</body></methods><comment><class-id>KSU.Kime</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Right Reserved.</body></comment><do-it>KSU.Kime example0.</do-it><component-created><name>Foo-Texture</name> <type>package</type></component-created><class><name>FooTexture</name><environment>Smalltalk</environment><super>Jun.JunAbstractObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>NikkeiSoftware</category><attributes><package>Foo-Texture</package></attributes></class><comment><class-id>FooTexture</class-id><body>NikkeiSoftware, 2007, 09, Texture</body></comment><methods><class-id>FooTexture class</class-id> <category>8 saikoro showing</category><body package="Foo-Texture" selector="showSaikoroExcept236">showSaikoroExcept236	"FooTexture showSaikoroExcept236."	| aBody aViewfinder |	aBody := JunOpenGL3dObject saikoro.	aBody components: (aBody components 				reject: [:aPolygon | #('face2' 'face3' 'face6') includes: aPolygon name]).	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	aViewfinder grab: 10 asDegrees sin , 0.	aViewfinder := aViewfinder spawnObject.	aBody := aViewfinder displayObject transform: ((0 , 0 , 0 to: -1 , 1 , 0) 						transformationToRotate: 120 asDegrees).	aViewfinder		displayObject: aBody;		redisplay.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>8 saikoro showing</category><body package="Foo-Texture" selector="showDiceExcept236">showDiceExcept236	"FooTexture showDiceExcept236."	| aBody aViewfinder |	aBody := JunOpenGL3dObject dice.	aBody components: (aBody components 				reject: [:aPolygon | #('face2' 'face3' 'face6') includes: aPolygon name]).	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	aViewfinder grab: 10 asDegrees sin , 0.	aViewfinder := aViewfinder spawnObject.	aBody := aViewfinder displayObject transform: ((0 , 0 , 0 to: -1 , 1 , 0) 						transformationToRotate: 120 asDegrees).	aViewfinder		displayObject: aBody;		redisplay.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>8 saikoro showing</category><body package="Foo-Texture" selector="showDice">showDice	"FooTexture showDice."	| aBody aViewfinder |	aBody := JunOpenGL3dObject dice.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	aViewfinder grab: 10 asDegrees sin , 0.	aViewfinder := aViewfinder spawnObject.	aBody := aViewfinder displayObject transform: ((0 , 0 , 0 to: -1 , 1 , 0) 						transformationToRotate: 180 asDegrees).	aViewfinder		displayObject: aBody;		redisplay.	aViewfinder grab: -20 asDegrees sin , 0.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>8 saikoro showing</category><body package="Foo-Texture" selector="showSaikoro">showSaikoro	"FooTexture showSaikoro."	| aBody aViewfinder |	aBody := JunOpenGL3dObject saikoro.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	aViewfinder grab: 10 asDegrees sin , 0.	aViewfinder := aViewfinder spawnObject.	aBody := aViewfinder displayObject transform: ((0 , 0 , 0 to: -1 , 1 , 0) 						transformationToRotate: 180 asDegrees).	aViewfinder		displayObject: aBody;		redisplay.	aViewfinder grab: -20 asDegrees sin , 0.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>2 image viewing</category><body package="Foo-Texture" selector="showLatticedImage">showLatticedImage	"FooTexture showLatticedImage."	| aViewer |	aViewer := JunImageDisplayModel show: FooTexture latticedImage.	aViewer getWindow label: 'Latticed Image'.	^aViewer</body></methods><methods><class-id>FooTexture class</class-id> <category>2 image viewing</category><body package="Foo-Texture" selector="showCheckeredImage">showCheckeredImage	"FooTexture showCheckeredImage."	| aViewer |	aViewer := JunImageDisplayModel show: FooTexture checkeredImage.	aViewer getWindow label: 'Checkered Image'.	^aViewer</body></methods><methods><class-id>FooTexture class</class-id> <category>7 object showing</category><body package="Foo-Texture" selector="showObjectWithMovementVector">showObjectWithMovementVector	"FooTexture showObjectWithMovementVector."	| aBody aTable aViewfinder aVector |	aBody := self showingObject.	aTable := (Dictionary new)				add: #eyePoint -&gt; (5 , 5 , 5);				add: #sightPoint -&gt; (0 , 0 , 0);				add: #upVector -&gt; (0 , 0 , 1);				add: #zoomHeight -&gt; 5;				yourself.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	aVector := (0 , 0 to: 1 , -1) normalized atT: 1 asDegrees sin.	aViewfinder movementVector: aVector.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>7 object showing</category><body package="Foo-Texture" selector="showObjectFromZ">showObjectFromZ	"FooTexture showObjectFromZ."	| aBody aTable aViewfinder |	aBody := self showingObject.	aTable := (Dictionary new)				add: #eyePoint -&gt; (0 , 0 , 20);				add: #projection -&gt; #parallelProjection;				add: #sightPoint -&gt; (0 , 0 , 0);				add: #upVector -&gt; (0 , 1 , 0);				add: #zoomHeight -&gt; 5;				yourself.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>7 object showing</category><body package="Foo-Texture" selector="showingObject">showingObject	"(FooTexture showingObject) show."	| aBody aBlock |	aBody := JunOpenGL3dCompoundObject new.	aBlock := 			[:fromPoint :toPoint | 			| aCylinder |			aCylinder := JunOpenGL3dObject 						cylinderFrom: fromPoint						to: toPoint						radius: 0.05						by: 45.			aCylinder paint: ColorValue gray.			aCylinder yourself].	aBody add: (aBlock value: -1.5 , 0.5 , 0.5 value: -0.5 , -0.5 , -0.5).	aBody add: (aBlock value: -0.5 , -0.5 , -0.5 value: 0.5 , 0.5 , -0.5).	aBody add: (aBlock value: 0.5 , 0.5 , -0.5 value: 1.5 , -0.5 , 0.5).	aBody add: (aBlock value: 1.5 , -0.5 , 0.5 value: -1.5 , 0.5 , 0.5).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 2).	^aBody</body></methods><methods><class-id>FooTexture class</class-id> <category>7 object showing</category><body package="Foo-Texture" selector="showObjectFromX">showObjectFromX	"FooTexture showObjectFromX."	| aBody aTable aViewfinder |	aBody := self showingObject.	aTable := (Dictionary new)				add: #eyePoint -&gt; (20 , 0 , 0);				add: #projection -&gt; #parallelProjection;				add: #sightPoint -&gt; (0 , 0 , 0);				add: #upVector -&gt; (0 , 0 , 1);				add: #zoomHeight -&gt; 5;				yourself.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>7 object showing</category><body package="Foo-Texture" selector="showObjectFromY">showObjectFromY	"FooTexture showObjectFromY."	| aBody aTable aViewfinder |	aBody := self showingObject.	aTable := (Dictionary new)				add: #eyePoint -&gt; (0 , 20 , 0);				add: #projection -&gt; #parallelProjection;				add: #sightPoint -&gt; (0 , 0 , 0);				add: #upVector -&gt; (0 , 0 , 1);				add: #zoomHeight -&gt; 5;				yourself.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>7 object showing</category><body package="Foo-Texture" selector="showObject">showObject	"FooTexture showObject."	| aBody aTable aViewfinder |	aBody := self showingObject.	aTable := (Dictionary new)				add: #eyePoint -&gt; ((0 , 0 , 0 to: 10 , 10 , 10) normalized atT: 10);				add: #projection -&gt; #parallelProjection;				add: #sightPoint -&gt; (0 , 0 , 0);				add: #upVector -&gt; (0 , 0 , 1);				add: #zoomHeight -&gt; 5;				yourself.	aViewfinder := JunOpenGLDisplayModel displayObject: aBody.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: (300 , 300) alignedRectangleWithScreenCenter.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>4 polygon viewing</category><body package="Foo-Texture" selector="showLatticedPolygon">showLatticedPolygon	"FooTexture showLatticedPolygon."	| aPolygon aViewfinder |	aPolygon := self latticedPolygon.	aViewfinder := aPolygon show.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>4 polygon viewing</category><body package="Foo-Texture" selector="showCheckeredPolygon">showCheckeredPolygon	"FooTexture showCheckeredPolygon."	| aPolygon aViewfinder |	aPolygon := self checkeredPolygon.	aViewfinder := aPolygon show.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>1 image accessing</category><body package="Foo-Texture" selector="checkeredImage">checkeredImage	"JunImageDisplayModel show: (FooTexture checkeredImage)."	| aStep anImage |	aStep := 4.	self 		assert: [Pixmap extent: 256 @ 256]		do: 			[:aPixmap | 			| aGraphicsContext yInterval |			(aGraphicsContext := aPixmap graphicsContext)				paint: ColorValue white;				displayRectangle: aPixmap bounds.			aGraphicsContext				paint: ColorValue black;				lineWidth: 1.			yInterval := 0 to: aPixmap height - 1 by: aStep.			yInterval with: (1 to: yInterval size)				do: 					[:y :j | 					| xInterval |					xInterval := 0 to: aPixmap width - 1 by: aStep.					xInterval with: (1 to: xInterval size)						do: 							[:x :i | 							(i bitXor: j) even 								ifTrue: [aGraphicsContext displayRectangle: (x @ y extent: aStep asPoint)]]].			anImage := aPixmap asImage]		ensure: [:aPixmap | aPixmap close].	^anImage</body></methods><methods><class-id>FooTexture class</class-id> <category>1 image accessing</category><body package="Foo-Texture" selector="latticedImage">latticedImage	"JunImageDisplayModel show: (FooTexture latticedImage)."	| aStep anImage |	aStep := 4.	self 		assert: [Pixmap extent: 256 @ 256]		do: 			[:aPixmap | 			| aGraphicsContext aValue |			(aGraphicsContext := aPixmap graphicsContext)				paint: ColorValue white;				displayRectangle: aPixmap bounds.			aGraphicsContext				paint: ColorValue black;				lineWidth: 1.			aValue := aPixmap height - 1.			(0 to: aValue by: aStep) 				do: [:x | aGraphicsContext displayLineFrom: x @ 0 to: x @ aValue].			aValue := aPixmap width - 1.			(0 to: aValue by: aStep) 				do: [:y | aGraphicsContext displayLineFrom: 0 @ y to: aValue @ y].			anImage := aPixmap asImage]		ensure: [:aPixmap | aPixmap close].	^anImage</body></methods><methods><class-id>FooTexture class</class-id> <category>5 texture transforming</category><body package="Foo-Texture" selector="transformLatticedTexture">transformLatticedTexture	"FooTexture transformLatticedTexture."	| aPolygon aTable aViewfinder aLight |	aPolygon := self latticedPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor 		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>FooTexture class</class-id> <category>5 texture transforming</category><body package="Foo-Texture" selector="transformCheckeredTexture">transformCheckeredTexture	"FooTexture transformCheckeredTexture."	| aPolygon aTable aViewfinder aLight |	aPolygon := self checkeredPolygon.	aTable := Dictionary new.	aTable add: #eyePoint -&gt; (0 , 1.3 , 0.13).	aTable add: #projection -&gt; #perspectiveProjection.	aTable add: #sightPoint -&gt; (0 , 0.7 , 0.07).	aTable add: #upVector -&gt; (0 , 0 , 1).	aTable add: #zoomHeight -&gt; 0.35.	aViewfinder := JunOpenGLDisplayModel new.	aViewfinder displayObject: aPolygon.	aViewfinder defaultProjectionTable: aTable.	aViewfinder openIn: ((16 , 9) * 50) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights last) lightColor 		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	100 timesRepeat: 			[aViewfinder do: [aViewfinder dolly: 0.0175] forMilliseconds: 100]</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="filmImages">filmImages	"FooTexture filmImages."	| filmImages screenBoundingBox filmExtent aValue aPoint |	filmImages := OrderedCollection new: self howManyFrames.	screenBoundingBox := JunSystem screenBoundingBox.	filmExtent := self filmExtent.	aValue := (screenBoundingBox extent - filmExtent) 				/ (self howManyFrames - 1).	aPoint := screenBoundingBox origin.	self howManyFrames timesRepeat: 			[| aBox anImage |			aBox := (aPoint extent: filmExtent) rounded.			aBox := aBox intersect: screenBoundingBox.			anImage := JunImageUtility fromDisplay: aBox.			filmImages add: anImage.			aPoint := aPoint + aValue].	^filmImages</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="filmBody">filmBody	"(FooTexture filmBody) showIn: (300 , 600) alignedRectangleWithScreenCenter."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	self filmPolygons with: self filmImages		do: 			[:aPolygon :anImage | 			| aTexture |			aTexture := JunOpenGLTexture image: anImage.			aTexture coordinates: (Array 						with: 0 , 0						with: 1 , 0						with: 1 , 1						with: 0 , 1).			aPolygon texture: aTexture.			aBody add: aPolygon].	^aBody</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="howManyFrames">howManyFrames	"FooTexture howManyFrames."	^72</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="filmPolygons">filmPolygons	"FooTexture filmPolygons."	| filmPolygons aRatio aPolygon aTransformation anAngle aPoint |	filmPolygons := OrderedCollection new: self howManyFrames.	aRatio := self filmHeight / self filmWidth.	aPolygon := JunOpenGL3dPolygon 				with: -1 , aRatio negated , 0				with: 1 , aRatio negated , 0				with: 1 , aRatio , 0				with: -1 , aRatio , 0.	aPolygon paint: ColorValue white.	aTransformation := 90 asDegrees transformationToRotateX 				product: (0 , -6 , 0) transformationToTranslate.	aPolygon := aPolygon transform: aTransformation.	anAngle := 0 asDegrees.	aPoint := 0 , 0 , 0.	self howManyFrames timesRepeat: 			[aTransformation := anAngle transformationToRotateZ 						product: aPoint transformationToTranslate.			filmPolygons add: (aPolygon transform: aTransformation).			anAngle := anAngle + 20 asDegrees.			aPoint := aPoint + (0 , 0 , -0.5)].	^filmPolygons</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="showFilmImages">showFilmImages	"FooTexture showFilmImages."	| cartoonMovie tickTime |	cartoonMovie := JunCartoonMovie new.	tickTime := 125.	"8Hz"	self filmImages 		do: [:anImage | cartoonMovie addImage: anImage keepTime: tickTime].	cartoonMovie		loop;		openLightWeightWindowSpec;		start.	^cartoonMovie</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="filmExtent">filmExtent	"FooTexture filmExtent."	^160 @ 120</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="showFilmBody">showFilmBody	"FooTexture showFilmBody."	| aBody aViewfinder |	aBody := self filmBody.	aViewfinder := aBody showIn: (300 , 600) alignedRectangleWithScreenCenter.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="filmWidth">filmWidth	"FooTexture filmWidth."	^self filmExtent x</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="filmHeight">filmHeight	"FooTexture filmHeight."	^self filmExtent y</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="showFilmPolygons">showFilmPolygons	"FooTexture showFilmPolygons."	| aBody aViewfinder |	aBody := JunOpenGL3dCompoundObject new.	self filmPolygons do: [:aPolygon | aBody add: aPolygon].	aViewfinder := aBody showIn: (300 , 600) alignedRectangleWithScreenCenter.	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>6 flim rolling</category><body package="Foo-Texture" selector="playFilmBody">playFilmBody	"FooTexture playFilmBody."	| aBody aViewfinder aLight aBlock |	aBody := self filmBody.	aViewfinder := aBody showIn: (500 , 500) alignedRectangleWithScreenCenter.	(aLight := aViewfinder displayLights first) beOff.	aLight lightStateChanged.	(aLight := aViewfinder displayLights last) lightColor 		color: (ColorValue brightness: 0.8).	aLight lightColorChanged.	aBlock := 			[:aPolygon | 			| centerPoint normalVector projectionTable |			centerPoint := ((aPolygon vertexes at: 1) to: (aPolygon vertexes at: 3)) 						center.			normalVector := ((aPolygon vertexes at: 1) 						plane: (aPolygon vertexes at: 2)						and: (aPolygon vertexes at: 3)) normalUnitVector.			projectionTable := Dictionary new.			projectionTable add: #sightPoint -&gt; centerPoint.			projectionTable 				add: #eyePoint -&gt; ((centerPoint to: centerPoint + normalVector) atT: 3).			projectionTable add: #upVector -&gt; (0 , 0 , 1).			projectionTable add: #zoomHeight -&gt; 6.			projectionTable yourself].	aViewfinder defaultProjectionTable: (aBlock value: aBody components first).	aViewfinder projectionTable: (aBlock value: aBody components first).	aBody components , aBody components reverse do: 			[:aPolygon | 			self do: [aViewfinder projectionTable: (aBlock value: aPolygon)]				forMilliseconds: 200].	^aViewfinder</body></methods><methods><class-id>FooTexture class</class-id> <category>3 polygon accessing</category><body package="Foo-Texture" selector="latticedPolygon">latticedPolygon	"JunOpenGLDisplayModel show: (FooTexture latticedPolygon)."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: self latticedImage.	aTexture coordinates: (Array 				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon 				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><methods><class-id>FooTexture class</class-id> <category>3 polygon accessing</category><body package="Foo-Texture" selector="checkeredPolygon">checkeredPolygon	"JunOpenGLDisplayModel show: (FooTexture checkeredPolygon)."	| aTexture aPolygon |	aTexture := JunOpenGLTexture image: self checkeredImage.	aTexture coordinates: (Array 				with: 0 , 0				with: 1 , 0				with: 1 , 1				with: 0 , 1).	aPolygon := JunOpenGL3dPolygon 				with: -1 , -1 , 0				with: 1 , -1 , 0				with: 1 , 1 , 0				with: -1 , 1 , 0.	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	^aPolygon</body></methods><do-it>KSU.Kime example1.</do-it><do-it>KSU.Kime example2.</do-it><do-it>KSU.Kime example3.</do-it><do-it>KSU.Kime example4.</do-it><do-it>KSU.Kime example5.</do-it><do-it>KSU.Kime example6.</do-it><do-it>KSU.Kime example7.</do-it><do-it>KSU.Kime example8.</do-it><do-it>KSU.Kime example9.</do-it><do-it>KSU.Kime exampleA.</do-it><do-it>KSU.Kime exampleB.</do-it><do-it>KSU.Kime exampleC.</do-it><do-it>KSU.Kime exampleD.</do-it><do-it>KSU.Kime exampleE.</do-it><do-it>KSU.Kime exampleF.</do-it><do-it>KSU.Kime exampleG.</do-it><do-it>KSU.Kime exampleH.</do-it><do-it>KSU.Kime exampleI.</do-it><do-it>KSU.Kime exampleJ.</do-it><do-it>KSU.Kime exampleJ.</do-it><do-it>KSU.Kime exampleK.</do-it><do-it>KSU.Kime exampleL.</do-it><do-it>KSU.Kime exampleM.</do-it><do-it>KSU.Kime exampleN.</do-it><do-it>KSU.Kime exampleP.</do-it><do-it>KSU.Kime exampleQ.</do-it><do-it>KSU.Kime exampleR.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>(0 to: 9) collect: [:n | Character value: $0 asInteger + n]</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	(0 to: 9) collect: [:n | Character value: $0 asInteger + n]</body></methods><do-it>KSU.Example example.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n])</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				Transcript					cr;					show: aCharacter printString]</body></methods><do-it>KSU.Example example.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aSelector |	aSelector := 'example?'.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				Transcript					cr;					show: aSelector printString]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aSelector |	aSelector := 'example?'.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				aSelector at: aSelector size put: aCharacter.				Transcript					cr;					show: aSelector printString]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aSelector |	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				aSelector at: aSelector size put: aCharacter.				Transcript					cr;					show: aSelector printString]</body></methods><do-it>KSU.Example example.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aSelector</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aSelector</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				aSelector at: aSelector size put: aCharacter.				Transcript					cr;					show: aSelector printString.				aClass yourself.				aProtocol yourself.				aSelector yourself]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aCharacter</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aCharacter</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>writeStream</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>writeStream</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>crtab</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>crtab</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nextPutAll</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nextPutAll</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>shortName</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>shortName</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>space</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>space</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aCode |				aSelector at: aSelector size put: aCharacter.				aCode := String new writeStream.				aCode nextPutAll: aSelector.				aCode crtab.				aCode nextPutAll: '"'.				aCode nextPutAll: aClass shortName.				aCode space.				aCode nextPutAll: aSelector.				aCode nextPutAll: '."'.				aCode := aCode contents.				Transcript					cr;					show: aCode printString.				aClass yourself.				aProtocol yourself.				aSelector yourself]</body></methods><do-it>KSU.Example example.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream nextPutAll: aSelector.				aStream crtab.				aStream nextPutAll: '"'.				aStream nextPutAll: aClass shortName.				aStream space.				aStream nextPutAll: aSelector.				aStream nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: aCode printString.				aClass yourself.				aProtocol yourself.				aSelector yourself]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream					nextPutAll: aSelector;					crtab;					nextPutAll: '"';					nextPutAll: aClass shortName;					space;					nextPutAll: aSelector;					nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: aCode printString.				aClass yourself.				aProtocol yourself.				aSelector yourself]</body></methods><do-it>KSU.Example example.</do-it><do-it>KSU.Example example.</do-it><do-it>KSU.Example class selectors</do-it><remove-selector><class-id>KSU.Example class</class-id> <selector>example1</selector></remove-selector><do-it>KSU.Example class removeSelector: #example1</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."</body></methods><do-it>KSU.Example class compile: 'example1	"KSU.Example example1."' classified: #examples</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream					nextPutAll: aSelector;					crtab;					nextPutAll: '"';					nextPutAll: aClass shortName;					space;					nextPutAll: aSelector;					nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: aCode printString.				(aClass class selectors includes: aSelector)					ifFalse: [aClass class compile: aCode classified: aProtocol]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Example example7."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Example exampleA."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Example exampleC."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Example exampleD."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Example exampleE."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Example exampleF."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Example exampleG."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Example exampleH."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Example exampleI."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Example exampleJ."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Example exampleK."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Example exampleL."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Example exampleM."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Example exampleN."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Example exampleO."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Example exampleP."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Example exampleQ."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Example exampleR."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Example exampleS."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Example exampleT."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Example exampleU."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Example exampleV."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Example exampleW."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Example exampleX."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Example exampleY."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Example exampleZ."</body></methods><do-it>KSU.Example example.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream					nextPutAll: aSelector;					crtab;					nextPutAll: '"';					nextPutAll: aClass shortName;					space;					nextPutAll: aSelector;					nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: aCode printString.				JunSensorUtility altDown					ifTrue: []					ifFalse: 						[(aClass class selectors includes: aSelector)							ifFalse: [aClass class compile: aCode classified: aProtocol]]]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream					nextPutAll: aSelector;					crtab;					nextPutAll: '"';					nextPutAll: aClass shortName;					space;					nextPutAll: aSelector;					nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: aCode printString.				JunSensorUtility altDown					ifTrue: [aClass class removeSelector: aSelector]					ifFalse: 						[(aClass class selectors includes: aSelector)							ifFalse: [aClass class compile: aCode classified: aProtocol]]]</body></methods><do-it>KSU.Example example.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>copy</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>copy</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector altDown |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	altDown := JunSensorUtility altDown.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream					nextPutAll: aSelector;					crtab;					nextPutAll: '"';					nextPutAll: aClass shortName;					space;					nextPutAll: aSelector;					nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: aCode printString.				altDown					ifTrue: [aClass class removeSelector: aSelector]					ifFalse: 						[(aClass class selectors includes: aSelector)							ifFalse: [aClass class compile: aCode classified: aProtocol]]]</body></methods><do-it>KSU.Example example.</do-it><do-it>KSU.Example example.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	| aClass aProtocol aSelector altDown |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	altDown := JunSensorUtility altDown.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				aStream := String new writeStream.				aStream					nextPutAll: aSelector;					crtab;					nextPutAll: '"';					nextPutAll: aClass shortName;					space;					nextPutAll: aSelector;					nextPutAll: '."'.				aCode := aStream contents.				Transcript					cr;					show: altDown printString.				altDown					ifTrue: [aClass class removeSelector: aSelector]					ifFalse: 						[(aClass class selectors includes: aSelector)							ifFalse: [aClass class compile: aCode classified: aProtocol]]]</body></methods><do-it>KSU.Example example.</do-it><remove-selector><class-id>KSU.Example class</class-id> <selector>example1</selector></remove-selector><do-it>KSU.Example class removeSelector: #example1</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Example example7."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Example exampleA."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Example exampleC."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Example exampleD."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Example exampleE."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Example exampleF."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Example exampleG."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Example exampleH."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Example exampleI."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Example exampleJ."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Example exampleK."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Example exampleL."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Example exampleM."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Example exampleN."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Example exampleO."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Example exampleP."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Example exampleQ."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Example exampleR."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Example exampleS."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Example exampleT."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Example exampleU."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Example exampleV."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Example exampleW."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Example exampleX."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Example exampleY."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Example exampleZ."</body></methods><do-it>KSU.Example example.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBlock |	aBlock := [3 + 4].	^aBlock</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aString anObject aBlock |	aString := '[self + 4]'.	anObject := 3.	aBlock := Compiler evaluate: aString for: anObject logged: false.	^aBlock</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aString anObject aContext aNamespace aMethod aBlock |	aString := '[self + 4]'.	anObject := 3.	aContext := thisContext.	aNamespace := Smalltalk.	aMethod := Compiler new				compile: aString				in: aContext				allowReceiver: true				class: anObject class				environment: aNamespace				noPattern: true				notifying: nil				ifFail: [^nil].	aBlock := anObject performMethod: aMethod with: aContext.	^aBlock</body></methods><do-it>KSU.Example example0.</do-it><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example2.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."	| aBlock |	aBlock := [3 + 4].	^aBlock value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aString anObject aBlock |	aString := '[self + 4]'.	anObject := 3.	aBlock := Compiler evaluate: aString for: anObject logged: false.	^aBlock value</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."	| aString anObject aContext aNamespace aMethod aBlock |	aString := '[self + 4]'.	anObject := 3.	aContext := thisContext.	aNamespace := Smalltalk.	aMethod := Compiler new				compile: aString				in: aContext				allowReceiver: true				class: anObject class				environment: aNamespace				noPattern: true				notifying: nil				ifFail: [^nil].	aBlock := anObject performMethod: aMethod with: aContext.	^aBlock value</body></methods><do-it>KSU.Example example3.</do-it><do-it>KSU.Example example4.</do-it><do-it>KSU.Example example5.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."	[:a | 3 + a] value: 4</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Example example7."	[:x :y | x @ y] value: 3 value: 4</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."	[:red :green :blue | ColorValue red: red green: green blue: blue]		value: 0.5		value: 0.5		value: 1.0</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."	[:a | 3 + a] valueWithArguments: (Array with: 4)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Example exampleA."	[:x :y | x @ y] valueWithArguments: (Array with: 3 with: 4)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	^[:red :green :blue | ColorValue red: red green: green blue: blue]		valueWithArguments: (Array with: 0.5 with: 0.5 with: 1.0)</body></methods><do-it>KSU.Example exampleA.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Example exampleA."	^[:x :y | x @ y] valueWithArguments: (Array with: 3 with: 4)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."	^[:a | 3 + a] valueWithArguments: (Array with: 4)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."	^[:red :green :blue | ColorValue red: red green: green blue: blue]		value: 0.5		value: 0.5		value: 1.0</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Example example7."	^[:x :y | x @ y] value: 3 value: 4</body></methods><do-it>KSU.Example example6.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."	^[:a | 3 + a] value: 4</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Example exampleC."		[Transcript		clear;		flush] cull: Date today cull: Time now</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Example exampleD."		[:date |	Transcript		clear;		nextPutAll: date printString;		flush]			cull: Date today			cull: Time now</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Example exampleE."		[:date :time |	Transcript		clear;		nextPutAll: date printString;		space;		nextPutAll: time printString;		flush]			cull: Date today			cull: Time now</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Example exampleF."		[Transcript		clear;		flush]			cullWithArguments: (Array with: Date today with: Time now)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Example exampleG."		[:date |	Transcript		clear;		nextPutAll: date printString;		flush]			cullWithArguments: (Array with: Date today with: Time now)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Example exampleH."		[:date :time |	Transcript		clear;		nextPutAll: date printString;		space;		nextPutAll: time printString;		flush]			cullWithArguments: (Array with: Date today with: Time now)</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Example exampleI."	(Time dateAndTimeNow detect: [:each | each isKindOf: Time] ifNone: [nil])		ifNotNil: 			[:it |			Transcript				clear;				nextPutAll: it printString;				flush]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Example exampleJ."	| redBlock greenBlock blueBlock mainBlock |	redBlock :=			[Transcript				show: 'red';				cr].	greenBlock :=			[Transcript				show: 'green';				cr].	blueBlock :=			[Transcript				show: 'blue';				cr].	mainBlock :=			[Transcript clear.			redBlock value.			greenBlock value.			blueBlock value].	mainBlock value</body></methods><do-it>KSU.Example exampleJ.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Example exampleK."	| redBlock greenBlock blueBlock mainBlock |	redBlock :=			[Transcript				show: 'red';				cr.			^nil].	greenBlock :=			[Transcript				show: 'green';				cr].	blueBlock :=			[Transcript				show: 'blue';				cr].	mainBlock :=			[Transcript clear.			redBlock value.			greenBlock value.			blueBlock value].	mainBlock value</body></methods><do-it>KSU.Example exampleK.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Example exampleL."	^[[[[[3] value + 4] value + 5] value + 6] value + 7] value</body></methods><do-it>KSU.Example exampleL.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Example exampleM."	^[[[[[^3] value + 4] value + 5] value + 6] value + 7] value</body></methods><do-it>KSU.Example exampleM.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>exampleN</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>exampleN</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Example exampleN."	(1 to: 10 by: 2)</body></methods><do-it>(1 to: 10 by: 2)</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Example exampleN."		[| aValue |	Transcript clear.	aValue := (1 to: 10) inject: 0 into: [:total :each | total + each].	Transcript		nextPutAll: aValue printString;		cr;		flush]			value</body></methods><do-it>KSU.Example exampleN.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Example exampleO."	Transcript		clear;		nextPutAll: '&lt;'.	#(111 222 333 444 555)		do: [:each | Transcript nextPutAll: each printString]		separatedBy: [Transcript space].	Transcript		nextPutAll: '&gt;';		cr;		flush</body></methods><do-it>KSU.Example exampleO.</do-it><methods><class-id>Core.Boolean</class-id> <category>controlling</category><body package="Kernel-Objects" selector="if:else:">if: trueAlternativeBlock else: falseAlternativeBlock	^self ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock</body></methods><do-it>^true if: [100] else: [200]</do-it><do-it>^false if: [100] else: [200]</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Example exampleP."	| aBlock |	aBlock :=			[:aString |			| expiredTime currentTime |			expiredTime := Time millisecondClockValue + 5000.			[(currentTime := Time millisecondClockValue) &lt; expiredTime] whileTrue: 					[Transcript						nextPutAll: aString;						nextPutAll: Time now printString;						cr;						flush.					(Delay untilMilliseconds: (currentTime + 1000 truncateTo: 1000)) wait]].	Transcript clear.	[aBlock value: 'child: '] fork.	[aBlock value: 'parent: '] value</body></methods><do-it>KSU.Example exampleP.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Example exampleQ."	| aBlock aProcess |	aBlock :=			[:aString |			| expiredTime currentTime |			expiredTime := Time millisecondClockValue + 5000.			[(currentTime := Time millisecondClockValue) &lt; expiredTime] whileTrue: 					[Transcript						nextPutAll: aString;						nextPutAll: Time now printString;						cr;						flush.					(Delay untilMilliseconds: (currentTime + 1000 truncateTo: 1000)) wait]].	Transcript clear.	aProcess := [aBlock value: 'child: '] newProcess.	aProcess resume.	[aBlock value: 'parent: '] value</body></methods><do-it>KSU.Example exampleQ.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Example exampleR."	| aBlock |	aBlock :=			[:aString |			| expiredTime currentTime |			expiredTime := Time millisecondClockValue + 5000.			[(currentTime := Time millisecondClockValue) &lt; expiredTime] whileTrue: 					[Transcript						nextPutAll: aString;						nextPutAll: Time now printString;						cr;						flush.					(Delay untilMilliseconds: (currentTime + 1000 truncateTo: 1000)) wait]].	Transcript clear.	[aBlock value: 'child: '] promise.	[aBlock value: 'parent: '] value</body></methods><do-it>KSU.Example exampleR.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Example exampleS."	| aPromise aBlock |	aPromise := nil.	aBlock :=			[:aString |			| expiredTime limitTime currentTime |			expiredTime := Time millisecondClockValue + 5000.			limitTime := expiredTime - 3000.			[(currentTime := Time millisecondClockValue) &lt; expiredTime] whileTrue: 					[currentTime &gt; limitTime ifTrue: [aPromise ifNotNil: [:it | it value: nil]].					Transcript						nextPutAll: aString;						nextPutAll: Time now printString;						cr;						flush.					(Delay untilMilliseconds: (currentTime + 1000 truncateTo: 1000)) wait]].	Transcript clear.	aPromise := [aBlock value: 'child: '] promise.	aPromise value.	[aBlock value: 'parent: '] value</body></methods><do-it>KSU.Example exampleS.</do-it><do-it>KSU.Example exampleS.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Example exampleT."	| factorial |	factorial :=			[:n :continuation |			(n isInteger not or: [n negative]) ifTrue: [^self error: 'boo!'].			n = 0				ifTrue: [continuation value: 1]				ifFalse: [factorial value: n - 1 value: [:a | continuation value: a * n]].			n halt].	factorial value: 10 value: [:a | ^a]</body></methods><do-it>KSU.Example exampleT.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Example exampleU."	| anInteger anInterval aStream aCode aTree aResult |	anInteger := 10.	anInterval := 0 to: anInteger.	aStream := String new writeStream.	aCode := 			[anInterval do: 					[:n |					| s |					s := n printString.					aStream nextPutAll: '| con' , s , ' | con' , s , ' := '.					n &lt; anInterval last						ifTrue: [aStream nextPutAll: '[:a' , s , ' | ']						ifFalse: [aStream nextPutAll: '[:a | ^a]. ']].			anInterval reverse do: 					[:n |					| s |					s := n printString.					aStream nextPutAll: 'con' , s , ' value: '.					n &gt; anInterval first						ifTrue: 							[| r |							r := (n - 1) printString.							aStream nextPutAll: 'a' , r , ' * ' , s , ']. ']						ifFalse: [aStream nextPutAll: '1']].			aStream contents]					ensure: [aStream close].	aTree := Refactory.Browser.RBParser parseExpression: aCode.	aCode := aTree formattedCode.	aResult := Compiler evaluate: aCode.	Transcript		clear;		nextPutAll: aCode;		cr;		nextPutAll: '==&gt; ';		nextPutAll: aResult printString.	^aResult</body></methods><do-it>KSU.Example exampleU.</do-it><do-it>| con0 |con0 :=		[:a0 |		| con1 |		con1 :=				[:a1 |				| con2 |				con2 :=						[:a2 |						| con3 |						con3 :=								[:a3 |								| con4 |								con4 :=										[:a4 |										| con5 |										con5 :=												[:a5 |												| con6 |												con6 :=														[:a6 |														| con7 |														con7 :=																[:a7 |																| con8 |																con8 :=																		[:a8 |																		| con9 |																		con9 :=																				[:a9 |																				| con10 |																				con10 := [:a | ^a].																				con10 value: a9 * 10].																		con9 value: a8 * 9].																con8 value: a7 * 8].														con7 value: a6 * 7].												con6 value: a5 * 6].										con5 value: a4 * 5].								con4 value: a3 * 4].						con3 value: a2 * 3].				con2 value: a1 * 2].		con1 value: a0 * 1].con0 value: 1</do-it><do-it>ObjectMemory versionId</do-it><do-it>ObjectMemory versionId</do-it><do-it>ObjectMemory versionId at: 5</do-it><do-it>ObjectMemory versionId</do-it><do-it>JunUndeclarationCheck releaseVersionOfSmalltalk.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example">example	"KSU.Example example."	"aClassのaProtocolにクラスメソッドとしてexample[0-9A-Z]の空メソッドを一気に生成する。"	| aClass aProtocol aSelector |	aClass := KSU.Example.	aProtocol := #examples.	aSelector := 'example?' copy.	((0 to: 9) collect: [:n | Character value: $0 asInteger + n])		, ((0 to: 25) collect: [:n | Character value: $A asInteger + n]) do: 				[:aCharacter |				| aStream aCode |				aSelector at: aSelector size put: aCharacter.				JunControlUtility					assert: [aStream := String new writeStream]					do: 						[aStream							nextPutAll: aSelector;							cr.						aStream							tab;							nextPutAll: '"';							nextPutAll: aClass shortName;							space;							nextPutAll: aSelector;							nextPutAll: '."'.						aCode := aStream contents]					ensure: [aStream close].				(aClass class selectors includes: aSelector)					ifFalse: [aClass class compile: aCode classified: aProtocol]].	(JunURL		named: 'http://aokilab.kyoto-su.ac.jp/documents/h-asaoka/study/TextbookAboutJun/index.html')			browse.	(JunURL		named: 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/Transformation/transformation.html')			browse.	^self</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Example example7."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Example exampleA."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Example exampleC."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Example exampleD."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleE">exampleE	"KSU.Example exampleE."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleF">exampleF	"KSU.Example exampleF."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleG">exampleG	"KSU.Example exampleG."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleH">exampleH	"KSU.Example exampleH."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleI">exampleI	"KSU.Example exampleI."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleJ">exampleJ	"KSU.Example exampleJ."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleK">exampleK	"KSU.Example exampleK."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleL">exampleL	"KSU.Example exampleL."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleM">exampleM	"KSU.Example exampleM."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleN">exampleN	"KSU.Example exampleN."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleO">exampleO	"KSU.Example exampleO."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleP">exampleP	"KSU.Example exampleP."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleQ">exampleQ	"KSU.Example exampleQ."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleR">exampleR	"KSU.Example exampleR."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleS">exampleS	"KSU.Example exampleS."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleT">exampleT	"KSU.Example exampleT."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleU">exampleU	"KSU.Example exampleU."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleV">exampleV	"KSU.Example exampleV."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleW">exampleW	"KSU.Example exampleW."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleX">exampleX	"KSU.Example exampleX."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleY">exampleY	"KSU.Example exampleY."</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleZ">exampleZ	"KSU.Example exampleZ."</body></methods><do-it>KSU.Example example.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example0</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example0</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	aBody show</body></methods><do-it>KSU.Example example0.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	aBody add: JunOpenGL3dObject benzene.	aBody show</body></methods><do-it>KSU.Example example0.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>benzene</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>benzene</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	aBody add: JunOpenGL3dObject benzene.	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 4).	aBody show</body></methods><do-it>KSU.Example example0.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	aBody add: JunOpenGL3dObject benzene.	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 5).	aBody show</body></methods><do-it>5 reciprocal</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aBody show</body></methods><do-it>KSU.Example example0.</do-it><do-it>KSU.Example example0.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody aRectangle |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aRectangle := 0 @ 0 extent: 400 @ 400.	aBody showIn: aRectangle</body></methods><do-it>KSU.Example example0.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody aRectangle |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aRectangle := 0 @ 0 extent: 400 @ 400.	aRectangle := aRectangle				translatedBy: Screen default bounds center - aRectangle center.	aBody showIn: aRectangle</body></methods><do-it>KSU.Example example0.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>center</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>center</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody aRectangle |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aRectangle := 0 @ 0 extent: 400 @ 400.	"aRectangle := aRectangle				translatedBy: Screen default bounds center - aRectangle center."	aRectangle := aRectangle align: aRectangle center				with: Screen default bounds center.	aBody showIn: aRectangle</body></methods><do-it>KSU.Example example0.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Example example0."	| aBody "aRectangle" |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	"aRectangle := 0 @ 0 extent: 400 @ 400."	"aRectangle := aRectangle				translatedBy: Screen default bounds center - aRectangle center."	"aRectangle := aRectangle align: aRectangle center				with: Screen default bounds center."	aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.</body></methods><do-it>KSU.Example example0.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aBody showIn: (400 , 400) alignedRectangleWithScreenCenter</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>alignedRectangleWithScreenCenter</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>alignedRectangleWithScreenCenter</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	^aModel</body></methods><do-it>KSU.Example example1.</do-it><do-it>self eyePoint</do-it><do-it>self eyePoint: 10, 0, 0</do-it><do-it>self upVector: 0, 0, 1</do-it><do-it>self zoomHeight</do-it><do-it>self zoomHeight: 3</do-it><do-it>self sightPoint: 0, 1, 0</do-it><do-it>self sightPoint: 0, 0, 0</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	aModel eyePoint: 10 , 0 , 0.	^aModel</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	aModel eyePoint: 10 , 0 , 0.	aModel upVector: 0 , 0 , 1.	^aModel</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	aModel eyePoint: 10 , 0 , 0.	aModel upVector: 0 , 0 , 1.	aModel zoomHeight: 3.	^aModel</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	aModel sightPoint: 0 , 0 , 0.	aModel eyePoint: 10 , 0 , 0.	aModel upVector: 0 , 0 , 1.	aModel zoomHeight: 3.	^aModel</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	aModel sightPoint: 0 , 0 , 0.	aModel eyePoint: 10 , 0 , 0.	aModel upVector: 0 , 0 , 1.	aModel zoomHeight: 3.	(3 to: 10) do: 			[:each |			aModel zoomHeight: each.			0.5 seconds wait].	^aModel</body></methods><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>degrees</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>degrees</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aLine</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aLine</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>upVector</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>upVector</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>JunAngle degrees: 30</do-it><do-it>(JunAngle degrees: 30) sin; cos; tan; yourself</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>wait</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>wait</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aTransformation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aTransformation</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aBody aModel thePoint |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (JunOpenGL3dObject benzene scaledBy: 5 reciprocal).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1).	aModel := aBody showIn: (400 , 400) alignedRectangleWithScreenCenter.	aModel sightPoint: 0 , 0 , 0.	aModel eyePoint: 10 , 0 , 0.	aModel upVector: 0 , 0 , 1.	aModel zoomHeight: 3.	3 seconds wait.	thePoint := aModel eyePoint.	(0 to: 360 by: 5) do: 			[:degrees |			| aLine aTransformation aPoint |			aLine := aModel sightPoint to: aModel sightPoint + aModel upVector.			aTransformation := Jun3dTransformation rotate: (JunAngle degrees: degrees)						around: aLine.			aPoint := thePoint transform: aTransformation.			aModel eyePoint: aPoint.			0.5 seconds wait].	^aModel</body></methods><do-it>KSU.Example example1.</do-it><do-it>	(JunURL		named: 'http://aokilab.kyoto-su.ac.jp/documents/h-asaoka/study/TextbookAboutJun/index.html')			browse.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aCompoundObject howMany aValue createBlock |	aCompoundObject := JunOpenGL3dCompoundObject new.	howMany := 10.	aValue := howMany - 1.	createBlock :=			[:aPolygon :translateBlock :colorBlock |			(0 to: aValue) do: 					[:v |					(0 to: aValue) do: 							[:u |							| aPoint aTranslatedPolygon aColorValue |							aPoint := translateBlock value: u value: v.							aTranslatedPolygon := aPolygon translatedBy: aPoint.							aColorValue := colorBlock value: u value: v.							aTranslatedPolygon paint: aColorValue.							aCompoundObject add: aTranslatedPolygon]]].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 0						with: 0 , 1 , 0						with: 1 , 1 , 0						with: 1 , 0 , 0))		value: [:u :v | u , v , 0]		value: 			[:u :v |			ColorValue				red: u / aValue				green: v / aValue				blue: 0].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 1						with: 0 , 1 , 1						with: 0 , 1 , 0						with: 0 , 0 , 0))		value: [:u :v | 0 , u , v]		value: 			[:u :v |			ColorValue				red: 0				green: u / aValue				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 0						with: 1 , 0 , 0						with: 1 , 0 , 1						with: 0 , 0 , 1))		value: [:u :v | u , 0 , v]		value: 			[:u :v |			ColorValue				red: u / aValue				green: 0				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , howMany , 1						with: 1 , howMany , 1						with: 1 , howMany , 0						with: 0 , howMany , 0))		value: [:u :v | u , 0 , v]		value: 			[:u :v |			ColorValue				red: u / aValue				green: 1				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: howMany , 0 , 0						with: howMany , 1 , 0						with: howMany , 1 , 1						with: howMany , 0 , 1))		value: [:u :v | 0 , u , v]		value: 			[:u :v |			ColorValue				red: 1				green: u / aValue				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 1 , 0 , howMany						with: 1 , 1 , howMany						with: 0 , 1 , howMany						with: 0 , 0 , howMany))		value: [:u :v | u , v , 0]		value: 			[:u :v |			ColorValue				red: u / aValue				green: v / aValue				blue: 1].	aCompoundObject show.	^aCompoundObject</body></methods><do-it>KSU.Example example2.</do-it><do-it>KSU.Example example2.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Example example2."	| aCompoundObject howMany aValue createBlock |	aCompoundObject := JunOpenGL3dCompoundObject new.	howMany := 100.	aValue := howMany - 1.	createBlock :=			[:aPolygon :translateBlock :colorBlock |			(0 to: aValue) do: 					[:v |					(0 to: aValue) do: 							[:u |							| aPoint aTranslatedPolygon aColorValue |							aPoint := translateBlock value: u value: v.							aTranslatedPolygon := aPolygon translatedBy: aPoint.							aColorValue := colorBlock value: u value: v.							aTranslatedPolygon paint: aColorValue.							aCompoundObject add: aTranslatedPolygon]]].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 0						with: 0 , 1 , 0						with: 1 , 1 , 0						with: 1 , 0 , 0))		value: [:u :v | u , v , 0]		value: 			[:u :v |			ColorValue				red: u / aValue				green: v / aValue				blue: 0].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 1						with: 0 , 1 , 1						with: 0 , 1 , 0						with: 0 , 0 , 0))		value: [:u :v | 0 , u , v]		value: 			[:u :v |			ColorValue				red: 0				green: u / aValue				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 0						with: 1 , 0 , 0						with: 1 , 0 , 1						with: 0 , 0 , 1))		value: [:u :v | u , 0 , v]		value: 			[:u :v |			ColorValue				red: u / aValue				green: 0				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 0 , howMany , 1						with: 1 , howMany , 1						with: 1 , howMany , 0						with: 0 , howMany , 0))		value: [:u :v | u , 0 , v]		value: 			[:u :v |			ColorValue				red: u / aValue				green: 1				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: howMany , 0 , 0						with: howMany , 1 , 0						with: howMany , 1 , 1						with: howMany , 0 , 1))		value: [:u :v | 0 , u , v]		value: 			[:u :v |			ColorValue				red: 1				green: u / aValue				blue: v / aValue].	createBlock		value: (JunOpenGL3dPolygon vertexes: (Array						with: 1 , 0 , howMany						with: 1 , 1 , howMany						with: 0 , 1 , howMany						with: 0 , 0 , howMany))		value: [:u :v | u , v , 0]		value: 			[:u :v |			ColorValue				red: u / aValue				green: v / aValue				blue: 1].	aCompoundObject show.	^aCompoundObject</body></methods><do-it>KSU.Example example2.</do-it><do-it>self displayObject </do-it><do-it>self displayObject numberOfPolygons</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Example example3."	| aCompoundObject |	aCompoundObject := JunOpenGL3dCompoundObject new.	aCompoundObject add: JunOpenGL3dObject plateBMWC.	aCompoundObject add: JunOpenGL3dObject plateGCWY.	aCompoundObject add: JunOpenGL3dObject plateKBCG.	aCompoundObject add: JunOpenGL3dObject plateKGYR.	aCompoundObject add: JunOpenGL3dObject plateKRMB.	aCompoundObject add: JunOpenGL3dObject plateRYWM.	aCompoundObject show.	^aCompoundObject</body></methods><do-it>KSU.Example example3.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aPolygon |	aPolygon := JunOpenGL3dObject plateVertexes: (Array						with: 0 , 0 , 1						with: 1 , 0 , 1						with: 1 , 1 , 1						with: 0 , 1 , 1)				textureImage: JunOpenGL3dObject imageBMWC.	aPolygon show.	^aPolygon</body></methods><do-it>KSU.Example example4.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>show</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>show</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Example example4."	| aPolygon aModel |	aPolygon := JunOpenGL3dObject plateVertexes: (Array						with: 0 , 0 , 1						with: 1 , 0 , 1						with: 1 , 1 , 1						with: 0 , 1 , 1)				textureImage: JunOpenGL3dObject imageBMWC.	aModel := aPolygon show.	aModel displayLightsAllOff.	^aPolygon</body></methods><do-it>KSU.Example example4.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Example example5."	JunImageStream show: JunOpenGL3dObject imageBMWC</body></methods><do-it>KSU.Example example5.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Example example6."	| anImage aTexture aPolygon aCompoundObject |	anImage := JunOpenGL3dObject imageKGYR rotatedByQuadrants: 2.	aTexture := JunOpenGLTexture image: anImage.	aTexture coordinates: (Array				with: 1 , 0				with: 1 , 1				with: 0 , 1				with: 0 , 0).	aPolygon := JunOpenGL3dPolygon vertexes: (Array						with: 0 , 0 , 0						with: 0 , 1 , 0						with: 1 , 1 , 0						with: 1 , 0 , 0).	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	aCompoundObject := JunOpenGL3dCompoundObject new.	aCompoundObject add: aPolygon.	aCompoundObject add: (JunOpenGL3dObject axes scaledBy: 1.5).	JunOpenGLDisplayModel		show: aCompoundObject		eyePoint: 10 , 4 , -3		sightPoint: 0 , 0 , 0		upVector: 0 , 1 , 0.	^aCompoundObject</body></methods><do-it>KSU.Example example6.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example7</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example7</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>KSU.Example example7.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example7">example7	"KSU.Example example7."	JunOpenGL3dObject earth show</body></methods><do-it>KSU.Example example7.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."	| anImage aWindow aTexture aPolygon aCompoundObject |	anImage := JunOpenGLTexture imageSmalltalkBalloon.	aWindow := JunImageStream show: anImage.	aTexture := JunOpenGLTexture image: anImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 0.5 , 1).	aPolygon := JunOpenGL3dPolygon vertexes: (Array						with: 1 , 0 , 0						with: 0 , 1 , 0						with: 0 , 0 , 1).	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	aCompoundObject := JunOpenGL3dCompoundObject new.	aCompoundObject add: aPolygon.	aCompoundObject add: (JunOpenGL3dObject axes scaledBy: 1.5).	aCompoundObject showAt: aWindow displayBox topRight + (10 @ 0).	^aCompoundObject</body></methods><do-it>JunOpenGLTexture imageSmalltalkBalloon</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example8">example8	"KSU.Example example8."	| anImage aWindow aTexture aPolygon aCompoundObject |	anImage := JunOpenGLTexture imageSmalltalkBalloon.	aWindow := (JunImageStream show: anImage) getWindow.	aTexture := JunOpenGLTexture image: anImage.	aTexture coordinates: (Array				with: 0 , 0				with: 1 , 0				with: 0.5 , 1).	aPolygon := JunOpenGL3dPolygon vertexes: (Array						with: 1 , 0 , 0						with: 0 , 1 , 0						with: 0 , 0 , 1).	aPolygon paint: ColorValue white.	aPolygon texture: aTexture.	aCompoundObject := JunOpenGL3dCompoundObject new.	aCompoundObject add: aPolygon.	aCompoundObject add: (JunOpenGL3dObject axes scaledBy: 1.5).	aCompoundObject showAt: aWindow displayBox topRight + (10 @ 0).	^aCompoundObject</body></methods><do-it>KSU.Example example8.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example9">example9	"KSU.Example example9."	| anImage aWindow aCompoundObject aModel aTexture aPolygon |	anImage := JunOpenGLTexture imageSmalltalkBalloon.	aWindow := (JunImageStream show: anImage) getWindow.	aCompoundObject := JunOpenGL3dCompoundObject new.	aCompoundObject add: (JunOpenGL3dObject axes scaledBy: 1.5).	aModel := aCompoundObject showAt: aWindow displayBox topRight + (10 @ 0).	(0.5 to: 1 by: 0.05) , (1 to: 0 by: -0.05) , (0 to: 0.5 by: 0.05) do: 			[:n |			aTexture := JunOpenGLTexture image: anImage.			aTexture coordinates: (Array						with: 0 , 0						with: 1 , 0						with: n , 1).			aPolygon := JunOpenGL3dPolygon vertexes: (Array								with: 1 , 0 , 0								with: 0 , 1 , 0								with: 0 , 0 , 1).			aPolygon paint: ColorValue white.			aPolygon texture: aTexture.			aCompoundObject := JunOpenGL3dCompoundObject new.			aCompoundObject add: aPolygon.			aCompoundObject add: (JunOpenGL3dObject axes scaledBy: 1.5).			aModel displayObject: aCompoundObject.			aModel changed: #object.			aModel displayPendingInvalidation.			(Delay forMilliseconds: 500) wait].	^aCompoundObject</body></methods><do-it>KSU.Example example9.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleA">exampleA	"KSU.Example exampleA."	JunOpenGL3dObject colorCone show</body></methods><do-it>KSU.Example exampleA.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>anImage</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>anImage</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cube</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cube</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube.	</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube.	aBody show.</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube.	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleB.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleB.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: (1 , anImage height) / anImage width , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleB.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: 1 , (anImage height / anImage width) , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleB.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleB">exampleB	"KSU.Example exampleB."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: 1 , (anImage width / anImage height) , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleB.</do-it><do-it>KSU.Example exampleB.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Example exampleC."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://aokilab.kyoto-su.ac.jp/thumbnails/20141008.jpg'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: 1 , (anImage width / anImage height) , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleC.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>width</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>width</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleC">exampleC	"KSU.Example exampleC."	| aString aURL aFilename anImage aTexture aBody |	aString := 'http://aokilab.kyoto-su.ac.jp/thumbnails/20141008.jpg'.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: 1 , (anImage height / anImage width) reciprocal , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleC.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Example exampleD."	| aString aURL aFilename anImage aTexture aBody |	aString := ''.	aURL := JunURL named: aString.	aURL exists ifFalse: [^nil].	aFilename := Filename defaultDirectory construct: aURL asURI tail.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	anImage := JunImageUtility fromFile: aFilename.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: 1 , (anImage height / anImage width) reciprocal , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="exampleD">exampleD	"KSU.Example exampleD."	| anImage aTexture aBody |	anImage := Image fromUser.	aTexture := JunOpenGLTexture image: anImage.	aBody := JunOpenGL3dObject cube				scaledBy: 1 , (anImage height / anImage width) reciprocal , 1.	aBody polygonsDo: [:each | each paint: ColorValue white].	aBody texture: aTexture.	aBody show</body></methods><do-it>KSU.Example exampleD.</do-it><do-it>RadiansPerDegree</do-it><do-it>(JunPlane xy) asJunOpenGL3dObject show.</do-it><do-it>(JunOpenGL3dCompoundObject 		with: JunPlane xy asJunOpenGL3dObject		with: JunPlane yz asJunOpenGL3dObject		with: JunPlane zx asJunOpenGL3dObject		with: JunOpenGL3dObject xyzArrows) show.</do-it><do-it>Jun3dTransformation lessonRotation1.</do-it><do-it>1+(5 sqrt)/2</do-it><do-it>1.0d+(5.0d sqrt)/2.0d</do-it><do-it>((JunOpenGL3dObject from: 0 , 0 , 0 to: 3 , 4 , 5 with: (JunOpenGL3dObject box)) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show.</do-it><do-it>((JunOpenGL3dObject from: 1 , 1 , 1 to: 0 , 1 , 0 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show.</do-it><do-it>(((JunOpenGL3dObject xUnitCone)		paint: ColorValue pink;		asCompoundObject)		add: JunOpenGL3dObject axes2;		show) wireframePresentation.</do-it><do-it>(JunOpenGL3dObject cone) show.</do-it><do-it>((JunOpenGL3dObject 		coneFrom: 0 , 0 , 0		to: 3 , 4 , 5		width: 0.1)		paint: ColorValue cyan;		asCompoundObject)		add: JunOpenGL3dObject axes2;		show.</do-it><do-it>(JunOpenGL3dObject coneFrom: -1, -1, 0 to: 1, 1, 0 radius: 1 by: 45) showWithAxes.</do-it><do-it>192 printStringRadix: 2</do-it><do-it>255 printStringRadix: 2</do-it><do-it>(192 bitAnd: 255) printStringRadix: 2</do-it><do-it>(0 , 0 , 0 to: 1 , 1 , 1) nearestPointFromPoint: -1 , 1 , 1.</do-it><do-it>(0 , 0 , 0 to: 1 , 1 , 1) nearestPointFromPoint: -1 , 1 , 1.</do-it><do-it>(1, 1, 1) vectorProduct: (-1, -1, -1)</do-it><do-it>(1, 0, 0) vectorProduct: (-1, 0, 0)</do-it><do-it>(1, 0, 0) vectorProduct: (0, 1, 0)</do-it><do-it>((1, 0, 0) to: (0, 1, 0)) translatedBy: (1, 0, 0)</do-it><do-it>((-2 , -2 , 0) plane: (0 , 2 , 0) and: (2 , 0 , 0)) valueF: (0 , 0 , 2).</do-it><do-it>(JunPlane on: (-2 , -2 , 0) on: (0 , 2 , 0) on: (2 , 0 , 0)) whichSide: (0 , 0 , 2).</do-it><do-it>JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1)</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.aPoint := aPlane intersectingPointWithLine: aLine.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 0, 1, 0.aPoint := aPlane intersectingPointWithLine: aLine.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 0, 0, 1.aPoint := aPlane intersectingPointWithLine: aLine.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.aPoint := aPlane intersectingPointWithLine: aLine.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.^aLine</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.aPoint := aPlane intersectingPointWithLine: aLine.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.Transcript cr; show: aPoint printString.^aPoint</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>negated</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>negated</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Jun.JunPlane</class-id> <category>functions</category><body package="Jun" selector="intersectingPointWithLine:">intersectingPointWithLine: aLine 	"(-2 , -2 , 0 plane: 0 , 2 , 0 and: 2 , 0 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , 2)."	"(0 , 0 , 0 plane: 1 , 0 , 0 and: 0 , 1 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , -1)."	| theLine denominator thePoint numerator |	(aLine isKindOf: Jun3dLine) 		ifTrue: [theLine := aLine]		ifFalse: [theLine := Jun3dLine from: aLine first to: aLine last].	denominator := a * theLine f + (b * theLine g) + (c * theLine h).	denominator abs &lt; aLine class accuracy 		ifTrue: 			["parallel"			^nil].	numerator := (a * theLine x0 + (b * theLine y0) + (c * theLine z0) + d) 				negated.	Transcript cr; show: numerator printString.	thePoint := Jun3dPoint 				x: theLine x0 + (theLine f * numerator / denominator)				y: theLine y0 + (theLine g * numerator / denominator)				z: theLine z0 + (theLine h * numerator / denominator).	^thePoint</body></methods><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.Transcript cr; show: aPoint printString.^aPoint</do-it><methods><class-id>Jun.JunPlane</class-id> <category>functions</category><body package="Jun" selector="intersectingPointWithLine:">intersectingPointWithLine: aLine 	"(-2 , -2 , 0 plane: 0 , 2 , 0 and: 2 , 0 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , 2)."	"(0 , 0 , 0 plane: 1 , 0 , 0 and: 0 , 1 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , -1)."	| theLine denominator thePoint numerator |	(aLine isKindOf: Jun3dLine) 		ifTrue: [theLine := aLine]		ifFalse: [theLine := Jun3dLine from: aLine first to: aLine last].	denominator := a * theLine f + (b * theLine g) + (c * theLine h).	denominator abs &lt; aLine class accuracy 		ifTrue: 			["parallel"			^nil].	numerator := (a * theLine x0 + (b * theLine y0) + (c * theLine z0) + d) 				negated.	Transcript cr; show: numerator printString.	Transcript cr; show: denominator printString.	thePoint := Jun3dPoint 				x: theLine x0 + (theLine f * numerator / denominator)				y: theLine y0 + (theLine g * numerator / denominator)				z: theLine z0 + (theLine h * numerator / denominator).	^thePoint</body></methods><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.Transcript cr; show: aPoint printString.^aPoint</do-it><methods><class-id>Jun.JunPlane</class-id> <category>functions</category><body package="Jun" selector="intersectingPointWithLine:">intersectingPointWithLine: aLine 	"(-2 , -2 , 0 plane: 0 , 2 , 0 and: 2 , 0 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , 2)."	"(0 , 0 , 0 plane: 1 , 0 , 0 and: 0 , 1 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , -1)."	| theLine denominator thePoint numerator |	(aLine isKindOf: Jun3dLine) 		ifTrue: [theLine := aLine]		ifFalse: [theLine := Jun3dLine from: aLine first to: aLine last].	denominator := a * theLine f + (b * theLine g) + (c * theLine h).	denominator abs &lt; aLine class accuracy 		ifTrue: 			["parallel"			^nil].	numerator := (a * theLine x0 + (b * theLine y0) + (c * theLine z0) + d) 				negated.	Transcript cr; show: numerator printString.	Transcript cr; show: denominator printString.	Transcript cr; show: (theLine x0 + (theLine f * numerator / denominator)) printString.	thePoint := Jun3dPoint 				x: theLine x0 + (theLine f * numerator / denominator)				y: theLine y0 + (theLine g * numerator / denominator)				z: theLine z0 + (theLine h * numerator / denominator).	^thePoint</body></methods><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.Transcript cr; show: aPoint printString.^aPoint</do-it><methods><class-id>Jun.JunPlane</class-id> <category>functions</category><body package="Jun" selector="intersectingPointWithLine:">intersectingPointWithLine: aLine 	"(-2 , -2 , 0 plane: 0 , 2 , 0 and: 2 , 0 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , 2)."	"(0 , 0 , 0 plane: 1 , 0 , 0 and: 0 , 1 , 0) 		intersectingPointWithLine: (0 , 0 , -2 to: 0 , 0 , -1)."	| theLine denominator thePoint numerator |	(aLine isKindOf: Jun3dLine) 		ifTrue: [theLine := aLine]		ifFalse: [theLine := Jun3dLine from: aLine first to: aLine last].	denominator := a * theLine f + (b * theLine g) + (c * theLine h).	denominator abs &lt; aLine class accuracy 		ifTrue: 			["parallel"			^nil].	numerator := (a * theLine x0 + (b * theLine y0) + (c * theLine z0) + d) 				negated.	thePoint := Jun3dPoint 				x: theLine x0 + (theLine f * numerator / denominator)				y: theLine y0 + (theLine g * numerator / denominator)				z: theLine z0 + (theLine h * numerator / denominator).	^thePoint</body></methods><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.Transcript cr; show: aPoint printString.^aPoint</do-it><do-it>aPlane := JunPlane on: 0, 0, 0 vertical: (-1, -1, -1 to: 1, 1, 1).aLine := (-1, -1, -1 to: 1, 1, 1) translatedBy: 1, 0, 0.Transcript cr; show: aLine printString.aPoint := aPlane intersectingPointWithLine: aLine.Transcript cr; show: aPoint printString.^aPoint</do-it><do-it>self value: 123</do-it><do-it>self value: 123.0</do-it><do-it>self value: 2.0d sqrt</do-it><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2013 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-property><name>KSU-Example</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2013 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2013 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="download_dragon_txt">download_dragon_txt	"KSU.Example download_dragon_txt."	| aString aURL aFilename |	aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/Dragon/dragon.txt'.	aURL := JunURL named: aString.	aURL exists		ifFalse: [^self error: aURL asString printString , ' does not exist.'].	aFilename := aURL asURI tail asFilename.	aFilename exists ifTrue: [^aFilename].	aURL downloadTo: aFilename.	aFilename exists		ifFalse: [^self error: aFilename asString printString , ' does not exist.'].	^aFilename</body></methods><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| getTokens aStream aDragon aModel |	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := self download_dragon_txt readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.	"ストリームから1行を読み込んでトークン(文字列)に分解する。"					firstString := aCollection at: 1.	"1番目のトークン(文字列)を取り出す。"					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := 0	"2番目のトークン(文字列)、すなわち、頂点数を表している文字列を数値に変換する。"].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := 0	"2番目のトークン(文字列)、すなわち、三角形数を表している文字列を数値に変換する。"].					firstString = 'end_header'						ifTrue: 							[| collectionOfVertexes |							collectionOfVertexes := nil.	"頂点群を蓄えるための空のリストを生成する。"							numberOfVertexes timesRepeat: 									[aCollection := getTokens value: aStream.	"ストリームから1行を読み込んでトークン(文字列)に分解する。"									"読み込んだx座標とy座標とz座標を表している文字列群を数値群に変換(写像)する。"									collectionOfVertexes yourself	"x座標とy座標とz座標から座標のインスタンスを生成して頂点群リストに追加する。"].							aDragon := nil.	"ドラゴンの三角形群を蓄えるための空の立体を生成する。"							"ドラゴンの色(ロイヤルブルー)を設定する。"							numberOfTriangles timesRepeat: 									[aCollection := getTokens value: aStream.	"ストリームから1行を読み込んでトークン(文字列)に分解する。"									"読み込んだ第1頂点と第2頂点と第3頂点を表している頂点インデックスの文字列群を数値群に変換(写像)する。"									"頂点インデックス群を頂点群に変換(写像)する。"									aDragon yourself	"第1頂点と第2頂点と第3頂点から多角形のインスタンスを生成してドラゴンの三角形群に追加する。"]]]]		ensure: 			[aStream close.			Cursor normal show].	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	^aDragon</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/Dragon/dragon.st';	add: #comment: -&gt; 'Copyright 2008-2013 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Example';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Example';	add: #class: -&gt; #{KSU.Example};	add: #protocol: -&gt; #dragon;	add: #selector: -&gt; #dragon;	add: #execute: -&gt; [#{KSU.Example} value dragon];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| getTokens aStream aDragon aModel |	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := self download_dragon_txt readStream]		do: []		ensure: 			[aStream close.			Cursor normal show].	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	^aDragon</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dragon</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dragon</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := self download_dragon_txt readStream]		do: []		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: [[aStream atEnd not] whileTrue: [getTokens value: aStream]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aStream</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aStream</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[[aStream atEnd not] whileTrue: 					[| aCollection |					aCollection := getTokens value: aStream.					Transcript cr; show: aCollection printString]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					Transcript cr; show: firstString printString.					aStream setToEnd]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[Transcript								cr;								show: firstString printString.							aStream setToEnd]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[numberOfVertexes := aCollection at: 2.							Transcript								cr;								show: numberOfVertexes printString.							aStream setToEnd]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[numberOfVertexes := (aCollection at: 2) asNumber.							Transcript								cr;								show: numberOfVertexes printString.							aStream setToEnd]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[numberOfVertexes := (aCollection at: 2) asNumber.							Transcript								cr;								show: numberOfVertexes printString].					firstString = 'number_of_triangles'						ifTrue: 							[numberOfTriangles := (aCollection at: 2) asNumber.							Transcript								cr;								show: numberOfTriangles printString].					firstString = 'end_header' ifTrue: [aStream setToEnd]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[numberOfVertexes := (aCollection at: 2) asNumber.							Transcript								cr;								show: numberOfVertexes printString].					firstString = 'number_of_triangles'						ifTrue: 							[numberOfTriangles := (aCollection at: 2) asNumber.							Transcript								cr;								show: numberOfTriangles printString].					firstString = 'end_header'						ifTrue: 							[numberOfVertexes timesRepeat: [aCollection := getTokens value: aStream].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[numberOfVertexes timesRepeat: [aCollection := getTokens value: aStream].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[numberOfVertexes timesRepeat: 									[aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									self halt].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[numberOfVertexes timesRepeat: 									[| aPoint |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3)].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aPoint</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aPoint</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aVertex</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aVertex</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[numberOfVertexes timesRepeat: 									[| aPoint aVertex |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3).									aVertex := JunOpenGL3dVertex point: aPoint.									aDragon add: aVertex.									aModel changed: #object].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[numberOfVertexes timesRepeat: 									[| aPoint aVertex |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3).									aVertex := JunOpenGL3dVertex point: aPoint.									aVertex size: 3.									aDragon add: aVertex.									aModel changed: #object].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[| collectionOfPoints |							collectionOfPoints := List new: numberOfVertexes.							numberOfVertexes timesRepeat: 									[| aPoint aVertex |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3).									collectionOfPoints add: aPoint.									aVertex := JunOpenGL3dVertex point: aPoint.									aVertex size: 3.									aDragon add: aVertex.									aModel changed: #object].							numberOfTriangles timesRepeat: [aCollection := getTokens value: aStream]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: [numberOfVertexes := (aCollection at: 2) asNumber].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[| collectionOfPoints |							collectionOfPoints := List new: numberOfVertexes.							numberOfVertexes timesRepeat: 									[| aPoint aVertex |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3).									collectionOfPoints add: aPoint.									aVertex := JunOpenGL3dVertex point: aPoint.									aVertex size: 3.									aDragon add: aVertex.									aModel changed: #object].							numberOfTriangles timesRepeat: 									[| aPolygon |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aCollection := aCollection												collect: [:index | collectionOfPoints at: index].									aPolygon := JunOpenGL3dPolygon vertexes: aCollection.									aDragon add: aPolygon.									aModel changed: #object]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>KSU.Example dragon.</do-it><do-it>JunTextDifference example2.</do-it><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[numberOfVertexes := (aCollection at: 2) asNumber.														[| aText |							aText := JunOpenGL3dObject text: numberOfVertexes printString.							aDragon add: aText.							aModel changed: #object]									value.							self halt].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[| collectionOfPoints |							collectionOfPoints := List new: numberOfVertexes.							numberOfVertexes timesRepeat: 									[| aPoint aVertex |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3).									collectionOfPoints add: aPoint.									aVertex := JunOpenGL3dVertex point: aPoint.									aVertex size: 3.									aDragon add: aVertex.									aModel changed: #object].							numberOfTriangles timesRepeat: 									[| aPolygon |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aCollection := aCollection												collect: [:index | collectionOfPoints at: index].									aPolygon := JunOpenGL3dPolygon vertexes: aCollection.									aDragon add: aPolygon.									aModel changed: #object]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><methods><class-id>KSU.Example class</class-id> <category>dragon</category><body package="KSU-Example" selector="dragon">dragon	"KSU.Example dragon."	| aDragon aModel getTokens aStream |	aDragon := JunOpenGL3dCompoundObject new.	aDragon paint: ColorValue royalBlue.	aModel := JunOpenGLDisplayModel displayObject: aDragon.	aModel defaultProjectionTable: ((Core.Dictionary new)				add: #eyePoint -&gt; (-5.5852450791872d , 3.07847342734d , 15.794105252496d);				add: #sightPoint							-&gt; (0.27455347776413d , 0.20096999406815d , -0.11261999607086d);				add: #upVector							-&gt; (0.1018574904194d , 0.98480906061847d , -0.14062775604137d);				add: #zoomHeight -&gt; 3.7341890032668d;				add: #projection -&gt; #perspectiveProjection;				add: #presentation -&gt; #hiddenlinePresentation;				add: #shading -&gt; #smoothShading;				add: #viewFactor -&gt; 10;				yourself).	aModel windowLabel: 'Dragon'.	aModel open.	getTokens := [:stream | JunStringUtility separate: (JunStringUtility getLine: stream)].	JunControlUtility		assert: 			[Cursor read show.			aStream := (self download_dragon_txt withEncoding: #UTF_8) readStream]		do: 			[| numberOfVertexes numberOfTriangles |			[aStream atEnd not] whileTrue: 					[| aCollection firstString |					aCollection := getTokens value: aStream.					firstString := aCollection at: 1.					firstString = 'number_of_vertexes'						ifTrue: 							[numberOfVertexes := (aCollection at: 2) asNumber.														[| aText |							aText := JunOpenGL3dObject text: numberOfVertexes printString.							aText paint: ColorValue red.							aDragon add: aText.							aModel changed: #object]									value.							self halt].					firstString = 'number_of_triangles'						ifTrue: [numberOfTriangles := (aCollection at: 2) asNumber].					firstString = 'end_header'						ifTrue: 							[| collectionOfPoints |							collectionOfPoints := List new: numberOfVertexes.							numberOfVertexes timesRepeat: 									[| aPoint aVertex |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aPoint := Jun3dPoint												x: (aCollection at: 1)												y: (aCollection at: 2)												z: (aCollection at: 3).									collectionOfPoints add: aPoint.									aVertex := JunOpenGL3dVertex point: aPoint.									aVertex size: 3.									aDragon add: aVertex.									aModel changed: #object].							numberOfTriangles timesRepeat: 									[| aPolygon |									aCollection := getTokens value: aStream.									aCollection := aCollection collect: [:each | each asNumber].									aCollection := aCollection												collect: [:index | collectionOfPoints at: index].									aPolygon := JunOpenGL3dPolygon vertexes: aCollection.									aDragon add: aPolygon.									aModel changed: #object]]]]		ensure: 			[aStream close.			Cursor normal show].	^aDragon</body></methods><do-it>JunTextDifference example3.</do-it><do-it>JunTextDifference example4.</do-it><do-it>16 sqrt</do-it><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2012 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-property><name>KSU-Example</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2012 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>Midi</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Example</package></attributes></class><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example0">example0	"KSU.Midi example0."	| aMidi |	aMidi := KSU.Midi new.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Midi example1."	| aMidi |	aMidi := KSU.Midi new.	aMidi note: 'C4' length: 1.	aMidi note: 'E4' length: 1.	aMidi note: 'G4' length: 1.	aMidi notes: #('C4' 'E4' 'G4') length: 3.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example2">example2	"KSU.Midi example2."	| aMidi |	aMidi := KSU.Midi new.	aMidi tone: 'Harmonica'.	aMidi note: 'C4' length: 1.	aMidi note: 'E4' length: 1.	aMidi note: 'G4' length: 1.	aMidi notes: #('C4' 'E4' 'G4') length: 3.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example3">example3	"KSU.Midi example3."	| aMidi |	aMidi := KSU.Midi new.	aMidi tone: 'Oboe'.	aMidi note: 'C4' length: 1 volume: 1.	aMidi note: 'E4' length: 1 volume: 0.75.	aMidi note: 'G4' length: 1 volume: 0.5.	aMidi		notes: #('C4' 'E4' 'G4')		lengths: #(1 2 3)		volumes: #(1 0.75 0.5).	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example4">example4	"KSU.Midi example4."	| aMidi |	aMidi := KSU.Midi new.	aMidi tone: 'Oboe' channel: 0.	aMidi tone: 'Harmonica' channel: 1.	aMidi tone: 'Church organ' channel: 2.	aMidi note: 'C4' length: 1 channel: 0.	aMidi note: 'E4' length: 1 channel: 1.	aMidi note: 'G4' length: 1 channel: 2.	aMidi		notes: #('C4' 'E4' 'G4')		length: 3		channels: #(0 1 2).	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example5">example5	"KSU.Midi example5."	| aMidi |	aMidi := KSU.Midi new.	aMidi notes: #('E4' 'G4' 'C5') length: 2.	aMidi notes: #('D4' 'F4' 'B4') length: 2.	aMidi notes: #('E4' 'G4' 'C5') length: 2.	2 seconds wait.	aMidi notes: #('C3' 'G3' 'E4' 'G4' 'C5') length: 2.	aMidi notes: #('G3' 'D4' 'F4' 'G4' 'B4') length: 2.	aMidi notes: #('C3' 'G3' 'E4' 'G4' 'C5') length: 2.	2 seconds wait.	aMidi notes: #('C3' 'G3' 'C4' 'E4' 'G4' 'C5') length: 2.	aMidi notes: #('G2' 'G3' 'D4' 'F4' 'G4' 'B4') length: 2.	aMidi notes: #('C3' 'G3' 'C4' 'E4' 'G4' 'C5') length: 2.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="example6">example6	"KSU.Midi example6."	| aMidi |	aMidi := KSU.Midi new.	aMidi tone: 'Electric Piano'.	aMidi yourself.	aMidi note: 'C4' length: 0.6.	aMidi note: 'C4' length: 0.6.	aMidi note: 'G4' length: 0.6.	aMidi note: 'G4' length: 0.6.	aMidi note: 'A4' length: 0.6.	aMidi note: 'A4' length: 0.6.	aMidi note: 'G4' length: 1.2.	aMidi yourself.	aMidi note: 'F4' length: 0.6.	aMidi note: 'F4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'D4' length: 0.6.	aMidi note: 'D4' length: 0.6.	aMidi note: 'C4' length: 0.6.	aMidi note: nil length: 0.6.	aMidi yourself.	aMidi note: 'G4' length: 0.6.	aMidi note: 'G4' length: 0.6.	aMidi note: 'F4' length: 0.6.	aMidi note: 'F4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'D4' length: 1.2.	aMidi yourself.	aMidi note: 'G4' length: 0.6.	aMidi note: 'G4' length: 0.6.	aMidi note: 'F4' length: 0.6.	aMidi note: 'F4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'D4' length: 0.6.	aMidi note: nil length: 0.6.	aMidi yourself.	aMidi note: 'C4' length: 0.6.	aMidi note: 'C4' length: 0.6.	aMidi note: 'G4' length: 0.6.	aMidi note: 'G4' length: 0.6.	aMidi note: 'A4' length: 0.6.	aMidi note: 'A4' length: 0.6.	aMidi note: 'G4' length: 1.2.	aMidi yourself.	aMidi note: 'F4' length: 0.6.	aMidi note: 'F4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'E4' length: 0.6.	aMidi note: 'D4' length: 0.6.	aMidi note: 'D4' length: 0.6.	aMidi note: 'C4' length: 0.6.	aMidi note: nil length: 0.6.	aMidi yourself.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="playKaeruNoUta">playKaeruNoUta	"KSU.Midi playKaeruNoUta."	| aSequence aMidi |	aSequence := OrderedCollection new.	"..."	aMidi := KSU.Midi new.	aMidi tone: 'Oboe'.	aSequence do: 			[:anArray |			| aNote aLength |			aNote := anArray first.			aLength := anArray last.			aMidi note: aNote length: aLength].	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="playKaeruNoUtaRinshou">playKaeruNoUtaRinshou	"KSU.Midi playKaeruNoUtaRinshou."	| aCollection aSequence aMidi |	aCollection := Array				with: 'Electric Piano 2' -&gt; 0				with: 'Koto' -&gt; 1				with: 'Taiko Drum' -&gt; 2				with: 'Synth Voice' -&gt; 3.	aSequence := OrderedCollection new.	"..."	aMidi := KSU.Midi new.	aCollection do: 			[:anAssociation |			| aTone aChannel |			aTone := anAssociation key.			aChannel := anAssociation value.			aMidi tone: aTone channel: aChannel].	aSequence do: 			[:anArray |			| noteCollection lengthCollection channelCollection |			noteCollection := anArray at: 1.			lengthCollection := anArray at: 2.			channelCollection := anArray at: 3.			aMidi notes: noteCollection lengths: lengthCollection channels: channelCollection].	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="playKaeruNoUtaRinshouByMultiThread">playKaeruNoUtaRinshouByMultiThread	"KSU.Midi playKaeruNoUtaRinshouByMultiThread."	| aCollection aSequence aMidi aClosure |	aCollection := Array				with: 'Electric Piano 2' -&gt; 0				with: 'Koto' -&gt; 1				with: 'Taiko Drum' -&gt; 2				with: 'Synth Voice' -&gt; 3.	aSequence := OrderedCollection new.	"..."	aMidi := KSU.Midi new.	aClosure :=			[| aClock |			aClock := Time microsecondClock.			aCollection with: (1 to: aCollection size)				do: 					[:anAssociation :anIndex |					| aTone aChannel aBlock |					aTone := anAssociation key.					aChannel := anAssociation value.					aMidi tone: aTone channel: aChannel.					aBlock :=							[aSequence do: 									[:anArray |									| aNote aLength |									aNote := anArray first.									aLength := anArray last.									aMidi note: aNote length: aLength channel: aChannel]].					aBlock fork.					(Delay untilMicroseconds: aClock + (4 seconds asMicroseconds * anIndex)) wait]].	aClosure fork.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="playKiraKiraBoshi">playKiraKiraBoshi	"KSU.Midi playKiraKiraBoshi."	| aSequence aMidi |	aSequence := OrderedCollection new.	aSequence		add: #('C4' 0.6);		add: #('C4' 0.6);		add: #('G4' 0.6);		add: #('G4' 0.6);		add: #('A4' 0.6);		add: #('A4' 0.6);		add: #('G4' 1.2).	aSequence		add: #('F4' 0.6);		add: #('F4' 0.6);		add: #('E4' 0.6);		add: #('E4' 0.6);		add: #('D4' 0.6);		add: #('D4' 0.6);		add: #('C4' 0.6);		add: #(nil 0.6).	aSequence		add: #('G4' 0.6);		add: #('G4' 0.6);		add: #('F4' 0.6);		add: #('F4' 0.6);		add: #('E4' 0.6);		add: #('E4' 0.6);		add: #('D4' 1.2).	aSequence		add: #('G4' 0.6);		add: #('G4' 0.6);		add: #('F4' 0.6);		add: #('F4' 0.6);		add: #('E4' 0.6);		add: #('E4' 0.6);		add: #('D4' 0.6);		add: #(nil 0.6).	aSequence		add: #('C4' 0.6);		add: #('C4' 0.6);		add: #('G4' 0.6);		add: #('G4' 0.6);		add: #('A4' 0.6);		add: #('A4' 0.6);		add: #('G4' 1.2).	aSequence		add: #('F4' 0.6);		add: #('F4' 0.6);		add: #('E4' 0.6);		add: #('E4' 0.6);		add: #('D4' 0.6);		add: #('D4' 0.6);		add: #('C4' 0.6);		add: #(nil 0.6).	aMidi := KSU.Midi new.	aMidi tone: 'Electric Piano'.	aSequence do: 			[:anArray |			| aNote aLength |			aNote := anArray first.			aLength := anArray last.			aMidi note: aNote length: aLength].	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>examples</category><body package="KSU-Example" selector="playMozartTurkeyMarch">playMozartTurkeyMarch	"KSU.Midi playMozartTurkeyMarch."	| aMidi aProtocol aServer aPath |	aMidi := KSU.Midi new.	aProtocol := 'http'.	aServer := 'aokilab.kyoto-su.ac.jp'.	aPath := '/aoki/misc/mids/MozartTurkeyMarch.mid'.	aMidi playURL: aProtocol , '://' , aServer , aPath.	^aMidi</body></methods><methods><class-id>KSU.Midi class</class-id> <category>instance creation</category><body package="KSU-Example" selector="new">new	^(super new)		initialize;		yourself</body></methods><comment><class-id>KSU.Midi</class-id><body>Copyright 2008-2012 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.Midi</class-id> <category>private</category><body package="KSU-Example" selector="device">device	^JunMidiDevice current</body></methods><methods><class-id>KSU.Midi</class-id> <category>private</category><body package="KSU-Example" selector="reset">reset	self device reset</body></methods><methods><class-id>KSU.Midi</class-id> <category>private</category><body package="KSU-Example" selector="send:">send: byteArray	self device send: byteArray</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="note:">note: noteName	self		note: noteName		length: 1		volume: 1		channel: 0</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="note:length:">note: noteName length: lengthNumber	self		note: noteName		length: lengthNumber		volume: 1		channel: 0</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="note:length:channel:">note: noteName length: lengthNumber channel: channelNumber	self		note: noteName		length: lengthNumber		volume: 1		channel: channelNumber</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="note:length:volume:">note: noteName length: lengthNumber volume: normalizedVolume	self		note: noteName		length: lengthNumber		volume: normalizedVolume		channel: 0</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="note:length:volume:channel:">note: noteName length: lengthNumber volume: normalizedVolume channel: channelNumber	| noteNames lengthNumbers normalizedVolumes channelNumbers |	noteNames := Array with: noteName.	lengthNumbers := Array with: lengthNumber.	normalizedVolumes := Array with: normalizedVolume.	channelNumbers := Array with: channelNumber.	self		notes: noteNames		lengths: lengthNumbers		volumes: normalizedVolumes		channels: channelNumbers</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:">notes: noteNames	self		notes: noteNames		lengths: (Array new: noteNames size withAll: 1)		volumes: (Array new: noteNames size withAll: 1)		channels: (Array new: noteNames size withAll: 0)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:length:">notes: noteNames length: lengthNumber	self		notes: noteNames		lengths: (Array new: noteNames size withAll: lengthNumber)		volumes: (Array new: noteNames size withAll: 1)		channels: (Array new: noteNames size withAll: 0)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:length:channel:">notes: noteNames length: lengthNumber channel: channelNumber	self		notes: noteNames		lengths: (Array new: noteNames size withAll: lengthNumber)		volumes: (Array new: noteNames size withAll: 1)		channels: (Array new: noteNames size withAll: channelNumber)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:length:channels:">notes: noteNames length: lengthNumber channels: channelNumbers	self		notes: noteNames		lengths: (Array new: noteNames size withAll: lengthNumber)		volumes: (Array new: noteNames size withAll: 1)		channels: channelNumbers</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:length:volume:">notes: noteNames length: lengthNumber volume: normalizedVolume	self		notes: noteNames		lengths: (Array new: noteNames size withAll: lengthNumber)		volumes: (Array new: noteNames size withAll: normalizedVolume)		channels: (Array new: noteNames size withAll: 0)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:length:volume:channel:">notes: noteNames length: lengthNumber volume: normalizedVolume channel: channelNumber	self		notes: noteNames		lengths: (Array new: noteNames size withAll: lengthNumber)		volumes: (Array new: noteNames size withAll: normalizedVolume)		channels: (Array new: noteNames size withAll: channelNumber)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:lengths:">notes: noteNames lengths: lengthNumbers	self		notes: noteNames		lengths: lengthNumbers		volumes: (Array new: noteNames size withAll: 1)		channels: (Array new: noteNames size withAll: 0)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:lengths:channels:">notes: noteNames lengths: lengthNumbers channels: channelNumbers	self		notes: noteNames		lengths: lengthNumbers		volumes: (Array new: noteNames size withAll: 1)		channels: channelNumbers</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:lengths:volumes:">notes: noteNames lengths: lengthNumbers volumes: normalizedVolumes	self		notes: noteNames		lengths: lengthNumbers		volumes: normalizedVolumes		channels: (Array new: noteNames size withAll: 0)</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="notes:lengths:volumes:channels:">notes: noteNames lengths: lengthNumbers volumes: normalizedVolumes channels: channelNumbers	| noteCollection startClock endClock currentClock noteStream |	noteCollection := OrderedCollection new.	1 to: lengthNumbers size		do: 			[:index |			| aCollection |			aCollection := lengthNumbers at: index.			aCollection isSequenceable				ifTrue: 					[| totalLength |					aCollection := lengthNumbers at: index.					totalLength := 0.					aCollection with: (1 to: aCollection size)						do: 							[:aLength :anIndex |							| aNote aVolume aChannel |							aNote := noteNames at: index.							aNote isString ifFalse: [aNote := aNote at: anIndex].							aVolume := normalizedVolumes at: index.							aVolume isSequenceable ifTrue: [aVolume := aVolume at: anIndex].							aChannel := channelNumbers at: index.							aChannel isSequenceable ifTrue: [aChannel := aChannel at: anIndex].							aNote := (JunMidiMessenger noteNameAt: aNote) ifNil: [nil] ifNotNil: [:it | it].							aVolume := 16r7f min: ((16r7f * aVolume) rounded max: 0).							(aChannel between: 16r00 and: 16r0f) ifFalse: [aChannel := 0].							noteCollection								add: totalLength -&gt; (Array												with: #noteOn												with: aChannel												with: aNote												with: aVolume).							totalLength := totalLength + aLength.							noteCollection								add: totalLength -&gt; (Array												with: #noteOff												with: aChannel												with: aNote												with: 16r00)]]				ifFalse: 					[| aNote aLength aVolume aChannel |					aNote := noteNames at: index.					aLength := aCollection.					aVolume := normalizedVolumes at: index.					aChannel := channelNumbers at: index.					aNote := (JunMidiMessenger noteNameAt: aNote) ifNil: [nil] ifNotNil: [:it | it].					aVolume := 16r7f min: ((16r7f * aVolume) rounded max: 0).					(aChannel between: 16r00 and: 16r0f) ifFalse: [aChannel := 0].					noteCollection						add: 0 -&gt; (Array										with: #noteOn										with: aChannel										with: aNote										with: aVolume).					noteCollection						add: aLength -&gt; (Array										with: #noteOff										with: aChannel										with: aNote										with: 16r00)]].	noteCollection := noteCollection asSortedCollection: [:a :b | a key &lt;= b key].	noteCollection := noteCollection asArray.	startClock := Time microsecondClock.	endClock := startClock + noteCollection last key seconds asMicroseconds.	noteStream := noteCollection readStream.	currentClock := Time microsecondClock.	[currentClock &lt;= endClock] whileTrue: 			[| aClock anAssociation |			currentClock := Time microsecondClock.						[(anAssociation := noteStream peek) notNil and: 					[aClock := startClock + anAssociation key seconds asMicroseconds.					aClock &lt;= currentClock]]					whileTrue: 						[| aCommand aChannel aNote aVolume |						aCommand := noteStream next value.						aChannel := aCommand at: 2.						aNote := aCommand at: 3.						aVolume := aCommand at: 4.						aNote							ifNotNil: 								[self send: (ByteArray											with: 16r90 + aChannel											with: aNote											with: aVolume)]].			Processor yield]</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="tone:">tone: toneName	self tone: toneName channel: 0</body></methods><methods><class-id>KSU.Midi</class-id> <category>accessing</category><body package="KSU-Example" selector="tone:channel:">tone: toneName channel: channelNumber	| aTone aChannel |	(JunMidiMessenger toneNameAt: toneName) ifNil: [^nil] ifNotNil: [:it | aTone := it].	(channelNumber between: 16r00 and: 16r0f) ifTrue: [aChannel := channelNumber] ifFalse: [^nil].	self send: (ByteArray with: 16rC0 + aChannel with: aTone)</body></methods><methods><class-id>KSU.Midi</class-id> <category>initialize-release</category><body package="KSU-Example" selector="initialize">initialize	super initialize.	self reset</body></methods><methods><class-id>KSU.Midi</class-id> <category>playing</category><body package="KSU-Example" selector="playURL:">playURL: urlString	| aURL aFilename aBoolean aProcess |	aURL := JunURL named: urlString.	aURL exists ifFalse: [^nil].	aFilename := aURL asURI tail asFilename.	aURL downloadTo: aFilename.	aFilename exists ifFalse: [^nil].	aBoolean := true.	aProcess := 			[| aPlayer |			aPlayer := JunMidiPlayer readFrom: aFilename.			aPlayer playToDebug.			aBoolean := false]					newProcess.	aProcess resume.		[[aBoolean and: [JunSensorUtility noButtonPressed]] whileTrue: 			[JunApplicationModel displayPendingInvalidation.			Processor yield]]			ensure: 				[aProcess terminate.				JunMidiDevice current reset.				aFilename exists ifTrue: [aFilename delete]]</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/Midi/Midi.st';	add: #comment: -&gt; 'Copyright 2008-2012 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Example';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Example';	add: #class: -&gt; #{KSU.Example};	add: #protocol: -&gt; #examples;	add: #selector: -&gt; #example1;	add: #execute: -&gt; [#{KSU.Midi} value perform: #playMozartTurkeyMarch];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><do-it>| aString aRandom |Transcript clear.aString := '23456789abcdefghijkmnprstuvwxyz'.aRandom := Random new.8 timesRepeat: 		[| aSet aStream |		aSet := Set new.		aStream := String new writeStream.		10 timesRepeat: 				[| aBlock anIndex |				aBlock :=						[anIndex := (aRandom next * (aString size - 1)) asInteger + 1.						(aSet includes: anIndex)							or: [aSet isEmpty and: [(aString at: anIndex) isDigit]]].				[aBlock value] whileTrue: [].				aSet add: anIndex.				aStream nextPut: (aString at: anIndex)].		Transcript			nextPutAll: aStream contents;			cr;			flush]</do-it><do-it>2r1111111 + 2r0001001</do-it><do-it>2r1111111 + 2r0001010</do-it><do-it>2r1111111 + 2r0001101</do-it><do-it>2r1111111 + 2r1111010</do-it><do-it>2r11111111 + 2r11111010</do-it><do-it>(2 ** 7) printStringRadix: 2</do-it><do-it>((2 ** 7) - 1) printStringRadix: 2</do-it><do-it>((2 ** 7) - 1) printStringRadix: 2</do-it><do-it>5 printStringRadix: 2</do-it><do-it>(5 bitInvert) printStringRadix: 2</do-it><do-it>(2r101 bitInvert) printStringRadix: 2</do-it><do-it>(2r101 bitInvert) printStringRadix: 2</do-it><do-it>2r1111111 + 2r1111010</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example1</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>example1</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>asFilename</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>asFilename</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt]</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>halt</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>halt</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: [:aStream | ]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aStream</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aStream</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString |					aString := JunStringUtility getLine: aStream.					Transcript show: aString]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	JunControlUtility		assert: [(aFilename withEncoding: #Shift_JIS) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString |					aString := JunStringUtility getLine: aStream.					Transcript show: aString]]		ensure: [:aStream | aStream close]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString |					aString := JunStringUtility getLine: aStream.					Transcript show: aString]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					Transcript show: aCollection]]		ensure: [:aStream | aStream close]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					Transcript show: aCollection printString]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>close</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>close</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					Transcript show: aCollection printString; cr]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>separators</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>separators</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[Transcript								show: aCollection printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>clear</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>clear</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupCollection |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	groupCollection := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16').	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[Transcript								show: aCollection printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupCollection aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupCollection := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')].	aRandom := Random new.	groupCollection := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupCollection isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupCollection size + 1.							aString := groupCollection at: anIndex.							Transcript								show: aCollection printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupCollection aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupCollection := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')].	aRandom := Random new.	groupCollection := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupCollection isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupCollection size + 1.							aString := groupCollection at: anIndex.							Transcript								show: groupCollection printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>anIndex</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>anIndex</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupCollection aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupCollection := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')].	aRandom := Random new.	groupCollection := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupCollection isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupCollection size + 1.							aString := groupCollection at: anIndex.							groupCollection remove: aString.							Transcript								show: groupCollection printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupCollection aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupCollection := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16') asList].	aRandom := Random new.	groupCollection := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupCollection isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupCollection size + 1.							aString := groupCollection at: anIndex.							groupCollection remove: aString.							Transcript								show: groupCollection printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16') asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							Transcript								show: groupList printString;								cr]]]		ensure: [:aStream | aStream close].	Transcript flush</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush.							0.25 seconds wait]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>flush</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>flush</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>aString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush.							aCollection add: aString.							Transcript								nextPutAll: aCollection printString;								cr;								flush.							0.25 seconds wait]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aCollection add: aString.							Transcript								nextPutAll: aCollection printString;								cr;								flush.							0.25 seconds wait]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aCollection |					aString := JunStringUtility getLine: aStream.					aCollection := (JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators) asList.					aCollection isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aCollection add: aString.							Transcript								nextPutAll: aCollection printString;								cr;								flush.							0.25 seconds wait]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename groupList aBlock aRandom |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	aRandom := Random new.	groupList := Array new.	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			[aStream atEnd not] whileTrue: 					[| aString aList |					aString := JunStringUtility getLine: aStream.					aList := (JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators) asList.					aList isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aList add: aString.							aList do: [:each | Transcript nextPutAll: each printString]								separatedBy: [Transcript nextPutAll: ','].							Transcript								cr;								flush.							0.25 seconds wait]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBlock groupList aRandom anInteger |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |	aRandom := Random new.	groupList := Array new.	anInteger := 0.			[aStream atEnd not] whileTrue: 					[| aString aList |					aString := JunStringUtility getLine: aStream.					aList := (JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators) asList.					aList isEmpty						ifFalse: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aList add: aString.							aList do: [:each | Transcript nextPutAll: each printString]								separatedBy: [Transcript nextPutAll: ','].							Transcript								cr;								flush.							0.25 seconds wait]]]		ensure: [:aStream | aStream close]</body></methods><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBlock groupList |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			| aRandom anInteger |			aRandom := Random new.			groupList := Array new.			anInteger := 0.			[aStream atEnd not] whileTrue: 					[| aString aList |					aString := JunStringUtility getLine: aStream.					aList := (JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators) asList.					(aList isEmpty not and: [anInteger &gt; 0])						ifTrue: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aList add: aString.							aList do: [:each | Transcript nextPutAll: each printString]								separatedBy: [Transcript nextPutAll: ','].							Transcript								cr;								flush.							anInteger := anInteger + 1]]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBlock groupList |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			| aRandom anInteger |			aRandom := Random new.			groupList := Array new.			anInteger := 0.			[aStream atEnd not] whileTrue: 					[| aString aList |					aString := JunStringUtility getLine: aStream.					aList := (JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators) asList.					(aList isEmpty not and: [anInteger &gt; 0])						ifTrue: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aList add: aString.							aList do: [:each | Transcript nextPutAll: each printString]								separatedBy: [Transcript nextPutAll: ','].							Transcript								cr;								flush].					anInteger := anInteger + 1]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><methods><class-id>KSU.Example class</class-id> <category>examples</category><body package="KSU-Example" selector="example1">example1	"KSU.Example example1."	| aFilename aBlock groupList |	aFilename := '/Users/aoki/Jobs/KyoSanDai/Lectures/2015/プロジェクト演習/プロジェクト演習CS+NMガイド/プロジェクト演習CS+NMガイド2015_転記_通常.csv'				asFilename.	aFilename exists ifFalse: [^self halt].	Transcript clear.	aBlock :=			[groupList := #('G_01' 'G_02' 'G_03' 'G_04' 'G_05' 'G_06' 'G_07' 'G_08' 'G_09' 'G_10' 'G_11' 'G_12' 'G_13' 'G_14' 'G_15' 'G_16')						asList].	JunControlUtility		assert: [(aFilename withEncoding: #UTF_8) readStream]		do: 			[:aStream |			| aRandom anInteger |			aRandom := Random new.			groupList := Array new.			anInteger := 0.			[aStream atEnd not] whileTrue: 					[| aString aList |					aString := JunStringUtility getLine: aStream.					aList := (JunStringUtility separate: aString								dividers: ',' , JunStringUtility separators) asList.					(aList isEmpty not and: [anInteger &gt; 0])						ifTrue: 							[| aNumber anIndex |							groupList isEmpty ifTrue: [aBlock value].							aNumber := (aRandom next * 10000000) rounded.							anIndex := aNumber \\ groupList size + 1.							aString := groupList at: anIndex.							groupList remove: aString.							"Transcript								nextPutAll: aString printString;								space;								nextPutAll: groupList printString;								cr;								flush."							aList add: aString.							aList do: [:each | Transcript nextPutAll: each]								separatedBy: [Transcript nextPutAll: ','].							Transcript								cr;								flush].					anInteger := anInteger + 1]]		ensure: [:aStream | aStream close]</body></methods><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example1.</do-it><do-it>KSU.Example example1.</do-it><do-it>2 ** 64</do-it><do-it>256</do-it><do-it>255</do-it><do-it>100</do-it><do-it>2 ** 80</do-it><do-it>2 ** 10</do-it><do-it>2 ** 20</do-it><do-it>2 ** 30</do-it><do-it>2 ** 40</do-it><do-it>2 ** 50</do-it><do-it>2 ** 60</do-it><do-it>2 ** 70</do-it><do-it>2 ** 8</do-it><do-it>2 ** 16</do-it><do-it>2 ** 32</do-it><do-it>2 ** 64</do-it><do-it>16rFFFFFFFFFFFFFFF8</do-it><do-it>16rFFFFFFFFFFFFFFAF</do-it><do-it>(16rFFFFFFFFFFFFFFFF // 2) printStringRadix: 16</do-it><do-it>16r7FFFFFFFFFFFFFFF</do-it><do-it>16r7FFFFFFFFFFFFFFF0</do-it><do-it>16r7FFFFFFFFFFFFFF0</do-it><do-it>2 ** 64</do-it><do-it>64</do-it><do-it>2 ** 24</do-it><do-it>2 ** 16</do-it><do-it>65535 printStringRadix: 16</do-it><do-it>32768 printStringRadix: 16</do-it><do-it>54613 printStringRadix: 16</do-it><do-it>41506 printStringRadix: 16</do-it><do-it>21845 printStringRadix: 16</do-it><do-it>10922 printStringRadix: 16</do-it><do-it>43690 printStringRadix: 16</do-it><do-it>192</do-it><do-it>168</do-it><do-it>| anArray |anArray := #(123 456.789 'abc').anArray inspect</do-it><do-it>| anArray |anArray := #(123 456.789 'abc') copy.anArray inspect</do-it><do-it>self at: 2 put: 'aoki'</do-it><do-it>127</do-it><do-it>Point zero</do-it><do-it>Point unity</do-it><do-it>Point browse</do-it><do-it>| sourceCode parserClass syntaxTree |sourceCode := ' 	(JunDialog confirm: ''Are you happy ?'')  	ifTrue: [    Transcript cr; show: ''Yes , I am happy.''	]	ifFalse: [    	Transcript cr; show: ''No , I am not happy.''	]'.parserClass := Refactory.Browser.RBParser.syntaxTree := parserClass parseExpression: sourceCode.^syntaxTree formattedCode inspect</do-it><do-it>(JunDialog confirm: 'Are you happy ?')	ifTrue: 		[Transcript			cr;			show: 'Yes , I am happy.']	ifFalse: 		[Transcript			cr;			show: 'No , I am not happy.']</do-it><do-it>Compiler evaluate: self</do-it><do-it>JunSystem report</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>happy</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>happy</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ifTrue</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ifTrue</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>| sourceCode parserClass syntaxTree |sourceCode := ' 	(JunDialog confirm: ''Are you happy?'')  	ifTrue: 						[										Transcript cr; show: ''Yes , I am happy.''			]								ifFalse: [		Transcript cr; show: ''No , I am not happy.''	]'.parserClass := Refactory.Browser.RBParser.syntaxTree := parserClass parseExpression: sourceCode.^syntaxTree formattedCode inspect</do-it><do-it>Compiler evaluate: self</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/nobu/Desktop/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im' 'October 4, 2018' '5:58:42 PM')""An image file /Users/nobu/Desktop/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im was created at 5:58:42 PM on October 4, 2018."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/nobu/Desktop/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im' 'October 4, 2018' '5:59:47 PM')""An image file /Users/nobu/Desktop/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im was created at 5:59:47 PM on October 4, 2018."</do-it><do-it>3 + 4</do-it><do-it>(3 + 4) class</do-it><do-it>(3 + 4) class superclass</do-it><do-it>(3 + 4) class superclass superclass</do-it><do-it>(3 + 4) class superclass superclass superclass</do-it><do-it>(3 + 4) class superclass superclass superclass superclass</do-it><do-it>(3 + 4) class superclass superclass superclass superclass superclass</do-it><do-it>(3 + 4) class superclass superclass superclass superclass superclass superclass</do-it><do-it>(3 + 4) class superclass superclass superclass superclass superclass superclass class</do-it><do-it>(3 + 4) class superclass class</do-it><do-it>(3 + 4) class superclass class class</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/nobu/Desktop/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im' 'October 4, 2018' '6:15:10 PM')""An image file /Users/nobu/Desktop/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im was created at 6:15:10 PM on October 4, 2018."</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunPrologInterpreter open</do-it><do-it>JunLispInterpreter open</do-it><do-it>| anImage aWindow |anImage := JunImageUtility fromDisplay: (100 @ 100 extent: 600 @ 450).aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow minimumSize: 400 @ 300.aWindow maximumSize: 900 @ 675.aWindow component: anImage.aWindow openIn: (100 @ 100 extent: 600 @ 450).^aWindow</do-it><do-it>| aString aURL aFilename |aString := 'http://www.smalltalk.jp/SML/image/balloon.jpg'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := aURL asURI tail asFilename.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].JunImageDisplayModel openFile: aFilename</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.32    timesRepeat:        [aWindow displayPendingInvalidation.        (Delay forMilliseconds: 100) wait.        aRectangle := aWindow displayBox.        aRectangle := aRectangle translatedBy: 4 @ 3.        aWindow displayBox: aRectangle].^aWindow</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.JunSensorUtility cursorPoint: aRectangle topCenter.[JunSensorUtility noButtonPressed]    whileTrue:        [aWindow displayPendingInvalidation.        aRectangle := aWindow displayBox.        aRectangle := aRectangle            align: aRectangle topCenter            with: JunSensorUtility cursorPoint.        aWindow displayBox: aRectangle].^aWindow</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.JunSensorUtility cursorPoint: aRectangle topCenter.[JunSensorUtility noButtonPressed]    whileTrue:        [aWindow displayPendingInvalidation.        aRectangle := aWindow displayBox.        aRectangle := aRectangle            align: aRectangle topCenter            with: JunSensorUtility cursorPoint.        aWindow displayBox: aRectangle].^aWindow</do-it><do-it>| aMenu |aMenu := Menu labelArray: #('Word' 'Excel' 'PowerPoint').aMenu startUp.^aMenu</do-it><do-it>| aMenu |aMenu := Menu labelArray: #('Word' 'Excel' 'PowerPoint').aMenu startUp.^aMenu</do-it><do-it>| aMenu aValue |aMenu := Menu labelArray: #('Word' 'Excel' 'PowerPoint').aValue := aMenu startUp.Transcript        cr;        show: aValue printString.^aMenu</do-it><do-it>| aMenu aValue |aMenu := Menu labelArray: #('Word' 'Excel' 'PowerPoint').aValue := aMenu startUp.Transcript        cr;        show: aValue printString.^aMenu</do-it><do-it>| aMenu aValue |aMenu := Menu labelArray: #('Word' 'Excel' 'PowerPoint').aValue := aMenu startUp.Transcript        cr;        show: aValue printString.^aMenu</do-it><do-it>| aMenu aValue |aMenu := Menu labelArray: #('Word' 'Excel' 'PowerPoint').aValue := aMenu startUp.Transcript        cr;        show: aValue printString.^aMenu</do-it><do-it>| aMenu aValue aString |aMenu := Menu labelArray: #('Pages' 'Numbers' 'Keynote').aValue := aMenu startUp.aValue = 0 ifTrue: [^aMenu].aValue = 1 ifTrue: [aString := 'Pages.app'].aValue = 2 ifTrue: [aString := 'Numbers.app'].aValue = 3 ifTrue: [aString := 'Keynote.app'].ExternalProcess cshOne: 'open /Applications/' , aString.^aMenu</do-it><do-it>| aMenu aValue |aMenu := Menu            labelArray: #('Pages' 'Numbers' 'Keynote')            values: #('Pages.app' 'Numbers.app' 'Keynote.app').aValue := aMenu startUp.aValue = 0 ifTrue: [^aMenu].ExternalProcess cshOne: 'open /Applications/' , aValue.^aMenu</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Languages/SmallTalk/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im' 'November 15, 2018' '5:37:47 PM')""An image file /Languages/SmallTalk/VisualWorks791pulWithJun797ForMac/VisualWorksWithJun/visualnc.im was created at 5:37:47 PM on November 15, 2018."</do-it><do-it>JunTransformationInterval example3.</do-it><methods><class-id>Jun.JunTransformationInterval class</class-id> <category>examples</category><body package="Jun" selector="example3">example3	"JunTransformationInterval example3."	| aBody aCube aModel transformationInteval |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (aCube := JunOpenGL3dTransformedObject object: JunOpenGL3dObject colorCube).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 10).	aModel := JunOpenGLDisplayModel displayObject: aBody.	aModel openWithExtent: 500 @ 500.	transformationInteval := JunTransformationInterval				to: (((Jun3dTransformation scale: 1 , 2 , 3)						product: (Jun3dTransformation rotate: (JunAngle degrees: 120) around: (0 , 0 , 0 to: 1 , 1 , 1)))							product: (Jun3dTransformation translate: 7 , 0 , 0)).	(0 to: 1.2 by: 0.005) do: 			[:normalizedValue |			| aTransformation |			aTransformation := transformationInteval atT: normalizedValue.			aCube transformation: aTransformation.			aModel changed: #object].	^aModel</body></methods><do-it>JunTransformationInterval example3.</do-it><do-it>((Jun3dTransformation scale: 1 , 2 , 3)						product: (Jun3dTransformation rotate: (JunAngle degrees: 120) around: (0 , 0 , 0 to: 1 , 1 , 1)))							product: (Jun3dTransformation translate: 7 , 0 , 0)</do-it><methods><class-id>Jun.JunTransformationInterval class</class-id> <category>examples</category><body package="Jun" selector="example3">example3	"JunTransformationInterval example3."	| aBody aCube aModel transformationInteval |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (aCube := JunOpenGL3dTransformedObject object: JunOpenGL3dObject colorCube).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 10).	aModel := JunOpenGLDisplayModel displayObject: aBody.	aModel openWithExtent: 500 @ 500.	transformationInteval := JunTransformationInterval				to: (((Jun3dTransformation scale: 1 , 2 , 3)						product: (Jun3dTransformation rotate: (JunAngle degrees: 120) around: (0 , 0 , 0 to: 1 , 1 , 1)))							product: (Jun3dTransformation translate: 7 , 0 , 0)).	(0 to: 1 by: 0.01) do: 			[:normalizedValue |			| aTransformation |			aTransformation := transformationInteval atT: normalizedValue.			aCube transformation: aTransformation.			aModel changed: #object].	^aModel</body></methods><do-it>JunTransformationInterval example3.</do-it><methods><class-id>Jun.JunTransformationInterval class</class-id> <category>examples</category><body package="Jun" selector="example3">example3	"JunTransformationInterval example3."	| aBody aCube aModel transformationInteval |	aBody := JunOpenGL3dCompoundObject new.	aBody add: (aCube := JunOpenGL3dTransformedObject object: JunOpenGL3dObject colorCube).	aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 10).	aModel := JunOpenGLDisplayModel displayObject: aBody.	aModel openWithExtent: 500 @ 500.	transformationInteval := JunTransformationInterval				to: (((Jun3dTransformation scale: 1 , 2 , 3)						product: (Jun3dTransformation rotate: (JunAngle degrees: 120) around: (0 , 0 , 0 to: 1 , 1 , 1)))							product: (Jun3dTransformation translate: 7 , 0 , 0)).	(0 to: 1 by: 0.000001) do: 			[:normalizedValue |			| aTransformation |			aTransformation := transformationInteval atT: normalizedValue.			aCube transformation: aTransformation.			aModel changed: #object].	^aModel</body></methods><do-it>(0 , 0 , 0 to: 1 , 1 , 1)</do-it><do-it>self atT: 1.2</do-it><do-it>JunOpenGL3dObject dragon show</do-it><do-it>3 + 7</do-it><do-it>3 + 4</do-it><do-it>3 + 4</do-it><do-it>[3 + 4]</do-it><do-it>[3 + 4] value</do-it><do-it>Compiler evaluate: '3 + 4'</do-it><do-it>Compiler evaluate: '[3 + 4] value'</do-it><do-it>Compiler evaluate: 'self + 4' for: 3 logged: false</do-it><do-it> 7</do-it><do-it>|aWindow|aWindow := ApplicationWindow new.aWindow open</do-it><do-it>|aWindow|aWindow := ApplicationWindow new.aWindow open</do-it><do-it>|aWindow|aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow open</do-it><do-it>|aWindow|aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: ColorValue red.aWindow open</do-it><do-it>|aRectangle|aRectangle := nil.(0 to: 1 by: 0.25)	do:		[:aValue |		|aWindow|		aWindow := ApplicationWindow new.		aWindow label: '私のウィンドウ'.		aWindow minimumSize: 400 @ 300.		aWindow background: (ColorValue brightness: aValue).		aRectangle			ifNil:				[aWindow open.				aRectangle := aWindow displayBox]			ifNotNil:				[aRectangle := aRectangle translatedBy: 50 @ 25.				aWindow openIn: aRectangle]]</do-it><do-it>|aWindow aRectangle|aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: ColorValue royalBlue.aWindow open.aRectangle := aWindow displayBox.100	timesRepeat:		[aRectangle := aRectangle translatedBy: 2 @ 1.		aWindow displayBox: aRectangle.		JunApplicationModel displayPendingInvalidation.		(Delay forMilliseconds: 125) wait]</do-it><do-it>|aWindow aRectangle|aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: ColorValue springGreen.aWindow open.aRectangle := aWindow displayBox.50	timesRepeat:		[aRectangle := aRectangle expandedBy: 4 @ 3.		aWindow displayBox: aRectangle.		JunApplicationModel displayPendingInvalidation.		(Delay forMilliseconds: 125) wait]</do-it><do-it>|aString aBlock aModel aWindow|aString := '私の名前'.aBlock := [:graphicsContext :aView |	|aComposedText|	aComposedText := ComposedText		withText: aString as Text		style: (JunFontModel textStyleHeight: 72).	aComposedText displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>|aString aBlock aModel aWindow|aString := '私の名前'.aBlock := [:graphicsContext :aView |	|aComposedText|	aComposedText := ComposedText		withText: aString as Text		style: (JunFontModel textStyleHeight: 72).	aComposedText displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>|aString aBlock aModel aWindow|aString := '私の名前'.aBlock := [:graphicsContext :aView |	|aComposedText|	aComposedText := ComposedText		withText: aString asText		style: (JunFontModel textStyleHeight: 72).	aComposedText displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>|aString aBlock aModel aWindow|aString := '私の名前'.aBlock := [:graphicsContext :aView|	|aComposedText|	aComposedText := ComposedText		withText: aString asText		style: (JunFontModel textStyleHeight: 72).	aComposedText		displayOn: graphicsContext		at: 50 @ 50].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>|aString aBlock aModel aWindow|aString := '私の名前'.aBlock := [:graphicsContext :aView|	|aComposedText|	aComposedText := ComposedText		withText: aString asText		style: (JunFontModel textStyleHeight: 72).	aComposedText		displayOn: graphicsContext		at: 50 @ 50].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>|aString aBlock aModel aWindow|aString := '私の名前'.aBlock := [:graphicsContext :aView |	|aComposedText|	aComposedText := ComposedText		withText: aString asText		style: (JunFontModel textStyleHeight: 72).	aComposedText		displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>|aCollection aBlock aModel aWindow|aCollection := OrderedCollection new.aCollection add: #topLeft.aCollection add: #topCenter.aCollection add: #topRight.aCollection add: #center.aCollection add: #rightCenter.aCollection add: #bottomLeft.aCollection add: #bottomCenter.aCollection add: #bottomRight.aBlock := [:graphicsContext :aView |	|aBox|	aBox := aView bounds.	aCollection		do:			[:aSymbol|			|aComposedText aRectangle|			aComposedText := ComposedText				withText: aSymbol asText				style: TextAttributes default.			aRectangle := aComposedText bounds.			aRectangle := aRectangle				align: (aRectangle perform: aSymbol)				with: (aBox perform: aSymbol).			aComposedText				displayOn: graphicsContext				at: aRectangle origin]].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>|aCollection aBlock aModel aWindow|aCollection := OrderedCollection new.aCollection add: #topLeft.aCollection add: #topCenter.aCollection add: #topRight.aCollection add: #leftCenter.aCollection add: #center.aCollection add: #rightCenter.aCollection add: #bottomLeft.aCollection add: #bottomCenter.aCollection add: #bottomRight.aBlock := [:graphicsContext :aView |	|aBox|	aBox := aView bounds.	aCollection		do:			[:aSymbol|			|aComposedText aRectangle|			aComposedText := ComposedText				withText: aSymbol asText				style: TextAttributes default.			aRectangle := aComposedText bounds.			aRectangle := aRectangle				align: (aRectangle perform: aSymbol)				with: (aBox perform: aSymbol).			aComposedText				displayOn: graphicsContext				at: aRectangle origin]].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| aString aURL aFilename anImage |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aURL aFilename anImage |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aURL aFilename anImage |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aURL aFilename anImage |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage </do-it><do-it>| aString aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aModel := JunAbstractModel new.aModel displayBlock: anImage.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: anImage).aWindow open</do-it><do-it>| aString aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: anImage).aWindow open</do-it><do-it>| aString aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: anImage).aWindow open</do-it><do-it>| aString aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aBlock).aWindow open</do-it><do-it>| aString aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: anImage).aWindow open</do-it><do-it>| aString aBlock aModel aWindow |aString := '私の名前'.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText        withText: aString asText        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>Class superclass</do-it><do-it>Class class</do-it><component-created><name>KSU-MyFirstMVC</name> <type>package</type></component-created><component-property><name>KSU-MyFirstMVC</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2014 AOKI Atsushi. All Rights Reserved.'</value></component-property><class><name>MyFirstFigure</name><environment>KSU</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>location image </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-MyFirstMVC</package></attributes></class><comment><class-id>KSU.MyFirstFigure</class-id><body>Copyright 2008-2014 AOKI Atsushi. All Rights Reserved.</body></comment><class><name>MyFirstModel</name><environment>KSU</environment><super>Jun.JunModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figures </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-MyFirstMVC</package></attributes></class><comment><class-id>KSU.MyFirstModel</class-id><body>Copyright 2008-2014 AOKI Atsushi. All Rights Reserved.</body></comment><class><name>MyFirstController</name><environment>KSU</environment><super>Jun.JunController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-MyFirstMVC</package></attributes></class><comment><class-id>KSU.MyFirstController</class-id><body>Copyright 2008-2014 AOKI Atsushi. All Rights Reserved.</body></comment><class><name>MyFirstView</name><environment>KSU</environment><super>Jun.JunView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-MyFirstMVC</package></attributes></class><comment><class-id>KSU.MyFirstView</class-id><body>Copyright 2008-2014 AOKI Atsushi. All Rights Reserved.</body></comment><methods><class-id>KSU.MyFirstModel class</class-id> <category>examples</category><body package="KSU-MyFirstMVC" selector="example1">example1	"KSU.MyFirstModel example1."	| aModel |	aModel := KSU.MyFirstModel new.	aModel open.	^aModel</body></methods><methods><class-id>KSU.MyFirstModel class</class-id> <category>examples</category><body package="KSU-MyFirstMVC" selector="example2">example2	"KSU.MyFirstModel example2."	| aModel aRectangle anImage aFigure aPixmap aGraphicsContext |	aModel := KSU.MyFirstModel new.	aRectangle := 0 @ 0 extent: 160 @ 120.	10 timesRepeat: 			[anImage := JunImageUtility fromDisplay: aRectangle.			aPixmap := Pixmap extent: anImage extent + 2 asPoint.			aGraphicsContext := aPixmap graphicsContext.			aGraphicsContext				paint: ColorValue red;				displayRectangle: aPixmap bounds.			anImage displayOn: aGraphicsContext at: 1 asPoint.			anImage := aPixmap asImage.			aFigure := (KSU.MyFirstFigure new)						image: anImage;						location: aRectangle origin;						yourself.			aModel figures add: aFigure.			aRectangle := aRectangle translatedBy: 16 @ 12].	aModel open.	^aModel</body></methods><methods><class-id>KSU.MyFirstModel class</class-id> <category>interface specs</category><body package="KSU-MyFirstMVC" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '私の最初のモデル・ビュー・コントローラ' 			#min: #(#{Core.Point} 300 300 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1030 550 1530 1050 ) 			#flags: 4 			#menu: #menuBar 			#colors: 			#(#{UI.LookPreferences} 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 -1 1 -1 1 ) 					#component: #createView ) ) ) )</body></methods><methods><class-id>KSU.MyFirstModel class</class-id> <category>resources</category><body package="KSU-MyFirstMVC" selector="yellowButtonMenu">yellowButtonMenu	"Tools.MenuEditor new openOnClass: self andSelector: #yellowButtonMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '図形...' 				#value: #createFigure ) 			#(#{UI.MenuItem} 				#rawLabel: '画像として保存...' 				#value: #saveAsImage ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.MyFirstModel class</class-id> <category>resources</category><body package="KSU-MyFirstMVC" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #newModel ) 						#(#{UI.MenuItem} 							#rawLabel: '画像として保存...' 							#value: #saveAsImage ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #quitModel ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '図形...' 							#value: #createFigure ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspectModel ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.MyFirstModel class</class-id> <category>doclet</category><body package="KSU-MyFirstMVC" selector="doclet">doclet	"KSU.MyFirstModel doclet."	| classCollection aDoclet |	classCollection := Array				with: MyFirstController				with: MyFirstFigure				with: MyFirstModel				with: MyFirstView.	aDoclet := TextDoclet codePrint: classCollection.	^aDoclet</body></methods><methods><class-id>KSU.MyFirstModel</class-id> <category>menu messages</category><body package="KSU-MyFirstMVC" selector="createFigure">createFigure	| anImage aController aView aPoint aFigure |	anImage := Image fromUser.	aFigure := KSU.MyFirstFigure new.	aFigure image: anImage.	aController := (aView := self getView) controller.	aPoint := aFigure				follow: [aController sensor cursorPoint]				while: [aController sensor noButtonPressed]				on: aView graphicsContext.	aController sensor waitNoButton.	aFigure location: aPoint.	self figures add: aFigure.	self changed</body></methods><methods><class-id>KSU.MyFirstModel</class-id> <category>accessing</category><body package="KSU-MyFirstMVC" selector="figures">figures	figures ifNil: [figures := List new].	^figures</body></methods><methods><class-id>KSU.MyFirstModel</class-id> <category>defaults</category><body package="KSU-MyFirstMVC" selector="defaultViewClass">defaultViewClass	^KSU.MyFirstView</body></methods><methods><class-id>KSU.MyFirstFigure class</class-id> <category>examples</category><body package="KSU-MyFirstMVC" selector="example1">example1	"KSU.MyFirstFigure example1."	| aFigure aView aController |	aFigure := (KSU.MyFirstFigure new)				image: Image fromUser;				location: Point zero;				yourself.	aView := (aController := ScheduledControllers activeController) view.	aFigure		follow: [aController sensor cursorPoint - aFigure image bounds center]		while: [aController sensor noButtonPressed]		on: aView graphicsContext.	^aFigure</body></methods><methods><class-id>KSU.MyFirstFigure</class-id> <category>accessing</category><body package="KSU-MyFirstMVC" selector="image:">image: anImage	image := anImage</body></methods><methods><class-id>KSU.MyFirstFigure</class-id> <category>accessing</category><body package="KSU-MyFirstMVC" selector="location:">location: aPoint	location := aPoint</body></methods><methods><class-id>KSU.MyFirstFigure</class-id> <category>accessing</category><body package="KSU-MyFirstMVC" selector="location">location	^location</body></methods><methods><class-id>KSU.MyFirstFigure</class-id> <category>accessing</category><body package="KSU-MyFirstMVC" selector="image">image	^image</body></methods><methods><class-id>KSU.MyFirstFigure</class-id> <category>transporting</category><body package="KSU-MyFirstMVC" selector="follow:while:on:">follow: folllowBlock while: whileBlock on: aGraphicsContext	| aTransporter aPoint |	aTransporter := JunVisualTransporter load: self image.	JunCursors quarters2Cursor showWhile: 			[aPoint := aTransporter						follow: [folllowBlock value]						while: [whileBlock value]						on: aGraphicsContext].	^aPoint</body></methods><methods><class-id>KSU.MyFirstController</class-id> <category>control defaults</category><body package="KSU-MyFirstMVC" selector="redButtonActivity">redButtonActivity	| cursorPoint aFigure aPoint |	cursorPoint := self sensor cursorPoint.	aFigure := self model figures reverse detect: 					[:each |					| anImage aRectangle |					anImage := each image.					aPoint := each location.					aRectangle := aPoint extent: anImage extent.					aRectangle containsPoint: cursorPoint]				ifNone: [nil].	aFigure ifNil: [^nil].	self model figures remove: aFigure.	self view invalidateNow.	aPoint := aFigure				follow: [self sensor cursorPoint - (cursorPoint - aFigure location)]				while: [self sensor redButtonPressed]				on: self view graphicsContext.	aFigure location: aPoint.	self model figures add: aFigure.	self model changed</body></methods><methods><class-id>KSU.MyFirstView</class-id> <category>controller accessing</category><body package="KSU-MyFirstMVC" selector="defaultControllerClass">defaultControllerClass	^KSU.MyFirstController</body></methods><methods><class-id>KSU.MyFirstView</class-id> <category>displaying</category><body package="KSU-MyFirstMVC" selector="displayOn:">displayOn: graphicsContext	self model figures do: 			[:each |			| anImage aPoint |			anImage := each image.			aPoint := each location.			anImage displayOn: graphicsContext at: aPoint]</body></methods><do-it>KSU.MyFirstModel example1.</do-it><do-it>KSU.MyFirstModel example2.</do-it><methods><class-id>KSU.MyFirstModel class</class-id> <category>resources</category><body package="KSU-MyFirstMVC" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #newModel ) 						#(#{UI.MenuItem} 							#rawLabel: '画像として保存...' 							#value: #saveAsImage ) 						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #quitModel ) ) #(1 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '編集' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '図形...' 							#value: #createFigure ) 						#(#{UI.MenuItem} 							#rawLabel: 'fuck' ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'その他' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '検査' 							#value: #inspectModel ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.MyFirstModel example1.</do-it><methods><class-id>KSU.MyFirstModel class</class-id> <category>interface specs</category><body package="KSU-MyFirstMVC" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '私の最初のモデル・ビュー・コントローラ' 			#min: #(#{Core.Point} 300 300 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 457 249 957 749 ) 			#flags: 4 			#menu: #menuBar 			#colors: 			#(#{UI.LookPreferences} 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 116 0 118 1 114 1 ) 					#component: #createView ) ) ) )</body></methods><do-it>KSU.MyFirstModel example1.</do-it><do-it>Image fromUser.</do-it><do-it>KSU.MyFirstModel example1.</do-it><do-it>self open</do-it><do-it>self open</do-it><do-it>self open</do-it><do-it>self open</do-it><do-it>self open</do-it><methods><class-id>KSU.MyFirstModel class</class-id> <category>interface specs</category><body package="KSU-MyFirstMVC" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '私の最初のモデル・ビュー・コントローラ' 			#min: #(#{Core.Point} 300 300 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 469 199 969 699 ) 			#flags: 4 			#menu: #menuBar 			#colors: 			#(#{UI.LookPreferences} 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -6 0 118 1 114 1 ) 					#component: #createView ) ) ) )</body></methods><do-it>KSU.MyFirstFigure example1.</do-it><component-created><name>zzz</name> <type>package</type></component-created><component-property><name>zzz</name> <type>package</type><property>comment</property> <value>'koretsu'</value></component-property><class><name>MyFirstModel</name><environment>Smalltalk</environment><super>Jun.JunModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figures </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>zzz</package></attributes></class><methods><class-id>MyFirstModel</class-id> <category>As yet unclassified</category><body package="zzz" selector="koretsu">koretsu</body></methods><do-it>MyFirstModel organization addCategory: #'menu messages'</do-it><methods><class-id>MyFirstModel</class-id> <category>As yet unclassified</category><body package="zzz" selector="createFigure">createFigure	| anImage aController aView aPoint aFigure |	anImage := Image fromUser.	aFigure := KSU.MyFirstFigure new.	aFigure image: anImage.	aController := (aView := self getView) controller.	aPoint := aFigure				follow: [aController sensor cursorPoint]				while: [aController sensor noButtonPressed]				on: aView graphicsContext.	aController sensor waitNoButton.	aFigure location: aPoint.	self figures add: aFigure.	self changed</body></methods><do-it>MyFirstModel class organization addCategory: #doclet</do-it><shared-variable><name>MyFirstController</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>zzz</package></attributes></shared-variable><shared-variable><name>MyFirstFigure</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>zzz</package></attributes></shared-variable><shared-variable><name>MyFirstView</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>zzz</package></attributes></shared-variable><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TextDoclet</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TextDoclet</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>MyFirstModel class</class-id> <category>doclet</category><body package="zzz" selector="doclet">doclet	"KSU.MyFirstModel doclet."	| classCollection aDoclet |	classCollection := Array				with: MyFirstController				with: MyFirstFigure				with: MyFirstModel				with: MyFirstView.	aDoclet := TextDoclet codePrint: classCollection.	^aDoclet</body></methods><shared-variable><name>TextDoclet</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>zzz</package></attributes></shared-variable><methods><class-id>MyFirstModel class</class-id> <category>doclet</category><body package="zzz" selector="doclet">doclet	"KSU.MyFirstModel doclet."	| classCollection aDoclet |	classCollection := Array				with: MyFirstController				with: MyFirstFigure				with: MyFirstModel				with: MyFirstView.	aDoclet := TextDoclet codePrint: classCollection.	^aDoclet</body></methods><methods><class-id>MyFirstModel class</class-id> <category>doclet</category><body package="zzz" selector="doclet">doclet	"KSU.MyFirstModel doclet."	| classCollection aDoclet |	classCollection := Array				with: MyFirstController				with: MyFirstFigure				with: MyFirstModel				with: MyFirstView.	aDoclet := TextDoclet codePrint: classCollection.	^aDoclet</body></methods><methods><class-id>MyFirstModel class</class-id> <category>resources</category><body package="zzz" selector="menubar">menubar	"Tools.MenuEditor new openOnClass: self andSelector: #menubar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '新規' 							#value: #newModel ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MyFirstModel class</class-id> <category>interface specs</category><body package="zzz" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '私の最初のモデル・ビュー・コントローラ' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 146 526 546 826 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>| x |x := 2.[^x squared]</do-it><do-it>| x |x := 2.^[^x squared]</do-it><do-it>| x |x := 2.[^x squared]</do-it><do-it>| x |x := 2.[^x squared] value</do-it><do-it>[:x :y | x + y] value:3 value:4</do-it><do-it>[:x :y | x + y] valueWithArguments: #(3 4)</do-it><do-it>[:x :y | x + y]</do-it><do-it>[:x :y | x + y]</do-it><do-it>self value: 3 value:4</do-it><do-it>[:x :y | ^(x + y)]</do-it><do-it>[:x :y | ^(x + y)] value:3 value:4</do-it><do-it>| aButton |Transcript clear.aButton := ValueHolder with: false.aButton compute:          [Transcript               nextPutAll: aButton value printString;               nextPutAll: ' at ';               nextPutAll: Time now printString;               cr;               flush].</do-it><do-it>| aWindow aButton aView |aWindow := ScheduledWindow new.aWindow label: 'ActionButton'.aButton := ValueHolder with: false.aButton compute: [aWindow controller close].aView := ActionButtonView model: aButton.aView label: 'Exit' asText allBold asComposedText.aWindow component: aView.aWindow openIn: (100 @ 100 extent: 200 @ 100)</do-it><do-it>| aWindow aButton aView |aWindow := ScheduledWindow new.aWindow label: 'ActionButton'.aButton := ValueHolder with: false.aButton compute: [aWindow controller close].aView := ActionButtonView model: aButton.aView label: 'Exit' asText allBold asComposedText.aWindow component: aView.aWindow openIn: (100 @ 100 extent: 200 @ 100)</do-it><do-it>| aWindow aButton |aWindow := ScheduledWindow new.aWindow label: 'ActionButton'.aButton := JunButtonModel value: false visual: 'Exit' asText allBold.aButton action: [aWindow controller close].aWindow component: aButton createButtonView.aWindow openIn: (100 @ 100 extent: 200 @ 100)</do-it><do-it>| aWindow aButton |aWindow := ScheduledWindow new.aWindow label: 'ActionButton'.aButton := JunButtonModel value: false visual: 'Exit' asText allBold.aButton action: [aWindow controller close].aWindow component: aButton createButtonView.aWindow openIn: (100 @ 100 extent: 200 @ 100)</do-it><do-it>| aTime |aTime := Time now.Transcript       nextPutAll: aTime printString;       cr;       flush</do-it><do-it>| aTime |aTime := Time now.Transcript       nextPutAll: aTime printString;       cr;       flush</do-it><do-it>| aClosure aTime |aClosure :=[TranscriptnextPutAll: aTime printString;cr;flush]. "外部スコープ変数を用いる閉包を生成する。"aTime := Time now.aClosure value "閉包を実行する。"</do-it><do-it>| aClosure aTime |aClosure :=[TranscriptnextPutAll: aTime printString;cr;flush]. "外部スコープ変数を用いる閉包を生成する。"aTime := Time now.aClosure value "閉包を実行する。"</do-it><do-it>| aClosure aTime |aClosure :=		[:time |		Transcript			nextPutAll: time printString;			cr;			flush].	"外部スコープ変数を用いない閉包を生成する。"aTime := Time now.aClosure value: aTime	"値を渡して閉包を実行する。"</do-it><do-it>| aClosure aContinuation aTime |aClosure := [:time :continuation | continuation value: time printString].aContinuation :=		[:string |		Transcript			nextPutAll: string;			cr;			flush].aTime := Time now.aClosure value: aTime value: aContinuation"値と継続を渡して閉包を実行する。"</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>|aCollection aBlock aModel aWindow|aCollection := OrderedCollection new.aCollection add: #topLeft.aCollection add: #topCenter.aCollection add: #topRight.aCollection add: #leftCenter.aCollection add: #center.aCollection add: #rightCenter.aCollection add: #bottomLeft.aCollection add: #bottomCenter.aCollection add: #bottomRight.aBlock := [:graphicsContext :aView |	|aBox|	aBox := aView bounds.	aCollection		do:			[:aSymbol|			|aComposedText aRectangle|			aComposedText := ComposedText				withText: aSymbol asText				style: TextAttributes default.			aRectangle := aComposedText bounds.			aRectangle := aRectangle				align: (aRectangle perform: aSymbol)				with: (aBox perform: aSymbol).			aComposedText				displayOn: graphicsContext				at: aRectangle origin]].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| aString aURL aFilename anImage |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.^aURL</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.^aURL</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.^aURL</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.^String</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.^String</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.^aString </do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aBlock aModel aWindow |aString := '私の名前'.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText        withText: aString asText        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |	aComposedImage := ComposedImage		withImage: anImage as Image.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |	aComposedImage := ComposedImage		withImage: anImage as Image.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow background: (ColorValue brightness: 0.9).aWindow open</do-it><do-it>| anImage aWindow |anImage := JunImageStream imageSmalltalkBalloon256x256.aWindow := ApplicationWindow new.aWindow label: 'My Window'.aWindow component: anImage.aWindow openIn: (100 @ 100 extent: 400 @ 300).^aWindow</do-it><do-it>| aString  aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString  aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText        withText: aString asText        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText        withText: aString asText        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage asImage        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage		withImage:  anImage asImage		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage		withImage:  anImage asText		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage		withImage:  aString asText		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage		withText:  aString asText		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedText		withText:  aString asText		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedText		withText:  aString asText		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText        withText: aString asText        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage asImage        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage asImage        style: (JunImageMedia ImageStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage asImage        style: (JunImageMedia imageStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage Image        style: (JunImageMedia imageStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage asText        style: (JunImageMedia imageStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow openIn: (100 @ 100 extent: 400 @ 300).aWindow open</do-it><do-it>| aString aURL aDirectory aFilename |aString := 'http://www.cc.kyoto-su.ac.jp/~atsushi/Media/Takenoko/Takenoko.jpg'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aDirectory := Filename defaultDirectory construct: 'Downloads'.aDirectory exists ifFalse: [aDirectory makeDirectory].aFilename := aDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].JunImageDisplayModel openFile: aFilename</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].JunImageDisplayModel openFile: aFilename</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage as2dImage        style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage asImage        style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage        style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        withImage: anImage.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        Image: anImage.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := ComposedImage        Image: anImage asImage		style: (JunImageDisplayModel imageSize: 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage asImage.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage asImage.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage asImage.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage.    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage.    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage.    aComposedImage        displayOn: graphicsContext		at: aView bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage		style: (JunImageDisplayModel image16x16).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage		style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := 		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := 		anImage		style: (JunFontModel imageHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := 		anImage		extent: 150@150.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=( 		anImage		extent: 64@64).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=( 		anImage		style: (JunImageDisplayModel imageStyleHeight: 100 @ 180)).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 100 @ 180).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 100 @ 180).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: [100 @ 180]).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 100).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		JunImageDisplayModel imageStyleHeight: 100.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 100).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageSize: 70).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageSize: 70).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>JunAbstractModel</do-it><do-it>JunAbstractModel</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel textStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 5).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageMedia imageStyleHeight: 5).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 70).    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		.    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 500 @ 500.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		.    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageShape32x32).    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: [JunFontModel imageShape32x32].    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: JunFontModel imageShape32x32.    aComposedImage        displayOn: graphicsContext].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: JunFontModel imageShape32x32.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageShape32x32).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageShape32@32).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageHeight: 60).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageSize: 60 @ 60).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunFontModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		.    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage :=		anImage		style: (JunImageDisplayModel imageStyleHeight: 72).    aComposedImage        displayOn: graphicsContext		at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedImage := anImage        displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString aBlock aModel aURL aFilename anImage aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedImage |	aComposedImage := anImage.    aComposedImage         displayOn: graphicsContext        at: aView bounds center - aComposedImage bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 0 @ 0 extent: 300 @ 300.anImage := Screen default completeContentsOfArea: aRectangle.aWindow := ScheduledWindow new.aWindow component: anImage.aWindow openIn: (100 @ 100 extent: aRectangle extent)</do-it><do-it>"画面の切り取りを行い、それをウィンドウの中に表示します。"| aRectangle anImage aWindow |aRectangle := 0 @ 0 extent: 300 @ 300. "切り取り領域"anImage := Screen default completeContentsOfArea: aRectangle. "画面の切り取り"aWindow := ScheduledWindow new. "ウィンドウのインスタンスを作成"aWindow component: anImage. "切り取った画像をウィンドウの内容に指定"aWindow openIn:(100 @ 100 extent: aRectangle extent) "ウィンドウのオープン"</do-it><do-it>| aCollection aStream aModel |aCollection := Set new.Smalltalk allBehaviorsDo: [:each |	each isMeta ifFalse: [aCollection add: each name]].aCollection := aCollection asSortedCollection asArray.aStream := WriteStream on: String new.aCollection do: [:each | aStream nextPutAll: each asString; cr].aModel := ValueHolder with: aStream contents.ComposedTextView open: aModel label: 'Class Names'.^aCollection</do-it><do-it>| aCollection aStream aModel |aCollection := Set new.Smalltalk allBehaviorsDo: [:each | aCollection addAll: each selectors].aCollection := aCollection select: [:each |				each numArgs = 0 and: [each isKeyword not]].aCollection := aCollection asSortedCollection asArray.aStream := WriteStream on: String new.aCollection do: [:each | aStream nextPutAll: each asString; cr].aModel := ValueHolder with: aStream contents.ComposedTextView open: aModel label: 'Unary Message Selectors'.^aCollection</do-it><do-it>| aCollection aStream aModel |aCollection := Set new.Smalltalk allBehaviorsDo: [:each |	each isMeta ifFalse: [aCollection add: each name]].aCollection := aCollection asSortedCollection asArray.aStream := WriteStream on: String new.aCollection do: [:each | aStream nextPutAll: each asString; cr].aModel := ValueHolder with: aStream contents.ComposedTextView open: aModel label: 'Class Names'.^aCollection</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.32	timesRepeat:	[aWindow displayPendingInvalidation.	(Delay forMilliseconds: 100) wait.	aRectangle := aWindow displayBox.	aRectangle := aRectangle translatedBy: 4 @ 3.	aWindow displayBox: aRectangle].^aWindow</do-it><do-it>| aRectangle anImage aWindow|aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.JunSensorUtility cursorPoint: aRectangle topCenter.[JunSensorUtility noButtonPressed]	whileTrue:		[aWindow displayPendingInvalidation.		aRectangle := aWindow displayBox.		aRectangle := aRectangle			align: aRectangle topCenter			with: JunSensorUtility cursorPoint.		aWindow displayBox: aRectangle].^aWindow</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 0 @ 0 extent: 300 @ 300.anImage := Screen default completeContentsOfArea: aRectangle.aWindow := ScheduledWindow new.aWindow component: anImage.aWindow openIn: (100 @ 100 extent: aRectangle extent)</do-it><do-it>| aRectangle anImage aWindow |aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.32	timesRepeat:	[aWindow displayPendingInvalidation.	(Delay forMilliseconds: 100) wait.	aRectangle := aWindow displayBox.	aRectangle := aRectangle translatedBy: 4 @ 3.	aWindow displayBox: aRectangle].^aWindow</do-it><do-it>| aRectangle anImage aWindow|aRectangle := 200 @ 100 extent: 400 @ 300.anImage := JunImageUtility fromDisplay: aRectangle.aWindow := ApplicationWindow new.aWindow label: 'My First Window'.aWindow component: anImage.aWindow openIn: aRectangle.JunSensorUtility cursorPoint: aRectangle topCenter.[JunSensorUtility noButtonPressed]	whileTrue:		[aWindow displayPendingInvalidation.		aRectangle := aWindow displayBox.		aRectangle := aRectangle			align: aRectangle topCenter			with: JunSensorUtility cursorPoint.		aWindow displayBox: aRectangle].^aWindow</do-it><do-it>JunOpenGL3dObject aoki show</do-it><do-it>| aWindow aGraphicsContext anImage |aWindow := ScheduledWindow new.aWindow openIn: (300@100 extent: 200 @ 200).aGraphicsContext := aWindow graphicsContext.anImage := JunImageUtility fromDisplay: (70@ 0 extent: 100@100).aWindow sensor waitNoButton.anImage	follow: [aWindow sensor cursorPoint]	while: [aWindow sensor noButtonPressed]	on: aGraphicsContext.^aWindow</do-it><do-it>3 + 4</do-it><do-it>3 + 4</do-it><do-it>3 + 4</do-it><do-it>3 + 4</do-it><do-it>3 + 4</do-it><do-it>Transcript show: (3 + 4) printString</do-it><do-it>Transcript show: (3 + 4) printString</do-it><do-it>Transcript show: (3 + 4) printString</do-it><do-it>Transcript show: (3 + 4) printString</do-it><do-it>Transcript show: (3 + 4) printString</do-it><do-it>Transcript show: 'Smalltalk'</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript 	cr;	show: (3 + 4) printString</do-it><do-it>Transcript	nextPutAll: (3 + 4) printString;	flush</do-it><do-it>| anObject |anObject := #(10 20 30 40 50).Transcript show: anObject printString</do-it><do-it>Transcript	cr;	space;	cr;	flush</do-it><do-it>Transcript	cr;	space;	nextPutAll: 'Smalltalk';	cr;	nextPutAll: 'Python';	flush</do-it><do-it>| aCollection aStream aModel |aCollection := Set new.Smalltalk allBehaviorsDo: [:each | aCollection addAll: each selectors].aCollection := aCollection select: [:each|				each numArgs = 0 and: [each isKeyword not]].aCollection := aCollection asSortedCollection asArray.aStream := WriteStream on: String new.aCollection do: [:each | aStream nextPutAll: each asString; cr].aModel := ValueHolder with: aStream contents.ComposedTextView open: aModel label: 'Unary Message Selectors'.^aCollection</do-it><do-it>| aCollection aStream aModel |aCollection := Set new.Smalltalk allBehaviorsDo: [:each | aCollection addAll: each selectors].aCollection := aCollection select: [:each |				each numArgs = 1 and: [each isKeyword not]].aCollection := aCollection asSortedCollection asArray.aStream := WriteStream on: String new.aCollection do: [:each | aStream nextPutAll: each asString; cr].aModel := ValueHolder with: aStream contents.ComposedTextView open: aModel label: 'Binary Message Selectors'.^aCollection</do-it><do-it>aStream := WriteStream on String new</do-it><do-it>| aCollection aStream aModel |aCollection := Set new.Smalltalk allBehaviorsDo: [:each | aCollection addAll: each selectors].aCollection := aCollection select: [:each |				each numArgs &gt;= 1 and: [each isKeyword]].aCollection := aCollection asSortedCollection asArray.aStream := WriteStream on: String new.aCollection do: [:each | aStream nextPutAll: each asString; cr].aModel := ValueHolder with: aStream contents.ComposedTextView open: aModel label: 'Keyword Message Selectors'.^aCollection</do-it><do-it>| aWindow aGraphicsContext |aWindow := ScheduledWindow new.aWindow openIn: (100 @ 100 extent: 100 @ 100).aGraphicsContext := aWindow graphicsContext.[InputState default mouseButtons = 0]	whileTrue:		[| aRectangle anImage |		ScheduledControllers checkForEvents.		aRectangle := 0 @ 0 extent: 100 @ 100.		aRectangle := aRectangle						align: aRectangle center						with: InputSensor cursorPoint.		aRectangle := Screen default bounds intersect: aRectangle.		anImage := Screen default completeContentsOfArea: aRectangle.		anImage displayOn: aGraphicsContext].aWindow controller closeAndUnschedule</do-it><do-it>| aWindow aGraphicsContext |aWindow := ScheduledWindow new.aWindow openIn: (100 @ 100 extent: 100 @ 100).aGraphicsContext := aWindow graphicsContext.[InputState default mouseButtons = 0]	whileTrue:		[| aRectangle anImage |		ScheduledControllers checkForEvents.		aRectangle := 0 @ 0 extent: 100 @ 100.		aRectangle := aRectangle						align: aRectangle center						with: InputSensor cursorPoint.		aRectangle := Screen default bounds intersect: aRectangle.		anImage := Screen default completeContentsOfArea: aRectangle.		anImage displayOn: aGraphicsContext].aWindow controller closeAndUnschedule</do-it><do-it>| value |value := -1.[(value subtractOrFail: 1) notNil]	whileTrue: [value := value + value].^value to: (value + 1) negated</do-it><do-it>^1 + 2 * Float pi cos</do-it><do-it>^1 + 2 * Float pi cos </do-it><do-it>[^1 + 2 * Float pi cos] method messages</do-it><do-it>[^1 + 2 * Float pi cos] method bytes</do-it><do-it>[^1 + 2 * Float pi cos] method messages</do-it><do-it>[^1 + 2 * Float pi cos] method symbolic</do-it><do-it>[^1 + 2 * Float pi cos] method symbolic</do-it><do-it>[^1 + 2 * Float pi cos] method symbolic</do-it><do-it>[^1+1 * Float pi cos]method symbolic</do-it><do-it>Browser</do-it><do-it>Browser</do-it><methods><class-id>Kernel.NameSpace</class-id> <category>As yet unclassified</category><body package="(none)" selector="open">open	self halt</body></methods><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.^anImage</do-it><do-it>| aString aBlock aModel aWindow |aString := '私の名前'.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText        withText: aString asText        style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow background: (ColorValue brightness: 0.9).aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aBlock := [:graphicsContext :aView |     | aComposedText |    aComposedText := ComposedText       	withText: aString asText		style: (JunFontModel textStyleHeight: 72).    aComposedText        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename."aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedText := ComposedImage		anImage := JunImageUtility fromDisplay: (100 @ 100 extent: 600 @ 450).       	withImage: anImage asImage		style: (JunImageDisplayModel : 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center]."aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: anImage.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename."aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedText := ComposedImage		anImage := JunImageUtility fromDisplay: (100 @ 100 extent: 600 @ 450).       	withImage: anImage asImage		style: (JunImageDisplayModel : 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center]."aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: anImage.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow aBlock|aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename."aBlock := [:graphicsContext :aView |     | aComposedImage |    aComposedText := ComposedImage		anImage := JunImageUtility fromDisplay: (100 @ 100 extent: 600 @ 450).       	withImage: anImage asImage		style: (JunImageDisplayModel : 72).    aComposedImage        displayOn: graphicsContext        at: aView bounds center - aComposedText bounds center].aModel := JunAbstractModel new.aModel displayBlock: aBlock.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: anImage.aWindow component: (JunAbstractView model: aModel).aWindow open"JunImageDisplayModel openFile: aFilename</do-it><do-it>| aString  aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: anImage.aWindow component: (JunAbstractView model: aModel).aWindow open</do-it><do-it>| aString  aURL aFilename aWindow |aString := 'http://www.kyoto-su.ac.jp/images/logo.gif'.aURL := JunURL named: aString.aURL exists ifFalse: [^nil].aFilename := Filename defaultDirectory construct: aURL asURI tail.aURL downloadTo: aFilename.aFilename exists ifFalse: [^nil].anImage := JunImageUtility fromFile: aFilename.aWindow := ApplicationWindow new.aWindow label: '私のウィンドウ'.aWindow minimumSize: 400 @ 300.aWindow component: anImage.aWindow openIn: (100@100 extent: 600@450).^aWindow</do-it><do-it>3 + 4</do-it><do-it>3 + 4</do-it><do-it>| anArray |anArray := Array new: 10.(1 to: 10) do: [:index | anArray at: index put: index * 100].^anArray</do-it><do-it>| aRectangle anImage |aRectangle := 70 @ 0 extent: 100 @ 100.anImage := JunImageUtility fromDisplay: aRectangle.anImage inspect.^aRectangle</do-it><do-it>"aokiオブジェクトを生成し表示して答えるプログラムです。""ダブルクォーと""で囲んだものはコメントで、プログラムの実行には関与しません"| aBody |aBody := JunOpenGL3dObject aoki. "aokiオブジェクトをこしらえてaBodyに束縛します"aBody show.	"aBody(aokiオブジェクト)にshowのメッセージを送ります"^aBody 		"aBody(aokiオブジェクト)にリターンします"</do-it><do-it>| anInteger |anInteger := -1234567890123456789.Transcript clear.(2 to: 35) do:		[:radix |		| aString |		aString := anInteger printStringRadix: radix.		anInteger positive			ifTrue: [aString := radix printString , 'r' , aString]			ifFalse:				[aString := '-' , radix printString , 'r'							, (aString copyFrom: 2 to: aString size)].		Transcript			nextPutAll: aString;			cr;			flush]</do-it><do-it>123.45 inspect</do-it><do-it>| theFloat|theFloat := 1.23456.Transcript clear.(-100 to: 100) do:		[:n |		Object errorSignal handle: [:exception | exception return]			do:				[| aFloat |				aFloat := theFloat * (10 ** n).				aFloat &lt;= theFloat class zero					ifFalse:						[Transcript							nextPutAll: aFloat printString;							cr;							flush]]]</do-it><do-it>123.45d inspect</do-it><do-it>| theDouble |theDouble := 1.23456d.Transcript clear.(-1000 to: 1000) do:		[:n |		Object errorSignal handle: [:exception | exception return]			do:				[| aDouble |				aDouble := theDouble * (10 ** n).				aDouble &lt;= theDouble class zero					ifFalse:						[Transcript							nextPutAll: aDouble printString;							cr;							flush]]]</do-it><do-it>Transcript clear.</do-it><do-it>123.45s9 inspect</do-it><do-it>123.45s10 inspect</do-it><do-it>$a inspect</do-it><do-it>$A inspect</do-it><do-it>'I am a Smalltalker.' inspect</do-it><do-it>| anArray n i |anArray := Array withAll: #(8 3 5 9 1).n := anArray size.i := 1.[i &lt; n]    whileTrue:        [| a b |        a := anArray at: i.        b := anArray at: i + 1.        a &gt; b            ifTrue:                [anArray at: i put: b.                anArray at: i + 1 put: a.                i := 1]            ifFalse: [i := i + 1]].^anArray</do-it><do-it>| anArray n i |anArray := Array withAll: #(8 3 5 9 1).n := anArray size.i := 1.[i &lt; n]    whileTrue:        [| a b |        a := anArray at: i.        b := anArray at: i + 1.        a &gt; b            ifTrue:                [anArray at: i put: b.                anArray at: i + 1 put: a.                i := 1]            ifFalse: [i := i + 1]].^anArray</do-it><do-it>| aByteArray |aByteArray := ByteArray new: 256.(0 to: 255) do: [:n | aByteArray at: n + 1 put: n].aByteArray inspect</do-it><do-it>#(123 123.45 1.2345d2 $A $あ 'Smalltalk' #Smalltalker #[0 255]) inspect</do-it><do-it>#(#(123 123.45 1.2345d2 $A) #($あ 'Smalltalk' #Smalltalker #[0 255])) inspect</do-it><do-it>| anArray |anArray := Array new: 2.anArray at: 1	put: (Array			with: 123			with: 123.45			with: 1.2345d2			with: $A).anArray at: 2	put: (Array			with: $あ			with: 'Smalltalk'			with: #Smalltalker			with: #[0 255]).anArray inspect</do-it><do-it>| aValueHolder |aValueHolder := ValueHolder new."aValueHolder value: Object new."aValueHolder value	ifNil:		[Transcript			cr;			show: 'not yet bound']</do-it><do-it>| aValueHolder |aValueHolder := ValueHolder new."aValueHolder value: Object new."aValueHolder value	ifNil:		[Transcript			cr;			show: 'not yet bound']	ifNotNil:		[:aValue |		Transcript			cr;			show: aValue printString]</do-it><do-it>| aValueHolder |aValueHolder := ValueHolder new.aValueHolder value: Object new.aValueHolder value	ifNil:		[Transcript			cr;			show: 'not yet bound']	ifNotNil:		[:aValue |		Transcript			cr;			show: aValue printString]</do-it><do-it>| aBoolean |aBoolean := JunDialog confirm: 'Are you happy?'.aBoolean	ifTrue:		[Transcript			cr;			show: 'I''m happy']</do-it><do-it>| aBoolean |aBoolean := JunDialog confirm: 'Are you happy?'.aBoolean	ifTrue:		[Transcript			cr;			show: 'I''m happy']</do-it><do-it>| aBoolean |aBoolean := JunDialog confirm: 'Are you happy?'.aBoolean	ifTrue:		[Transcript			cr;			show: 'I''m happy']	ifFalse:		[Transcript			cr;			show: 'I''m not happy']</do-it><do-it>| aBoolean |aBoolean := JunDialog confirm: 'Are you happy?'.aBoolean	ifTrue:		[Transcript			clear;			cr;			show: 'I''m happy']	ifFalse:		[Transcript			clear;			cr;			show: 'I''m not happy']</do-it><class><name>TransientBeing</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName familyName birthday address phoneNumber </inst-vars><class-inst-vars>numberOfTransientBeings </class-inst-vars><imports></imports><category>Transient-Being</category><attributes><package>(none)</package></attributes></class><do-it>| aClass aBeing |aClass := Smalltalk	defineClass: #TransientBeing	superclass: #{Core.Object}	indexedType: #none	private: false	instanceVariableNames: 'firstName familyName birthday address phoneNumber'	classInstanceVariableNames: 'numberOfTransientBeings'	imports: ''	category: 'Transient-Being'.aClass inspect.aBeing := aClass new.aBeing inspect</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientBeing</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientBeing</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>TransientBeing removeFromSystem</do-it><do-it>#{Smalltalk.TransientBeing} ifDefinedDo: [:aClass | aClass removeFromSystem]</do-it><do-it>| aCollection aBlock |Transcript clear.ObjectMemory globalGarbageCollect.aCollection := NameSpace allInstances.aCollection := aCollection			asSortedCollection: [:a :b | a printString &lt; b printString].aBlock := 		[:aNameSpace :anInteger |		anInteger timesRepeat: [Transcript nextPutAll: '| '].		Transcript			nextPutAll: aNameSpace printString;			cr;			flush.		(aCollection select: [:each | each environment = aNameSpace])			do: [:each | aBlock value: each value: anInteger + 1 ]].aBlock value: Root value: 0</do-it><do-it>Jun absoluteName</do-it><do-it>Jun absoluteName</do-it><shared-variable><name>TransientVariables</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>Browser-Refactorings</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientVariables	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'</do-it><shared-variable><name>TransientVariables</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>Browser-Refactorings</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientVariables	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'</do-it><shared-variable><name>TransientVariables</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>Browser-Refactorings</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientVariables	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'</do-it><shared-variable><name>TransientVariables</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>Browser-Refactorings</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientVariables	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'</do-it><shared-variable><name>TransientVariables</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>Browser-Refactorings</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientVariables	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'</do-it><shared-variable><name>TransientVariable</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>(none)</package></attributes></shared-variable><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientVariable</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientVariable</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>| aValue |Transcript clear.Smalltalk	defineSharedVariable: #TransientVariable	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'.aValue := #{Smalltalk.TransientVariable} value.Transcript	nextPutAll: aValue printString;	cr.#{Smalltalk.TransientVariable} value: Object new.aValue := #{Smalltalk.TransientVariable} value.Transcript	nextPutAll: aValue printString;	cr.Smalltalk removeKey: #TransientVariable ifAbsent: [nil].Transcript flush</do-it><shared-variable><name>TransientVariable</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>(none)</package></attributes></shared-variable><do-it>| aValue |Transcript clear.Smalltalk	defineSharedVariable: #TransientVariable	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'.aValue := #{Smalltalk.TransientVariable} value.Transcript	nextPutAll: aValue printString;	cr.#{Smalltalk.TransientVariable} value: Object new.aValue := #{Smalltalk.TransientVariable} value.Transcript	nextPutAll: aValue printString;	cr.Smalltalk removeKey: #TransientVariable ifAbsent: [nil].Transcript flush</do-it><shared-variable><name>TransientVariable</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>System-Name Spaces</package></attributes></shared-variable><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientVariable</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientVariable</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>| aValue |Transcript clear.Smalltalk	defineSharedVariable: #TransientVariable	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'.aValue := #{Smalltalk.TransientVariable} value.Transcript	nextPutAll: aValue printString;	cr.#{Smalltalk.TransientVariable} value: Object new.aValue := #{Smalltalk.TransientVariable} value.Transcript	nextPutAll: aValue printString;	cr.Smalltalk removeKey: #TransientVariable ifAbsent: [nil].Transcript flush</do-it><class><name>TransientBeing</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstName familyName birthday address phoneNumber </inst-vars><class-inst-vars>umberOfTransientBeings </class-inst-vars><imports></imports><category>Transient-Being</category><attributes><package>(none)</package></attributes></class><shared-variable><name>TransientVariable</name><environment>TransientBeing</environment><private>false</private><constant>false</constant><category>Transient-Variable</category><initializer>nil</initializer><attributes><package>(none)</package></attributes></shared-variable><do-it>| aClass |aClass := Smalltalk	defineClass: #TransientBeing	superclass: #{Core.Object}	indexedType: #none	private: false	instanceVariableNames: 'firstName familyName birthday address phoneNumber'	classInstanceVariableNames: ' umberOfTransientBeings'	imports: ''	category: 'Transient-Being'.aClass	defineSharedVariable: #TransientVariable	private: false	constant: false	category: 'Transient-Variable'	initializer: 'nil'.aClass browse</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientBeing</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientBeing</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>TransientBeing removeFromSystem</do-it><do-it>#{Smalltalk.TransientBeing} ifDefinedDo: [:aClass | aClass removeFromSystem]</do-it><do-it>| aContext aBlock |[:aClass :thisMessage |aContext := thisContext.aBlock :=	[:context |	(aClass == context receiver class and: [thisMessage == context selector])		ifTrue: [^true].	context sender ifNotNil: [:it | aBlock value: it sender]].aBlock value: aContext sender.^false]	value: TextEditorController	value: #printIt</do-it><do-it>| aContext aBlock |[:aClass :thisMessage |aContext := thisContext.aBlock :=	[:context |	(aClass == context receiver class and: [thisMessage == context selector])		ifTrue: [^true].	context sender ifNotNil: [:it | aBlock value: it sender]].aBlock value: aContext sender.^false]	value: TextEditorController	value: #printIt</do-it><do-it>| aContext aBlock |[:aClass :thisMessage |aContext := thisContext.aBlock :=	[:context |	(aClass == context receiver class and: [thisMessage == context selector])		ifTrue: [^true].	context sender ifNotNil: [:it | aBlock value: it sender]].aBlock value: aContext sender.^false]	value: TextEditorController	value: #printIt</do-it><do-it>| aContext aBlock |[:aClass :thisMessage |aContext := thisContext.aBlock :=	[:context |	(aClass == context receiver class and: [thisMessage == context selector])		ifTrue: [^true].	context sender ifNotNil: [:it | aBlock value: it sender]].aBlock value: aContext sender.^false]	value: TextEditorController	value: #printIt</do-it><do-it>| aContext aBlock |[:aClass :thisMessage |aContext := thisContext.aBlock :=	[:context |	(aClass == context receiver class and: [thisMessage == context selector])		ifTrue: [^true].	context sender ifNotNil: [:it | aBlock value: it sender]].aBlock value: aContext sender.^false]	value: TextEditorController	value: #printIt</do-it><do-it>| aContext aBlock |[:aClass :thisMessage |aContext := thisContext.aBlock :=	[:context |	(aClass == context receiver class and: [thisMessage == context selector])		ifTrue: [^true].	context sender ifNotNil: [:it | aBlock value: it sender]].aBlock value: aContext sender.^false]	value: TextEditorController	value: #printIt </do-it><do-it>3 asPoint</do-it><do-it>3 asPoint</do-it><do-it>#(10 20 30 40 50) copyFrom: 2 to: 4</do-it><do-it>2 to: 4</do-it><do-it>| anArray | anArray := Array new: 5.anArray at: 1 put: 3 asPoint + 4 asPoint.^anArray</do-it><do-it>| anArray | anArray := Array new: 5.anArray at: 1 put: 3 asPoint + 4 asPoint.^anArray</do-it><do-it>Rectangle origin: 1 asPoint + 2 asPoint extent: 3 asPoint + 4 asPoint</do-it><do-it>| aBody |aBody := JunOpenGL3dObject aoki.aBody show.aBody yourself</do-it><do-it>Transcript clear.Transcript nextPutAll: 'ASAOKA Hiroko'.Transcript cr.Transcript nextPutAll: 'SAWAMOTO Eri'.Transcript cr.Transcript nextPutAll: 'AOKI Atsushi'.Transcript cr.Transcript flush</do-it><do-it>Transcript clear."Transcript nextPutAll: 'ASAOKA Hiroko'.Transcript cr.Transcript nextPutAll: 'SAWAMOTO Eri'.Transcript cr.Transcript nextPutAll: 'AOKI Atsushi'.Transcript cr."Transcript	clear;	nextPutAll: 'ASAOKA Hiroko';	cr;	nextPutAll: 'SAWAMOTO Eri';	cr;	nextPutAll: 'AOKI Atsushi';	flush</do-it><do-it>"Transcript clear.Transcript nextPutAll: 'ASAOKA Hiroko'.Transcript cr.Transcript nextPutAll: 'SAWAMOTO Eri'.Transcript cr.Transcript nextPutAll: 'AOKI Atsushi'.Transcript cr."Transcript	clear;	nextPutAll: 'ASAOKA Hiroko';	cr;	nextPutAll: 'SAWAMOTO Eri';	cr;	nextPutAll: 'AOKI Atsushi';	flush</do-it><do-it>| anInteger |anInteger := 123.anInteger yourself</do-it><do-it>| anArray anInteger | anArray := #(100 200 300 400 500).anInteger := anArray at: 3.anInteger yourself</do-it><do-it>| firstObject secondObject thirdObject anArray |firstObject := secondObject := thirdObject := nil.anArray := Array			with: firstObject			with: secondObject			with: thirdObject.anArray yourself</do-it><do-it>| aBody |aBody := JunOpenGL3dObject aoki.aBody show.^aBody</do-it><do-it>| anInteger |anInteger := 6.(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]</do-it><do-it>[| anInteger |anInteger := 6.(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]</do-it><do-it>[| anInteger |anInteger := 6.(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 6</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 5</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 100</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 10</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 10</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 9</do-it><do-it>[:anInteger |(3 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 6</do-it><do-it>[:anInteger |(3 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 2 </do-it><do-it>[:anInteger |(1 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 2</do-it><do-it>[:anInteger |(2 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 2 </do-it><do-it>[:anInteger |(3 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 2  </do-it><do-it>[:anInteger |(3 to: anInteger by: 1) inject: 1 into: [:v :n | v * n]]value: 2</do-it><do-it>| aBlock |aBlock := 	[:anInteger |	|errorBlock factorialBlock |	errorBlock := [self error: 'Factorial is invalid on negative numbers.'].	factorialBlock := [:v :n | v * n].	anInteger &lt; 0 ifTrue: [errorBlock value].	(2 to: anInteger by: 1) inject: 1 into: factorialBlock].aBlock value: 6</do-it><do-it>| aBlock |aBlock := 	[:anInteger |	|errorBlock factorialBlock |	errorBlock := [self error: 'Factorial is invalid on negative numbers.'].	factorialBlock := [:v :n | v * n].	anInteger &lt; 0 ifTrue: [errorBlock value].	(2 to: anInteger by: 1) inject: 1 into: factorialBlock].aBlock value: 6</do-it><component-created><name>2019-06-05</name> <type>package</type></component-created><component-property><name>2019-06-05</name> <type>package</type><property>comment</property> <value>'特別研究ⅱA'</value></component-property><class><name>MyFirstApplication</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>2019-06-05</package></attributes></class><comment><class-id>MyFirstApplication</class-id><body>特別研究ⅱA</body></comment><do-it>MyFirstApplication class organization addCategory: #examples</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>new</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>open</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>open</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>MyFirstApplication class</class-id> <category>examples</category><body package="2019-06-05" selector="example1">example1	"MyFirstApplication example1."	| anApplication |	anApplication := MyFirstApplication new.	anApplication open.	^anApplication</body></methods><methods><class-id>MyFirstApplication class</class-id> <category>interface specs</category><body package="2019-06-05" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'My First Application' 			#min: #(#{Core.Point} 200 150 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 618 349 1018 649 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>MyFirstApplication example1.</do-it><methods><class-id>MyFirstApplication class</class-id> <category>resources</category><body package="2019-06-05" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #quit ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MyFirstApplication class</class-id> <category>interface specs</category><body package="2019-06-05" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'My First Application' 			#min: #(#{Core.Point} 200 150 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 299 920 599 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>MyFirstApplication example1.</do-it><methods><class-id>MyFirstApplication class</class-id> <category>interface specs</category><body package="2019-06-05" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'My First Application' 			#min: #(#{Core.Point} 200 150 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 300 920 600 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>MyFirstApplication example1.</do-it><do-it>MyFirstApplication organization addCategory: #'interface closing'</do-it><methods><class-id>MyFirstApplication</class-id> <category>interface closing</category><body package="2019-06-05" selector="quit">quit	"アプリケーションを終了させる"	super closeRequest</body></methods><do-it>MyFirstApplication example1.</do-it><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-created><name>KSU-Template</name> <type>package</type></component-created><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>WhatTime</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outputMode showDate showWeekday showSeconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>KSU-Template</category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.WhatTime</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1079 610 1479 830 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>examples</category><body package="KSU-Template" selector="example1">example1	"KSU.WhatTime example1."	| anApplication |	anApplication := KSU.WhatTime new.	anApplication open.	^anApplication</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>resources</category><body package="KSU-Template" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="showDate">showDate	showDate ifNil: [showDate := false asValue].	^showDate</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="showSeconds">showSeconds	showSeconds ifNil: [showSeconds := false asValue].	^showSeconds</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="showWeekday">showWeekday	showWeekday ifNil: [showWeekday := false asValue].	^showWeekday</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="outputMode">outputMode	outputMode ifNil: [outputMode := 'トランスクリプト' asValue].	^outputMode</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>actions</category><body package="KSU-Template" selector="tellTime">tellTime	"KSU.WhatTime new tellTime."	| aTime aDate aStream aString |	aTime := Time now.	aDate := Date today.	aStream := String new writeStream.	self showDate value		ifTrue: 			[aStream				nextPutAll: aDate year printString;				nextPutAll: '年';				nextPutAll: aDate monthIndex printString;				nextPutAll: '月';				nextPutAll: aDate dayOfMonth printString;				nextPutAll: '日'].	self showWeekday value		ifTrue: 			[aStream				nextPutAll: '(';				nextPutAll: (#('月' '火' '水' '木' '金' '土' '日') at: aDate weekdayIndex);				nextPutAll: ')'].	aStream		nextPutAll: aTime hours printString;		nextPutAll: '時';		nextPutAll: aTime minutes printString;		nextPutAll: '分'.	self showSeconds value		ifTrue: 			[aStream				nextPutAll: aTime seconds printString;				nextPutAll: '秒'].	aString := aStream contents.	aStream close.	self outputMode value = 'トランスクリプト'		ifTrue: 			[Transcript				cr;				show: aString]		ifFalse: [Dialog warn: aString]</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>initialize-release</category><body package="KSU-Template" selector="initialize">initialize	super initialize.	outputMode := nil.	showDate := nil.	showWeekday := nil.	showSeconds := nil.	^self</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/WhatTime/WhatTime.st';	add: #comment: -&gt; 'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Template';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Template';	add: #class: -&gt; #{KSU.WhatTime};	add: #protocol: -&gt; #examples;	add: #selector: -&gt; #example1;	add: #execute: -&gt; [#{KSU.WhatTime} value example1];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><do-it>KSU.WhatTime example1.</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 340 920 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 56 24 360 48 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: '今何時？？' 					#isDefault: true 					#defaultable: true ) ) ) )</body></methods><do-it>KSU.WhatTime example1.</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 339 920 559 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 56 24 360 48 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: '今何時？？' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 72 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) ) ) )</body></methods><do-it>KSU.WhatTime example1.</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 339 919 559 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 56 24 360 48 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: '今何時？？' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 72 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 340 920 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 56 24 360 48 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: '今何時？？' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 72 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 152 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 339 919 559 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 56 24 360 48 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: '今何時？？' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 72 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 152 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 232 88 ) 					#name: #RadioButton1 					#label: 'ダイアログ' 					#select: #outputMode ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 340 920 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 56 24 360 48 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: '今何時？？' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 72 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 64 152 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 232 88 ) 					#name: #RadioButton1 					#label: 'ダイアログ' 					#select: #outputMode ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 232 136 ) 					#name: #RadioButton2 					#label: 'トランスクリプト' 					#select: #outputMode ) ) ) )</body></methods><do-it>KSU.WhatTime example1.</do-it><do-it>KSU.WhatTime example1.</do-it><do-it>KSU.WhatTime example1.</do-it><do-it>| aBlock |aBlock :=	[:anInteger |	| errorBlock recursionBlock |	errorBlock := [self error: 'Factorial is invalid on negative numbers.'].	recursionBlock := [aBlock value: anInteger - 1].	anInteger &lt; 0 ifTrue: [errorBlock value].	anInteger = 0 ifTrue: [1] ifFalse: [anInteger * recursionBlock value]].aBlock value: 6</do-it><do-it>| aBlock |aBlock :=	[:anInteger |	| errorBlock recursionBlock |	errorBlock := [self error: 'Factorial is invalid on negative numbers.'].	recursionBlock := [aBlock value: anInteger - 1].	anInteger &lt; 0 ifTrue: [errorBlock value].	anInteger = 0 ifTrue: [1] ifFalse: [anInteger * recursionBlock value]].aBlock value: 6</do-it><do-it>| aCollection |aCollection := OrderedCollection new: 10.(1 to: 10) do: [:index | aCollection add: index * 100].^aCollection</do-it><do-it>| aCollection |aCollection := OrderedCollection new: 10.(1 to: 10) do: [:index | aCollection add: index * 100].^aCollection</do-it><do-it>| aCollection |aCollection := OrderedCollection new: 10.(1 to: 10) do: [:index | aCollection add: index * 100].^aCollection</do-it><component-created><name>SmalltalkIdioms-Being</name> <type>package</type></component-created><component-created><name>SmalltalkIdioms-Being</name> <type>package</type></component-created><class><name>TrainsientBeing</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SmalltalkIdioms-Being</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TrainsientBeing</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TrainsientBeing</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>3 class</do-it><do-it>SmallInteger class</do-it><do-it>SmallInteger class class</do-it><do-it>| targetObject |Transcript clear.targetObject := 3.(1 to: 6) do:		[:nth |		| anObject |		anObject := targetObject.		Transcript nextPutAll: targetObject printString.		nth timesRepeat:			[anObject := anObject class.			Transcript nextPutAll: ' class'].		Transcript			cr;			nextPutAll: '==&gt;';			nextPutAll: anObject printString;			cr;			flush]	separatedBy: [Transcript cr]</do-it><do-it>| targetObject |Transcript clear.targetObject := 3.(1 to: 6) do:		[:nth |		| anObject |		anObject := targetObject.		Transcript nextPutAll: targetObject printString.		nth timesRepeat:			[anObject := anObject class.			Transcript nextPutAll: ' class'].		Transcript			cr;			nextPutAll: (JunSystemUtility printStringSuperclassesOf: anObject);			flush]	separatedBy: [Transcript cr]</do-it><do-it>3 browse</do-it><do-it>3 inspect</do-it><do-it>self + 4</do-it><do-it>anArray := #(100 200 300).anInteger := anArray at: 2.Transcript	cr;	show: anInteger printString.^anInteger</do-it><do-it>anArray := #(100 200 300).anInteger := anArray at: 2.Transcript	cr;	show: anInteger printString.^anInteger</do-it><name-space><name>TransientNameSpace</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Foo-Example</category><attributes><package>(none)</package></attributes></name-space><do-it>Smalltalk defineNameSpace: #TransientNameSpace	private: false	imports:'			private Smalltalk.*			'	category: 'Foo-Example'</do-it><name-space><name>TransientNameSpace</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Foo-Example</category><attributes><package>(none)</package></attributes></name-space><do-it>Smalltalk defineNameSpace: #TransientNameSpace	private: false	imports:'			private Smalltalk.*			'	category: 'Foo-Example'</do-it><component-created><name>Foo-Example</name> <type>package</type></component-created><component_definition_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.TransientNameSpace</definitionName> <definitionChange>removed</definitionChange></component_definition_change><component_definition_change><name>Foo-Example</name> <type>package</type><definitionName>Root.Smalltalk.TransientNameSpace</definitionName> <definitionChange>added</definitionChange></component_definition_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientNameSpace</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientNameSpace</staticKey> <definitionChange>added</definitionChange></component_static_change><component-created><name>Foo-Example</name> <type>package</type></component-created><shared-variable><name>TransientSharedVariable</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Foo-Example</category><initializer>nil</initializer><attributes><package>Foo-Example</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientSharedVariable	private: false	constant: false	category: 'Foo-Example'	initializer: 'nil'</do-it><component-created><name>Foo-Example</name> <type>package</type></component-created><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-created><name>KSU-Template</name> <type>package</type></component-created><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>WhatTime</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outputMode showDate showWeekday showSeconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>KSU-Template</category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.WhatTime</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 1079 610 1479 830 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>examples</category><body package="KSU-Template" selector="example1">example1	"KSU.WhatTime example1."	| anApplication |	anApplication := KSU.WhatTime new.	anApplication open.	^anApplication</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>resources</category><body package="KSU-Template" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="showDate">showDate	showDate ifNil: [showDate := false asValue].	^showDate</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="showSeconds">showSeconds	showSeconds ifNil: [showSeconds := false asValue].	^showSeconds</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="showWeekday">showWeekday	showWeekday ifNil: [showWeekday := false asValue].	^showWeekday</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>aspects</category><body package="KSU-Template" selector="outputMode">outputMode	outputMode ifNil: [outputMode := 'トランスクリプト' asValue].	^outputMode</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>actions</category><body package="KSU-Template" selector="tellTime">tellTime	"KSU.WhatTime new tellTime."	| aTime aDate aStream aString |	aTime := Time now.	aDate := Date today.	aStream := String new writeStream.	self showDate value		ifTrue: 			[aStream				nextPutAll: aDate year printString;				nextPutAll: '年';				nextPutAll: aDate monthIndex printString;				nextPutAll: '月';				nextPutAll: aDate dayOfMonth printString;				nextPutAll: '日'].	self showWeekday value		ifTrue: 			[aStream				nextPutAll: '(';				nextPutAll: (#('月' '火' '水' '木' '金' '土' '日') at: aDate weekdayIndex);				nextPutAll: ')'].	aStream		nextPutAll: aTime hours printString;		nextPutAll: '時';		nextPutAll: aTime minutes printString;		nextPutAll: '分'.	self showSeconds value		ifTrue: 			[aStream				nextPutAll: aTime seconds printString;				nextPutAll: '秒'].	aString := aStream contents.	aStream close.	self outputMode value = 'トランスクリプト'		ifTrue: 			[Transcript				cr;				show: aString]		ifFalse: [Dialog warn: aString]</body></methods><methods><class-id>KSU.WhatTime</class-id> <category>initialize-release</category><body package="KSU-Template" selector="initialize">initialize	super initialize.	outputMode := nil.	showDate := nil.	showWeekday := nil.	showSeconds := nil.	^self</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/WhatTime/WhatTime.st';	add: #comment: -&gt; 'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Template';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Template';	add: #class: -&gt; #{KSU.WhatTime};	add: #protocol: -&gt; #examples;	add: #selector: -&gt; #example1;	add: #execute: -&gt; [#{KSU.WhatTime} value example1];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 520 339 920 559 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#label: 'いま何時かしら' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>resources</category><body package="KSU-Template" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><do-it>KSU.WhatTime example1.</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #showTime 					#label: 'いま何時かしら' 					#defaultable: true ) ) ) )</body></methods><do-it>KSU.WhatTime example1.</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) ) ) )</body></methods><do-it>KSU.WhatTime example1.</do-it><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 64 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 160 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 88 ) 					#name: #RadioButton1 					#model: #outputMode 					#label: 'ダイアログ' 					#select: 'ダイアログ' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 136 ) 					#name: #RadioButton2 					#model: #outputMode 					#label: 'トランスクリプト' 					#select: 'トランスクリプト' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 64 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 160 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 88 ) 					#name: #RadioButton1 					#model: #outputMode 					#label: 'ダイアログ' 					#select: 'ダイアログ' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 136 ) 					#name: #RadioButton2 					#model: #outputMode 					#label: 'トランスクリプト' 					#select: 'トランスクリプト' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 64 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 160 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 88 ) 					#name: #RadioButton1 					#model: #outputMode 					#label: 'ダイアログ' 					#select: 'ダイアログ' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 136 ) 					#name: #RadioButton2 					#model: #outputMode 					#label: 'トランスクリプト' 					#select: 'トランスクリプト' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 64 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 160 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 88 ) 					#name: #RadioButton1 					#model: #outputMode 					#label: 'ダイアログ' 					#select: 'ダイアログ' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 136 ) 					#name: #RadioButton2 					#model: #outputMode 					#label: 'トランスクリプト' 					#select: 'トランスクリプト' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 64 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 160 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 88 ) 					#name: #RadioButton1 					#model: #outputMode 					#label: 'ダイアログ' 					#select: 'ダイアログ' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 136 ) 					#name: #RadioButton2 					#model: #outputMode 					#label: 'トランスクリプト' 					#select: 'トランスクリプト' ) ) ) )</body></methods><methods><class-id>KSU.WhatTime class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ボタンたち' 			#min: #(#{Core.Point} 400 220 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 519 340 919 560 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 112 24 280 40 ) 					#name: #ActionButton1 					#model: #tellTime 					#label: 'いま何時かしら' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 64 ) 					#name: #CheckBox1 					#model: #showDate 					#label: '日付' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 112 ) 					#name: #CheckBox2 					#model: #showWeekday 					#label: '曜日' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 56 160 ) 					#name: #CheckBox3 					#model: #showSeconds 					#label: '秒' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 88 ) 					#name: #RadioButton1 					#model: #outputMode 					#label: 'ダイアログ' 					#select: 'ダイアログ' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 240 136 ) 					#name: #RadioButton2 					#model: #outputMode 					#label: 'トランスクリプト' 					#select: 'トランスクリプト' ) ) ) )</body></methods><do-it>KSU.WhatTime example1.</do-it><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-created><name>KSU-Template</name> <type>package</type></component-created><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><class><name>ColorRGB</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>redGauge greenGauge blueGauge redField greenField blueField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>KSU-Template</category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.ColorRGB</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.ColorRGB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '加法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 1023 719 1535 879 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.ColorRGB class</class-id> <category>examples</category><body package="KSU-Template" selector="example1">example1	"KSU.ColorRGB example1."	| anApplication |	anApplication := KSU.ColorRGB new.	anApplication open.	^anApplication</body></methods><methods><class-id>KSU.ColorRGB class</class-id> <category>resources</category><body package="KSU-Template" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>aspects</category><body package="KSU-Template" selector="redGauge">redGauge	redGauge		ifNil: 			[redGauge := 0.5 asValue.			redGauge compute: [:aValue | self updateColorRed: aValue]].	^redGauge</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>aspects</category><body package="KSU-Template" selector="blueGauge">blueGauge	blueGauge		ifNil: 			[blueGauge := 0.5 asValue.			blueGauge compute: [:aValue | self updateColorBlue: aValue]].	^blueGauge</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>aspects</category><body package="KSU-Template" selector="greenField">greenField	greenField ifNil: [greenField := (self valueString: self greenGauge value) asValue].	^greenField</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>aspects</category><body package="KSU-Template" selector="blueField">blueField	blueField ifNil: [blueField := (self valueString: self blueGauge value) asValue].	^blueField</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>aspects</category><body package="KSU-Template" selector="redField">redField	redField ifNil: [redField := (self valueString: self redGauge value) asValue].	^redField</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>aspects</category><body package="KSU-Template" selector="greenGauge">greenGauge	greenGauge		ifNil: 			[greenGauge := 0.5 asValue.			greenGauge compute: [:aValue | self updateColorGreen: aValue]].	^greenGauge</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>accessing</category><body package="KSU-Template" selector="color">color	| aColor |	aColor := ColorValue				red: (0 max: (self redGauge value min: 1))				green: (0 max: (self greenGauge value min: 1))				blue: (0 max: (self blueGauge value min: 1)).	^aColor</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>private</category><body package="KSU-Template" selector="valueString:">valueString: aValue	^(aValue roundTo: 0.01) printString</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>private</category><body package="KSU-Template" selector="updateColorRed:">updateColorRed: aValue	InputState default altDown		ifTrue: 			[self greenGauge value = aValue ifFalse: [self greenGauge value: aValue].			self blueGauge value = aValue ifFalse: [self blueGauge value: aValue]].	self redField value: (self valueString: aValue).	self updateColor</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>private</category><body package="KSU-Template" selector="updateColorGreen:">updateColorGreen: aValue	InputState default altDown		ifTrue: 			[self redGauge value = aValue ifFalse: [self redGauge value: aValue].			self blueGauge value = aValue ifFalse: [self blueGauge value: aValue]].	self greenField value: (self valueString: aValue).	self updateColor</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>private</category><body package="KSU-Template" selector="updateColor">updateColor	self builder		ifNotNil: 			[:aBuilder |			aBuilder window				ifNotNil: 					[:aWindow |					aWindow						background: self color;						display]]</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>private</category><body package="KSU-Template" selector="updateColorBlue:">updateColorBlue: aValue	InputState default altDown		ifTrue: 			[self redGauge value = aValue ifFalse: [self redGauge value: aValue].			self greenGauge value = aValue ifFalse: [self greenGauge value: aValue]].	self blueField value: (self valueString: aValue).	self updateColor</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>interface opening</category><body package="KSU-Template" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self updateColor</body></methods><methods><class-id>KSU.ColorRGB</class-id> <category>initialize-release</category><body package="KSU-Template" selector="initialize">initialize	super initialize.	redGauge := nil.	greenGauge := nil.	blueGauge := nil.	redField := nil.	greenField := nil.	blueField := nil.	^self</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/ColorRGB/ColorRGB.st';	add: #comment: -&gt; 'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Template';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Template';	add: #class: -&gt; #{KSU.ColorRGB};	add: #protocol: -&gt; #examples;	add: #selector: -&gt; #example1;	add: #execute: -&gt; [#{KSU.ColorRGB} value example1];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><methods><class-id>KSU.ColorRGB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '加法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.ColorRGB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '加法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 369 975 529 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 100 15 455 40 ) 					#name: #Slider1 					#orientation: #horizontal ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 104 57 455 80 ) 					#name: #Slider2 					#orientation: #horizontal ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 104 97 455 120 ) 					#name: #Slider3 					#orientation: #horizontal ) ) ) )</body></methods><do-it>KSU.ColorRGB example1.</do-it><methods><class-id>KSU.ColorRGB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '加法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 100 15 455 40 ) 					#name: #Slider1 					#orientation: #horizontal ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 100 55 455 80 ) 					#name: #Slider2 					#orientation: #horizontal ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 100 95 455 120 ) 					#name: #Slider3 					#orientation: #horizontal ) ) ) )</body></methods><do-it>KSU.ColorRGB example1.</do-it><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-created><name>KSU-Template</name> <type>package</type></component-created><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><class><name>ColorCMY</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cyanGauge magentaGauge yellowGauge </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>KSU-Template</category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.ColorCMY</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 1023 719 1535 879 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.ColorCMY class</class-id> <category>examples</category><body package="KSU-Template" selector="example1">example1	"KSU.ColorCMY example1."	| anApplication |	anApplication := KSU.ColorCMY new.	anApplication open.	^anApplication</body></methods><methods><class-id>KSU.ColorCMY class</class-id> <category>resources</category><body package="KSU-Template" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>aspects</category><body package="KSU-Template" selector="yellowGauge">yellowGauge	yellowGauge		ifNil: 			[yellowGauge := 0.5 asValue.			yellowGauge compute: [:aValue | self updateColorYellow: aValue]].	^yellowGauge</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>aspects</category><body package="KSU-Template" selector="cyanGauge">cyanGauge	cyanGauge		ifNil: 			[cyanGauge := 0.5 asValue.			cyanGauge compute: [:aValue | self updateColorCyan: aValue]].	^cyanGauge</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>aspects</category><body package="KSU-Template" selector="magentaGauge">magentaGauge	magentaGauge		ifNil: 			[magentaGauge := 0.5 asValue.			magentaGauge compute: [:aValue | self updateColorMagenta: aValue]].	^magentaGauge</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>accessing</category><body package="KSU-Template" selector="color">color	| aColor |	aColor := ColorValue				cyan: (0 max: (self cyanGauge value min: 1))				magenta: (0 max: (self magentaGauge value min: 1))				yellow: (0 max: (self yellowGauge value min: 1)).	^aColor</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>private</category><body package="KSU-Template" selector="updateColor">updateColor	self builder		ifNotNil: 			[:aBuilder |			aBuilder window				ifNotNil: 					[:aWindow |					aWindow						background: self color;						display]]</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>private</category><body package="KSU-Template" selector="updateColorCyan:">updateColorCyan: aValue	InputState default altDown		ifTrue: 			[self magentaGauge value = aValue ifFalse: [self magentaGauge value: aValue].			self yellowGauge value = aValue ifFalse: [self yellowGauge value: aValue]].	self updateColor</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>private</category><body package="KSU-Template" selector="updateColorYellow:">updateColorYellow: aValue	InputState default altDown		ifTrue: 			[self cyanGauge value = aValue ifFalse: [self cyanGauge value: aValue].			self magentaGauge value = aValue ifFalse: [self magentaGauge value: aValue]].	self updateColor</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>private</category><body package="KSU-Template" selector="updateColorMagenta:">updateColorMagenta: aValue	InputState default altDown		ifTrue: 			[self cyanGauge value = aValue ifFalse: [self cyanGauge value: aValue].			self yellowGauge value = aValue ifFalse: [self yellowGauge value: aValue]].	self updateColor</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>interface opening</category><body package="KSU-Template" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self updateColor</body></methods><methods><class-id>KSU.ColorCMY</class-id> <category>initialize-release</category><body package="KSU-Template" selector="initialize">initialize	super initialize.	cyanGauge := nil.	magentaGauge := nil.	yellowGauge := nil.	^self</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/ColorCMY/ColorCMY.st';	add: #comment: -&gt; 'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Template';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Template';	add: #class: -&gt; #{KSU.ColorCMY};	add: #protocol: -&gt; #examples;	add: #selector: -&gt; #example1;	add: #execute: -&gt; [#{KSU.ColorCMY} value example1];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 25 ) 					#name: #Label1 					#label: 'Label' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 65 ) 					#name: #Label2 					#label: 'Label' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 105 ) 					#name: #Label3 					#label: 'Label' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #SpinButton1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 464 370 976 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 25 ) 					#name: #Label1 					#label: 'シアン' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 65 ) 					#name: #Label2 					#label: 'マゼンタ' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 40 105 ) 					#name: #Label3 					#label: 'イエロー' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #SpinButton1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 464 370 976 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 35 25 ) 					#name: #Label1 					#label: 'シアン  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 35 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 35 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #SpinButton1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #SpinButton1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 464 370 976 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #SpinButton1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#menu: #cyanPercent ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#menu: #cyanPercent ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#model: #cyanGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#menu: #cyanGauge ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #SpinButton3 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#model: #cyanGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><do-it>KSU.ColorCMY example1.</do-it><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 464 370 976 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #lightCyan ) ) 					#menu: #cyanGauge 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #magentaGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #orchid ) ) 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #yellowGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 3072 ) ) 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #PercentDoneBar1 					#isOpaque: true 					#model: #cyanGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #PercentDoneBar2 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #PercentDoneBar3 					#isOpaque: true 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 464 370 976 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #lightCyan ) ) 					#menu: #cyanGauge 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #magentaGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #orchid ) ) 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #yellowGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 3072 ) ) 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #cyanPercent 					#isOpaque: true 					#model: #cyanGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #magentaPercent 					#isOpaque: true 					#model: #magentaGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #yellowPercent 					#isOpaque: true 					#model: #yellowGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #lightCyan ) ) 					#menu: #cyanGauge 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #magentaGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #orchid ) ) 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #yellowGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 3072 ) ) 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #cyanPercent 					#isOpaque: true 					#model: #cyanGauge 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #cyanGauge 						#defaultString: nil ) 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #magentaPercent 					#isOpaque: true 					#model: #magentaGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #yellowPercent 					#isOpaque: true 					#model: #yellowGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #lightCyan ) ) 					#menu: #cyanGauge 					#alignment: #center 					#isReadOnly: false 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #magentaGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #orchid ) ) 					#alignment: #center 					#isReadOnly: false 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #yellowGauge 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 3072 ) ) 					#alignment: #center 					#isReadOnly: false 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #cyanPercent 					#isOpaque: true 					#model: #cyanGauge 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #cyanGauge 						#defaultString: nil ) 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #magentaPercent 					#isOpaque: true 					#model: #magentaGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #yellowPercent 					#isOpaque: true 					#model: #yellowGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><methods><class-id>KSU.ColorCMY class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '減法混色' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 370 975 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 25 ) 					#name: #Label1 					#label: 'シアン      :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 65 ) 					#name: #Label2 					#label: 'マゼンタ  :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 105 ) 					#name: #Label3 					#label: 'イエロー  :' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 20 200 45 ) 					#name: #cyanPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #lightCyan ) ) 					#model: #cyanGauge 					#menu: #cyanGauge 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 60 200 85 ) 					#name: #magentaPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #orchid ) ) 					#model: #magentaGauge 					#menu: #magentaGauge 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.Rectangle} 85 100 200 125 ) 					#name: #yellowPercent 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 8191 3072 ) ) 					#model: #yellowGauge 					#menu: #yellowGauge 					#alignment: #center 					#type: #number 					#low: 0 					#high: 1 					#interval: 0.01 ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 25 500 40 ) 					#name: #cyanPercent 					#isOpaque: true 					#model: #cyanGauge 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #cyanGauge 						#defaultString: nil ) 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 65 500 90 ) 					#name: #magentaPercent 					#isOpaque: true 					#model: #magentaGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.Rectangle} 225 105 500 130 ) 					#name: #yellowPercent 					#isOpaque: true 					#model: #yellowGauge 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><do-it>KSU.ColorCMY example1.</do-it><component-created><name>Foo-Example</name> <type>package</type></component-created><bundle-structure><name>SSK</name> <structure>#(#(#package 'SSK-System') #(#package 'SSK-Tool') #(#package 'SSK-Example') #(#package 'Foo-Example'))</structure></bundle-structure><bundle-structure><name>SSK</name> <structure>#(#(#package 'SSK-System') #(#package 'SSK-Tool') #(#package 'SSK-Example') #(#package 'Foo-Example'))</structure></bundle-structure><bundle-structure><name>SSK</name> <structure>#(#(#package 'SSK-System') #(#package 'SSK-Tool') #(#package 'SSK-Example'))</structure></bundle-structure><component-created><name>Foo-Example</name> <type>package</type></component-created><shared-variable><name>TransientSharedVariable</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Foo-Example</category><initializer>nil</initializer><attributes><package>Foo-Example</package></attributes></shared-variable><do-it>Smalltalk	defineSharedVariable: #TransientSharedVariable	private: false	constant: false	category: 'Foo-Example'	initializer: 'nil'</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientSharedVariable</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>TransientSharedVariable</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>#{TransientSharedVariable} removeFromSystem</do-it><do-it>Smalltalk organization removeCategory: #'Foo-Example'</do-it><class><name>A</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><class><name>B</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><class><name>C</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><class><name>A</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>a </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><class><name>B</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b c </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><class><name>C</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>d e f </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><do-it>C new</do-it><class><name>B</name><environment>Smalltalk</environment><super>A</super><private>false</private><indexed-type>none</indexed-type><inst-vars>b c </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><class><name>C</name><environment>Smalltalk</environment><super>B</super><private>false</private><indexed-type>none</indexed-type><inst-vars>d e f </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><do-it>C new</do-it><do-it>A organization addCategory: #messages</do-it><do-it>B organization addCategory: #messages</do-it><do-it>C organization addCategory: #messages</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>m1</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>m1</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cr</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cr</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>C</class-id> <category>messages</category><body package="Foo-Example" selector="m1">m1	Transcript		cr;		show: thisContext printString</body></methods><remove-selector><class-id>C</class-id> <selector>m1</selector></remove-selector><do-it>C organization removeCategory: #messages</do-it><methods><class-id>A</class-id> <category>messages</category><body package="Foo-Example" selector="m1">m1	Transcript		cr;		show: thisContext printString</body></methods><do-it>A new m1</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>m2</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>m2</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>printString</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>A</class-id> <category>messages</category><body package="Foo-Example" selector="m2">m2	Transcript		cr;		show: thisContext printString.	self m3</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>m3</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>m3</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>B</class-id> <category>messages</category><body package="Foo-Example" selector="m3">m3	Transcript		cr;		show: thisContext printString</body></methods><do-it>| aB |aB := B new.aB m3.^aB</do-it><class><name>C</name><environment>Smalltalk</environment><super>B</super><private>false</private><indexed-type>none</indexed-type><inst-vars>d e f </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Foo-Example</package></attributes></class><methods><class-id>C</class-id> <category>messages</category><body package="Foo-Example" selector="m3">m3	Transcript		cr;		show: thisContext printString</body></methods><methods><class-id>C</class-id> <category>messages</category><body package="Foo-Example" selector="m4">m4	Transcript		cr;		show: thisContext printString.	super m3</body></methods><do-it>| aC |aC := C new.aC m1.^aC</do-it><do-it>| aC |aC := C new.aC m2.^aC</do-it><do-it>| aC |aC := C new.aC m3.^aC</do-it><do-it>| aC |aC := C new.aC m4.^aC</do-it><do-it>Transcript clear.</do-it><do-it>| aC |aC := C new.aC m4.^aC</do-it><component-property><name>KSU</name> <type>bundle</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><component-created><name>KSU-Template</name> <type>package</type></component-created><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><bundle-structure><name>KSU</name> <structure>#(#(#package 'KSU-System') #(#package 'KSU-Example') #(#package 'KSU-Tool') #(#package 'KSU-Template'))</structure></bundle-structure><comment><name-space-id>KSU</name-space-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><component-property><name>KSU-Template</name> <type>package</type><property>comment</property> <value>'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.'</value></component-property><class><name>ColorHSBController</name><environment>KSU</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.ColorHSBController</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>ColorHSBView</name><environment>KSU</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aspectSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.ColorHSBView</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><class><name>ColorHSB</name><environment>KSU</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hueGauge saturationGauge brightnessGauge </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>KSU-Template</category><attributes><package>KSU-Template</package></attributes></class><comment><class-id>KSU.ColorHSB</class-id><body>Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.</body></comment><methods><class-id>KSU.ColorHSBController</class-id> <category>events</category><body package="KSU-Template" selector="exitEvent:">exitEvent: event	super exitEvent: event.	Cursor normal show.	^nil</body></methods><methods><class-id>KSU.ColorHSBController</class-id> <category>events</category><body package="KSU-Template" selector="mouseMovedEvent:">mouseMovedEvent: event	self viewHasCursor ifTrue: [Cursor crossHair show] ifFalse: [Cursor normal show].	^nil</body></methods><methods><class-id>KSU.ColorHSBController</class-id> <category>events</category><body package="KSU-Template" selector="redButtonPressedEvent:">redButtonPressedEvent: event	| aspectArea previousPoint currentPoint normalizedValue |	aspectArea := self view aspectArea.	previousPoint := nil.	[self sensor redButtonPressed] whileTrue: 			[currentPoint := self sensor cursorPoint.			currentPoint = previousPoint				ifFalse: 					[| endingTime |					endingTime := Time microsecondClock + 250000.					normalizedValue := (currentPoint x - aspectArea left) / (aspectArea right - aspectArea left).					normalizedValue := 0 max: (normalizedValue min: 1).					(self model perform: (self view aspectSelector , 'Gauge') asSymbol) value: normalizedValue.					(Delay untilMicroseconds: endingTime) wait.					previousPoint := currentPoint].			Processor yield].	^nil</body></methods><methods><class-id>KSU.ColorHSBController</class-id> <category>events</category><body package="KSU-Template" selector="enterEvent:">enterEvent: event	super enterEvent: event.	Cursor crossHair show.	^nil</body></methods><methods><class-id>KSU.ColorHSB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '色相・彩度・明度' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 1023 640 1535 800 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.ColorHSB class</class-id> <category>examples</category><body package="KSU-Template" selector="example1">example1	"KSU.ColorHSB example1."	| anApplication |	anApplication := KSU.ColorHSB new.	anApplication open.	^anApplication</body></methods><methods><class-id>KSU.ColorHSB class</class-id> <category>resources</category><body package="KSU-Template" selector="menuBar">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'ファイル' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '終了' 							#value: #closeRequest ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>aspects</category><body package="KSU-Template" selector="brightnessGauge">brightnessGauge	brightnessGauge		ifNil: 			[brightnessGauge := 0.5 asValue.			brightnessGauge compute: [:aValue | self updateColorBrightness: aValue]].	^brightnessGauge</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>aspects</category><body package="KSU-Template" selector="hueGauge">hueGauge	hueGauge		ifNil: 			[hueGauge := 0.5 asValue.			hueGauge compute: [:aValue | self updateColorHue: aValue]].	^hueGauge</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>aspects</category><body package="KSU-Template" selector="saturationGauge">saturationGauge	saturationGauge		ifNil: 			[saturationGauge := 0.5 asValue.			saturationGauge compute: [:aValue | self updateColorSaturation: aValue]].	^saturationGauge</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>accessing</category><body package="KSU-Template" selector="color">color	| aColor |	aColor := ColorValue				hue: (0 max: (self hueGauge value min: 1))				saturation: (0 max: (self saturationGauge value min: 1))				brightness: (0 max: (self brightnessGauge value min: 1)).	^aColor</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>private</category><body package="KSU-Template" selector="updateColorHue:">updateColorHue: aValue	InputState default altDown		ifTrue: 			[self saturationGauge value = aValue ifFalse: [self saturationGauge value: aValue].			self brightnessGauge value = aValue ifFalse: [self brightnessGauge value: aValue]].	self updateColor</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>private</category><body package="KSU-Template" selector="updateColorBrightness:">updateColorBrightness: aValue	InputState default altDown		ifTrue: 			[self hueGauge value = aValue ifFalse: [self hueGauge value: aValue].			self saturationGauge value = aValue ifFalse: [self saturationGauge value: aValue]].	self updateColor</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>private</category><body package="KSU-Template" selector="updateColorSaturation:">updateColorSaturation: aValue	InputState default altDown		ifTrue: 			[self hueGauge value = aValue ifFalse: [self hueGauge value: aValue].			self brightnessGauge value = aValue ifFalse: [self brightnessGauge value: aValue]].	self updateColor</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>private</category><body package="KSU-Template" selector="updateColor">updateColor	self builder		ifNotNil: 			[:aBuilder |			aBuilder window				ifNotNil: 					[:aWindow |					aWindow						background: self color;						display]]</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>interface opening</category><body package="KSU-Template" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self updateColor</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>interface opening</category><body package="KSU-Template" selector="brightnessView">brightnessView	| aView |	aView := ColorHSBView model: self.	aView aspectSelector: #brightness.	^aView</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>interface opening</category><body package="KSU-Template" selector="saturationView">saturationView	| aView |	aView := ColorHSBView model: self.	aView aspectSelector: #saturation.	^aView</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>interface opening</category><body package="KSU-Template" selector="hueView">hueView	| aView |	aView := ColorHSBView model: self.	aView aspectSelector: #hue.	^aView</body></methods><methods><class-id>KSU.ColorHSB</class-id> <category>initialize-release</category><body package="KSU-Template" selector="initialize">initialize	super initialize.	hueGauge := nil.	saturationGauge := nil.	brightnessGauge := nil.	^self</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>accessing</category><body package="KSU-Template" selector="aspectSelector:">aspectSelector: aSymbol	aspectSelector := aSymbol</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>accessing</category><body package="KSU-Template" selector="aspectSelector">aspectSelector	^aspectSelector</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>accessing</category><body package="KSU-Template" selector="aspectArea">aspectArea	^self bounds insetBy: self defaultInset</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>defaults</category><body package="KSU-Template" selector="defaultInset">defaultInset	^6 @ 6</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>displaying</category><body package="KSU-Template" selector="displayAspectAreaOn:">displayAspectAreaOn: graphicsContext	| pixmap gc area symbol left right top bottom |	pixmap := Pixmap extent: self aspectArea extent.	gc := pixmap graphicsContext.	area := pixmap bounds.	symbol := self aspectSelector.	left := area left.	right := area right.	top := area top.	bottom := area bottom.	left to: right - 1		do: 			[:x |			| value color box |			value := (x - left) / (right - left).			color := self model color.			symbol = #hue				ifTrue: 					[color := ColorValue								hue: value								saturation: 1 yourself								brightness: 1 yourself].			symbol = #saturation				ifTrue: 					[color := ColorValue								hue: color hue								saturation: value								brightness: 1 yourself].			symbol = #brightness				ifTrue: 					[color := ColorValue								hue: color hue								saturation: color saturation								brightness: value].			box := x @ top corner: (x + 1) @ bottom.			gc				paint: color;				displayRectangle: box].	pixmap		displayOn: graphicsContext at: self aspectArea origin;		close</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>displaying</category><body package="KSU-Template" selector="displayMarksOn:">displayMarksOn: graphicsContext	| symbol color value area point box points |	symbol := self aspectSelector.	color := self model color.	value := color perform: symbol.	area := self aspectArea.	point := ((value * area width + area left) @ area top) rounded.	box := 0 @ 0 corner: self defaultInset.	box := box align: box bottomCenter with: point.	points := Array				with: box bottomCenter				with: box topLeft				with: box topRight				with: box bottomCenter.	graphicsContext		paint: ColorValue black;		displayPolygon: points.	box := box insetBy: 1.	points := Array				with: box bottomCenter				with: box topLeft				with: box topRight				with: box bottomCenter.	graphicsContext		paint: ColorValue white;		displayPolygon: points.	point := ((value * area width + area left) @ area bottom) rounded.	box := 0 @ 0 corner: self defaultInset.	box := box align: box topCenter with: point.	points := Array				with: box topCenter				with: box bottomLeft				with: box bottomRight				with: box topCenter.	graphicsContext		paint: ColorValue black;		displayPolygon: points.	box := box insetBy: 1.	points := Array				with: box topCenter				with: box bottomLeft				with: box bottomRight				with: box topCenter.	graphicsContext		paint: ColorValue white;		displayPolygon: points</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>displaying</category><body package="KSU-Template" selector="displayAspectAreasOutsideOn:">displayAspectAreasOutsideOn: graphicsContext	graphicsContext paint: self backgroundColor.	(self bounds areasOutside: self aspectArea) do: [:aRectangle | graphicsContext displayRectangle: aRectangle]</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>displaying</category><body package="KSU-Template" selector="displayOn:">displayOn: graphicsContext	self model ifNil: [^nil].	self		displayAspectAreasOutsideOn: graphicsContext;		displayAspectAreaOn: graphicsContext;		displayMarksOn: graphicsContext</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>initialize-release</category><body package="KSU-Template" selector="initialize">initialize	super initialize.	aspectSelector := nil.	^self</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>updating</category><body package="KSU-Template" selector="update:">update: aspectSymbol	self invalidateNow</body></methods><methods><class-id>KSU.ColorHSBView</class-id> <category>controller accessing</category><body package="KSU-Template" selector="defaultControllerClass">defaultControllerClass	^KSU.ColorHSBController</body></methods><do-it>| aCollection |(aCollection := OrderedCollection new)	add: #url: -&gt; 'http://www.cc.kyoto-su.ac.jp/~atsushi/Programs/VisualWorks/ColorHSB/ColorHSB.st';	add: #comment: -&gt; 'Copyright 2008-2011 KSU (Kyoto Sangyo University). All Rights Reserved.';	add: #bundle: -&gt; #KSU;	add: #package: -&gt; 'KSU-Template';	add: #nameSpace: -&gt; #KSU;	add: #category: -&gt; 'KSU-Template';	add: #class: -&gt; #{KSU.ColorHSB};	add: #protocol: -&gt; #examples;	add: #selector: -&gt; #example1;	add: #execute: -&gt; [#{KSU.ColorHSB} value example1];	yourself.JunSystem	perform: ((aCollection collect: [:each | each key]) inject: String new			into: [:selector :key | selector , key]) asSymbol	withArguments: (aCollection collect: [:each | each value]) asArray</do-it><methods><class-id>KSU.ColorHSB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '色相・彩度・明度' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 463 369 975 529 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>KSU.ColorHSB class</class-id> <category>interface specs</category><body package="KSU-Template" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '色相・彩度・明度' 			#min: #(#{Core.Point} 512 160 ) 			#max: #(#{Core.Point} 512 160 ) 			#bounds: #(#{Graphics.Rectangle} 534 370 1046 530 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 25 25 ) 					#name: #hueLabel 					#label: '色相 :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 24 57 ) 					#name: #saturationLabel 					#label: '彩度 :' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 24 89 ) 					#name: #brightnessLabel 					#label: '明度 :' ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/Users/nobu/Desktop/Smalltalk/2019-06-week2/色相・彩度・明度/ColorHSB.im' 'June 13, 2019' '11:52:25 PM')""An image file /Users/nobu/Desktop/Smalltalk/2019-06-week2/色相・彩度・明度/ColorHSB.im was created at 11:52:25 PM on June 13, 2019."</do-it>